/**
 * Route Type Definitions
 *
 * These types will be automatically generated by Expo Router when typed routes are enabled.
 * This file serves as documentation for the available routes.
 */

/**
 * Root Stack Routes
 */
export type RootRoutes = {
  "(tabs)": undefined;
  "(auth)": undefined;
  "video-record": undefined;
  "video-preview": { processedVideo: string }; // JSON stringified ProcessedVideo
  "secret-detail": { confessionId: string };
  "video-player": { confessionId: string };
  saved: undefined;
  "my-secrets": undefined;
  settings: undefined;
  paywall: { feature?: string; source?: string };
  webview: { url: string; title: string };
  "+not-found": undefined;
};

/**
 * Auth Stack Routes
 */
export type AuthRoutes = {
  onboarding: undefined;
  signup: undefined;
  signin: undefined;
};

/**
 * Tab Routes
 */
export type TabRoutes = {
  index: undefined; // Home/Secrets
  videos: undefined;
  create: undefined;
  trending: { hashtag?: string };
  profile: undefined;
};

/**
 * All Routes (Combined)
 */
export type AllRoutes = keyof RootRoutes | `(auth)/${keyof AuthRoutes}` | `(tabs)/${keyof TabRoutes}`;

/**
 * Route Parameter Types
 */
export interface RouteParams {
  // Secret/Video routes
  confessionId?: string;

  // Trending
  hashtag?: string;

  // Paywall
  feature?: string;
  source?: string;

  // WebView
  url?: string;
  title?: string;

  // Video Preview
  processedVideo?: string; // JSON stringified
}

/**
 * Navigation State Types
 */
export interface NavigationState {
  key: string;
  index: number;
  routeNames: string[];
  routes: {
    key: string;
    name: string;
    params?: RouteParams;
  }[];
}

/**
 * Deep Link Patterns
 */
export const DEEP_LINK_PATTERNS = {
  SECRET: "/secret-detail?confessionId=:confessionId",
  VIDEO: "/video-player?confessionId=:confessionId",
  TRENDING: "/(tabs)/trending?hashtag=:hashtag",
  PAYWALL: "/paywall?feature=:feature&source=:source",
  SAVED: "/saved",
  MY_SECRETS: "/my-secrets",
  SETTINGS: "/settings",
  HOME: "/(tabs)",
  VIDEOS: "/(tabs)/videos",
  CREATE: "/(tabs)/create",
  PROFILE: "/(tabs)/profile",
  ONBOARDING: "/(auth)/onboarding",
  SIGNUP: "/(auth)/signup",
  SIGNIN: "/(auth)/signin",
} as const;

/**
 * Type guard for checking if a route exists
 */
export function isValidRoute(route: string): route is AllRoutes {
  const validRoutes = [
    "(tabs)",
    "(auth)",
    "video-record",
    "video-preview",
    "secret-detail",
    "video-player",
    "saved",
    "my-secrets",
    "settings",
    "paywall",
    "webview",
    "(auth)/onboarding",
    "(auth)/signup",
    "(auth)/signin",
    "(tabs)/index",
    "(tabs)/videos",
    "(tabs)/create",
    "(tabs)/trending",
    "(tabs)/profile",
  ];
  return validRoutes.includes(route);
}

/**
 * Route metadata for analytics and logging
 */
export const ROUTE_METADATA = {
  "(tabs)": { name: "Home", category: "main", requiresAuth: true },
  "(tabs)/videos": { name: "Videos", category: "main", requiresAuth: true },
  "(tabs)/create": { name: "Create", category: "main", requiresAuth: true },
  "(tabs)/trending": { name: "Trending", category: "main", requiresAuth: true },
  "(tabs)/profile": { name: "Profile", category: "main", requiresAuth: true },
  "(auth)/onboarding": { name: "Onboarding", category: "auth", requiresAuth: false },
  "(auth)/signup": { name: "Sign Up", category: "auth", requiresAuth: false },
  "(auth)/signin": { name: "Sign In", category: "auth", requiresAuth: false },
  "video-record": { name: "Record Video", category: "modal", requiresAuth: true },
  "video-preview": { name: "Video Preview", category: "modal", requiresAuth: true },
  "secret-detail": { name: "Secret Detail", category: "content", requiresAuth: true },
  "video-player": { name: "Video Player", category: "content", requiresAuth: true },
  saved: { name: "Saved", category: "content", requiresAuth: true },
  "my-secrets": { name: "My Secrets", category: "content", requiresAuth: true },
  settings: { name: "Settings", category: "modal", requiresAuth: true },
  paywall: { name: "Premium", category: "monetization", requiresAuth: false },
  webview: { name: "Web View", category: "utility", requiresAuth: false },
} as const;
