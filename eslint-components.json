[{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/AdBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/AnimatedActionButton.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'heartScale'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [isActive, icon, heartScale]","fix":{"range":[1103,1119],"text":"[isActive, icon, heartScale]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/AnimatedModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'animationConfig', 'animationType', 'backdropOpacity', 'backdropOpacityValue', 'handleClose', 'scaleValue', 'springConfig', and 'translateYValue'. Either include them or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [animationConfig, animationType, backdropOpacity, backdropOpacityValue, handleClose, scaleValue, springConfig, translateYValue, visible]","fix":{"range":[1799,1808],"text":"[animationConfig, animationType, backdropOpacity, backdropOpacityValue, handleClose, scaleValue, springConfig, translateYValue, visible]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\";\nimport { Modal, View, Pressable, Keyboard, Text } from \"react-native\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  withSpring,\n  runOnJS,\n  cancelAnimation,\n} from \"react-native-reanimated\";\nimport { ANIMATIONS } from \"../utils/cn\";\n\ninterface AnimatedModalProps {\n  visible: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  animationType?: \"fade\" | \"slide\" | \"scale\";\n  backdropOpacity?: number;\n  dismissOnBackdrop?: boolean;\n  dismissOnBackButton?: boolean;\n  className?: string;\n}\n\nexport default function AnimatedModal({\n  visible,\n  onClose,\n  children,\n  animationType = \"scale\",\n  backdropOpacity = 0.5,\n  dismissOnBackdrop = true,\n  dismissOnBackButton = true,\n  className = \"\",\n}: AnimatedModalProps) {\n  const backdropOpacityValue = useSharedValue(0);\n  const scaleValue = useSharedValue(0.8);\n  const translateYValue = useSharedValue(50);\n  const isClosing = useRef(false);\n\n  // Animation configurations\n  const animationConfig = {\n    duration: ANIMATIONS.duration.normal,\n  };\n\n  const springConfig = {\n    damping: 20,\n    stiffness: 300,\n  };\n\n  useEffect(() => {\n    if (visible) {\n      isClosing.current = false;\n      // Animate in\n      backdropOpacityValue.value = withTiming(backdropOpacity, animationConfig);\n\n      if (animationType === \"scale\") {\n        scaleValue.value = withSpring(1, springConfig);\n      } else if (animationType === \"slide\") {\n        translateYValue.value = withSpring(0, springConfig);\n      }\n    } else if (!isClosing.current) {\n      // Animate out\n      handleClose();\n    }\n\n    // Cleanup function\n    return () => {\n      cancelAnimation(backdropOpacityValue);\n      cancelAnimation(scaleValue);\n      cancelAnimation(translateYValue);\n    };\n  }, [visible]);\n\n  const handleClose = () => {\n    if (isClosing.current) return;\n\n    isClosing.current = true;\n\n    // Dismiss keyboard\n    Keyboard.dismiss();\n\n    // Animate out\n    backdropOpacityValue.value = withTiming(0, animationConfig);\n\n    if (animationType === \"scale\") {\n      scaleValue.value = withTiming(0.8, animationConfig, (finished) => {\n        if (finished) {\n          runOnJS(onClose)();\n        }\n      });\n    } else if (animationType === \"slide\") {\n      translateYValue.value = withTiming(50, animationConfig, (finished) => {\n        if (finished) {\n          runOnJS(onClose)();\n        }\n      });\n    } else {\n      // Fade animation - use animation completion callback\n      backdropOpacityValue.value = withTiming(0, animationConfig, (finished) => {\n        if (finished) {\n          runOnJS(onClose)();\n        }\n      });\n    }\n  };\n\n  const backdropStyle = useAnimatedStyle(\n    () => ({\n      opacity: backdropOpacityValue.value,\n    }),\n    [],\n  );\n\n  const contentStyle = useAnimatedStyle(() => {\n    const baseStyle: any = {};\n\n    if (animationType === \"scale\") {\n      baseStyle.transform = [{ scale: scaleValue.value }];\n    } else if (animationType === \"slide\") {\n      baseStyle.transform = [{ translateY: translateYValue.value }];\n    }\n\n    return baseStyle;\n  }, [animationType]);\n\n  const handleBackdropPress = () => {\n    if (dismissOnBackdrop && !isClosing.current) {\n      handleClose();\n    }\n  };\n\n  const handleRequestClose = () => {\n    if (dismissOnBackButton && !isClosing.current) {\n      handleClose();\n    }\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"none\" // We handle animations ourselves\n      onRequestClose={handleRequestClose}\n      statusBarTranslucent\n    >\n      <View className=\"flex-1\">\n        {/* Animated backdrop */}\n        <Animated.View style={[backdropStyle]} className=\"absolute inset-0 bg-black\" />\n\n        {/* Backdrop pressable */}\n        <Pressable\n          className=\"flex-1\"\n          onPress={handleBackdropPress}\n          accessibilityRole=\"button\"\n          accessibilityLabel=\"Close modal\"\n        >\n          <View className=\"flex-1 justify-center items-center px-6\">\n            {/* Modal content */}\n            <Pressable\n              onPress={(e) => e.stopPropagation()} // Prevent backdrop press\n              className=\"w-full max-w-sm\"\n            >\n              <Animated.View style={[contentStyle]} className={`bg-gray-900 rounded-2xl p-6 ${className}`}>\n                {children}\n              </Animated.View>\n            </Pressable>\n          </View>\n        </Pressable>\n      </View>\n    </Modal>\n  );\n}\n\n// Convenience components for common modal types\nexport function AlertModal({\n  visible,\n  onClose,\n  title,\n  message,\n  confirmText = \"OK\",\n  onConfirm,\n}: {\n  visible: boolean;\n  onClose: () => void;\n  title: string;\n  message: string;\n  confirmText?: string;\n  onConfirm?: () => void;\n}) {\n  const handleConfirm = () => {\n    onConfirm?.();\n    onClose();\n  };\n\n  return (\n    <AnimatedModal visible={visible} onClose={onClose} animationType=\"scale\">\n      <View className=\"items-center\">\n        <View className=\"w-16 h-16 bg-blue-500 rounded-full items-center justify-center mb-4\">\n          <Text className=\"text-white text-24\">ℹ️</Text>\n        </View>\n        <Text className=\"text-white text-18 font-semibold mb-2 text-center\">{title}</Text>\n        <Text className=\"text-gray-400 text-15 text-center mb-6 leading-5\">{message}</Text>\n        <Pressable\n          className=\"bg-blue-500 rounded-full py-3 px-6 touch-target w-full\"\n          onPress={handleConfirm}\n          accessibilityRole=\"button\"\n          accessibilityLabel={confirmText}\n        >\n          <Text className=\"text-white font-semibold text-center\">{confirmText}</Text>\n        </Pressable>\n      </View>\n    </AnimatedModal>\n  );\n}\n\nexport function ConfirmModal({\n  visible,\n  onClose,\n  title,\n  message,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  onConfirm,\n  destructive = false,\n}: {\n  visible: boolean;\n  onClose: () => void;\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => void;\n  destructive?: boolean;\n}) {\n  const handleConfirm = () => {\n    onConfirm();\n    onClose();\n  };\n\n  return (\n    <AnimatedModal visible={visible} onClose={onClose} animationType=\"scale\">\n      <View className=\"items-center\">\n        <View\n          className={`w-16 h-16 ${destructive ? \"bg-red-500\" : \"bg-yellow-500\"} rounded-full items-center justify-center mb-4`}\n        >\n          <Text className=\"text-white text-24\">{destructive ? \"⚠️\" : \"❓\"}</Text>\n        </View>\n        <Text className=\"text-white text-18 font-semibold mb-2 text-center\">{title}</Text>\n        <Text className=\"text-gray-400 text-15 text-center mb-6 leading-5\">{message}</Text>\n        <View className=\"flex-row space-x-3 w-full\">\n          <Pressable\n            className=\"flex-1 py-3 px-4 rounded-full bg-gray-700 touch-target\"\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={cancelText}\n          >\n            <Text className=\"text-white font-semibold text-center\">{cancelText}</Text>\n          </Pressable>\n          <Pressable\n            className={`flex-1 py-3 px-4 rounded-full touch-target ${destructive ? \"bg-red-600\" : \"bg-blue-500\"}`}\n            onPress={handleConfirm}\n            accessibilityRole=\"button\"\n            accessibilityLabel={confirmText}\n          >\n            <Text className=\"text-white font-semibold text-center\">{confirmText}</Text>\n          </Pressable>\n        </View>\n      </View>\n    </AnimatedModal>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/AuthButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/AuthInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/CharacterCounter.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'progress'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [currentLength, maxLength, progress]","fix":{"range":[915,941],"text":"[currentLength, maxLength, progress]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/CommentBottomSheet.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'backdropOpacity' and 'translateY'. Either include them or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [backdropOpacity, isVisible, translateY]","fix":{"range":[2160,2171],"text":"[backdropOpacity, isVisible, translateY]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { View, Text, TextInput, Pressable, ScrollView } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { format } from \"date-fns\";\nimport Animated, { useSharedValue, useAnimatedStyle, withSpring, withTiming, runOnJS } from \"react-native-reanimated\";\nimport { Gesture, GestureDetector } from \"react-native-gesture-handler\";\nimport { InlineCharacterCounter } from \"./CharacterCounter\";\nimport { sanitizeText } from \"../utils/consolidatedUtils\";\nimport { BottomSheetKeyboardWrapper } from \"./KeyboardAvoidingWrapper\";\nimport { getOptimizedTextInputProps } from \"../utils/keyboardUtils\";\n\ninterface Comment {\n  id: string;\n  text: string;\n  timestamp: number;\n  likes: number;\n  isLiked: boolean;\n}\n\ninterface CommentBottomSheetProps {\n  isVisible: boolean;\n  onClose: () => void;\n  confessionId: string;\n}\n\nconst SHEET_HEIGHT = 600;\n\nexport default function CommentBottomSheet({ isVisible, onClose }: CommentBottomSheetProps) {\n  const [comments, setComments] = useState<Comment[]>([\n    {\n      id: \"1\",\n      text: \"I can totally relate to this. Thank you for sharing.\",\n      timestamp: Date.now() - 3600000,\n      likes: 12,\n      isLiked: false,\n    },\n    {\n      id: \"2\",\n      text: \"You're not alone in feeling this way. Stay strong! 💪\",\n      timestamp: Date.now() - 7200000,\n      likes: 8,\n      isLiked: true,\n    },\n    {\n      id: \"3\",\n      text: \"This is so brave of you to share. Sending virtual hugs! 🤗\",\n      timestamp: Date.now() - 10800000,\n      likes: 15,\n      isLiked: false,\n    },\n  ]);\n  const [newComment, setNewComment] = useState(\"\");\n\n  const translateY = useSharedValue(SHEET_HEIGHT);\n  const backdropOpacity = useSharedValue(0);\n\n  useEffect(() => {\n    if (isVisible) {\n      translateY.value = withSpring(0, { damping: 15, stiffness: 150 });\n      backdropOpacity.value = withTiming(0.5, { duration: 300 });\n    } else {\n      translateY.value = withSpring(SHEET_HEIGHT, { damping: 15, stiffness: 150 });\n      backdropOpacity.value = withTiming(0, { duration: 300 });\n    }\n  }, [isVisible]);\n\n  const panGesture = Gesture.Pan()\n    .onUpdate((event) => {\n      if (event.translationY > 0) {\n        translateY.value = event.translationY;\n      }\n    })\n    .onEnd((event) => {\n      if (event.translationY > SHEET_HEIGHT * 0.3) {\n        translateY.value = withSpring(SHEET_HEIGHT);\n        runOnJS(onClose)();\n      } else {\n        translateY.value = withSpring(0);\n      }\n    });\n\n  const sheetStyle = useAnimatedStyle(\n    () => ({\n      transform: [{ translateY: translateY.value }],\n    }),\n    [],\n  );\n\n  const backdropStyle = useAnimatedStyle(\n    () => ({\n      opacity: backdropOpacity.value,\n    }),\n    [],\n  );\n\n  const handleAddComment = () => {\n    if (newComment.trim()) {\n      const comment: Comment = {\n        id: Date.now().toString(),\n        text: newComment.trim(),\n        timestamp: Date.now(),\n        likes: 0,\n        isLiked: false,\n      };\n      setComments([comment, ...comments]);\n      setNewComment(\"\");\n    }\n  };\n\n  const toggleCommentLike = (commentId: string) => {\n    setComments((prev) =>\n      prev.map((comment) =>\n        comment.id === commentId\n          ? {\n              ...comment,\n              isLiked: !comment.isLiked,\n              likes: comment.likes + (comment.isLiked ? -1 : 1),\n            }\n          : comment,\n      ),\n    );\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <View style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n      {/* Backdrop */}\n      <Animated.View\n        style={[\n          {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: \"black\",\n          },\n          backdropStyle,\n        ]}\n      >\n        <Pressable style={{ flex: 1 }} onPress={onClose} />\n      </Animated.View>\n\n      {/* Bottom Sheet */}\n      <GestureDetector gesture={panGesture}>\n        <Animated.View\n          style={[\n            {\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              height: SHEET_HEIGHT,\n              backgroundColor: \"#1A1A1A\",\n              borderTopLeftRadius: 20,\n              borderTopRightRadius: 20,\n            },\n            sheetStyle,\n          ]}\n        >\n          {/* Handle */}\n          <View className=\"items-center py-3\">\n            <View className=\"w-10 h-1 bg-gray-600 rounded-full\" />\n          </View>\n\n          {/* Header */}\n          <View className=\"flex-row items-center justify-between px-4 pb-3 border-b border-gray-800\">\n            <Text className=\"text-white text-18 font-bold\">{comments.length} Comments</Text>\n            <Pressable onPress={onClose}>\n              <Ionicons name=\"close\" size={24} color=\"#8B98A5\" />\n            </Pressable>\n          </View>\n\n          {/* Comments List */}\n          <ScrollView className=\"flex-1 px-4\" showsVerticalScrollIndicator={false}>\n            {comments.map((comment) => (\n              <View key={comment.id} className=\"py-4 border-b border-gray-800\">\n                <View className=\"flex-row items-start\">\n                  <View className=\"w-8 h-8 bg-gray-700 rounded-full items-center justify-center mr-3\">\n                    <Ionicons name=\"person\" size={14} color=\"#8B98A5\" />\n                  </View>\n                  <View className=\"flex-1\">\n                    <View className=\"flex-row items-center mb-1\">\n                      <Text className=\"text-white font-medium text-14\">Anonymous</Text>\n                      <Text className=\"text-gray-500 text-12 ml-2\">\n                        {format(new Date(comment.timestamp), \"MMM d, h:mm a\")}\n                      </Text>\n                    </View>\n                    <Text className=\"text-white text-15 leading-5 mb-2\">{sanitizeText(comment.text)}</Text>\n                    <View className=\"flex-row items-center\">\n                      <Pressable className=\"flex-row items-center mr-4\" onPress={() => toggleCommentLike(comment.id)}>\n                        <Ionicons\n                          name={comment.isLiked ? \"heart\" : \"heart-outline\"}\n                          size={16}\n                          color={comment.isLiked ? \"#FF3040\" : \"#8B98A5\"}\n                        />\n                        <Text className=\"text-gray-400 text-12 ml-1\">{comment.likes}</Text>\n                      </Pressable>\n                      <Pressable className=\"flex-row items-center\">\n                        <Ionicons name=\"chatbubble-outline\" size={16} color=\"#8B98A5\" />\n                        <Text className=\"text-gray-400 text-12 ml-1\">Reply</Text>\n                      </Pressable>\n                    </View>\n                  </View>\n                </View>\n              </View>\n            ))}\n          </ScrollView>\n\n          {/* Comment Input */}\n          <BottomSheetKeyboardWrapper>\n            <SafeAreaView>\n              <View className=\"flex-row items-center px-4 py-3 border-t border-gray-800\">\n                <View className=\"w-8 h-8 bg-gray-700 rounded-full items-center justify-center mr-3\">\n                  <Ionicons name=\"person\" size={14} color=\"#8B98A5\" />\n                </View>\n                <View className=\"flex-1 mr-3\">\n                  <TextInput\n                    {...getOptimizedTextInputProps(\"comment\")}\n                    className=\"bg-gray-800 rounded-full px-4 py-2 text-white text-15\"\n                    placeholder=\"Add a comment...\"\n                    placeholderTextColor=\"#8B98A5\"\n                    value={newComment}\n                    onChangeText={setNewComment}\n                    multiline\n                    maxLength={500}\n                  />\n                  {newComment.length > 400 && (\n                    <InlineCharacterCounter\n                      currentLength={newComment.length}\n                      maxLength={500}\n                      className=\"absolute -bottom-5 right-2 text-xs\"\n                    />\n                  )}\n                </View>\n                <Pressable\n                  className={`w-8 h-8 rounded-full items-center justify-center ${\n                    newComment.trim() ? \"bg-blue-500\" : \"bg-gray-700\"\n                  }`}\n                  onPress={handleAddComment}\n                  disabled={!newComment.trim()}\n                >\n                  <Ionicons name=\"send\" size={16} color={newComment.trim() ? \"#FFFFFF\" : \"#8B98A5\"} />\n                </Pressable>\n              </View>\n            </SafeAreaView>\n          </BottomSheetKeyboardWrapper>\n        </Animated.View>\n      </GestureDetector>\n    </View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ConfessionSkeleton.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'shimmer'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [shimmer]","fix":{"range":[780,782],"text":"[shimmer]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ConsentDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/EnhancedCommentBottomSheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FlatList' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollView' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AccessibilityInfo' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Vibration' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LayoutAnimation' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BottomSheetModalProvider' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BottomSheetScrollView' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Haptics' is defined but never used.","line":32,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MaterialCommunityIcons' is defined but never used.","line":34,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FontAwesome5' is defined but never used.","line":34,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDistanceToNow' is defined but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Ellipse' is defined but never used.","line":36,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MaskedView' is defined but never used.","line":37,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Reaction' is defined but never used.","line":39,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SCREEN_WIDTH' is assigned a value but never used.","line":51,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SCREEN_HEIGHT' is assigned a value but never used.","line":51,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":51},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":54,"column":25,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":251,"endColumn":3},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":270,"column":21,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":479,"endColumn":2},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'opacityAnim' and 'scaleAnim'. Either include them or remove the dependency array.","line":302,"column":8,"nodeType":"ArrayExpression","endLine":302,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [opacityAnim, scaleAnim]","fix":{"range":[9503,9505],"text":"[opacityAnim, scaleAnim]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'highlightAnim' and 'item.id'. Either include them or remove the dependency array.","line":320,"column":8,"nodeType":"ArrayExpression","endLine":320,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [highlightAnim, highlightedId, item.id]","fix":{"range":[9946,9961],"text":"[highlightAnim, highlightedId, item.id]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleReaction' is assigned a value but never used.","line":332,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":25},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":482,"column":25,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":517,"endColumn":3},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'pulseAnim'. Either include it or remove the dependency array.","line":500,"column":6,"nodeType":"ArrayExpression","endLine":500,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [pulseAnim]","fix":{"range":[16635,16637],"text":"[pulseAnim]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insets' is assigned a value but never used.","line":530,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":530,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setHighlightedId' is assigned a value but never used.","line":538,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":538,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showReactionPicker' is assigned a value but never used.","line":539,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowReactionPicker' is assigned a value but never used.","line":539,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showError' is assigned a value but never used.","line":541,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":541,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":546,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":546,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":547,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":547,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeReaction' is assigned a value but never used.","line":555,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":555,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editReply' is assigned a value but never used.","line":563,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":563,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'subscribeToReplies', 'subscribeToTypingIndicators', 'unsubscribeFromReplies', and 'unsubscribeFromTypingIndicators'. Either include them or remove the dependency array.","line":622,"column":8,"nodeType":"ArrayExpression","endLine":622,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [confessionId, loadRepliesStable, subscribeToReplies, subscribeToTypingIndicators, unsubscribeFromReplies, unsubscribeFromTypingIndicators]","fix":{"range":[20738,20771],"text":"[confessionId, loadRepliesStable, subscribeToReplies, subscribeToTypingIndicators, unsubscribeFromReplies, unsubscribeFromTypingIndicators]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'confessionId' and 'toggleReplyLike'. Either include them or remove the dependency array.","line":793,"column":7,"nodeType":"ArrayExpression","endLine":802,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleReply, handleReaction, handleLongPress, handleReport, highlightedId, expandedThreads, toggleThread, typingUsers, toggleReplyLike, confessionId]","fix":{"range":[25699,25891],"text":"[handleReply, handleReaction, handleLongPress, handleReport, highlightedId, expandedThreads, toggleThread, typingUsers, toggleReplyLike, confessionId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback, useRef, useMemo, memo } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  FlatList,\n  KeyboardAvoidingView,\n  Platform,\n  ActivityIndicator,\n  Alert,\n  Animated,\n  Dimensions,\n  ScrollView,\n  Pressable,\n  AccessibilityInfo,\n  Vibration,\n  LayoutAnimation,\n  UIManager,\n} from \"react-native\";\nimport { SafeAreaView, useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport {\n  BottomSheetModal,\n  BottomSheetModalProvider,\n  BottomSheetBackdrop,\n  BottomSheetTextInput,\n  BottomSheetFlatList,\n  BottomSheetScrollView,\n  BottomSheetView,\n} from \"@gorhom/bottom-sheet\";\nimport { BlurView } from \"expo-blur\";\nimport * as Haptics from \"expo-haptics\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { Ionicons, MaterialCommunityIcons, FontAwesome5 } from \"@expo/vector-icons\";\nimport { formatDistanceToNow, format } from \"date-fns\";\nimport Svg, { Circle, Rect, Path, Polygon, Ellipse, G } from \"react-native-svg\";\nimport MaskedView from \"@react-native-masked-view/masked-view\";\n\nimport { useReplyStore, type ReactionType, type Reaction } from \"../state/replyStore\";\nimport { VideoDataService } from \"../services/VideoDataService\";\nimport { PreferenceAwareHaptics } from \"../utils/haptics\";\nimport { InlineCharacterCounter } from \"./CharacterCounter\";\nimport { sanitizeText } from \"../utils/consolidatedUtils\";\nimport { useToastHelpers } from \"../contexts/ToastContext\";\n\n// Enable LayoutAnimation on Android\nif (Platform.OS === \"android\" && UIManager.setLayoutAnimationEnabledExperimental) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\n\n// Enhanced anonymous avatar generator with geometric patterns\nconst GeometricAvatar = memo(({ seed, size = 40 }: { seed: string; size?: number }) => {\n  const generatePattern = useCallback(\n    (seed: string) => {\n      const hash = seed.split(\"\").reduce((acc, char) => acc + char.charCodeAt(0), 0);\n      const colorIndex = hash % 10;\n      const patternIndex = hash % 8;\n      const shapeCount = (hash % 3) + 3;\n\n      const gradientColors = [\n        [\"#FF6B6B\", \"#4ECDC4\"],\n        [\"#667EEA\", \"#764BA2\"],\n        [\"#F093FB\", \"#F5576C\"],\n        [\"#4FACFE\", \"#00F2FE\"],\n        [\"#43E97B\", \"#38F9D7\"],\n        [\"#FA709A\", \"#FEE140\"],\n        [\"#30CFD0\", \"#330867\"],\n        [\"#A8EDEA\", \"#FED6E3\"],\n        [\"#FF9A9E\", \"#FECFEF\"],\n        [\"#FBC2EB\", \"#A6C1EE\"],\n      ] as const;\n\n      const colors = gradientColors[colorIndex];\n\n      const patterns = [\n        // Circles\n        () => (\n          <G>\n            {Array.from({ length: shapeCount }).map((_, i) => (\n              <Circle\n                key={i}\n                cx={size / 2 + Math.sin(i * 2.5) * (size / 4)}\n                cy={size / 2 + Math.cos(i * 2.5) * (size / 4)}\n                r={size / 6 - i * 2}\n                fill={colors[i % 2]}\n                opacity={0.8 - i * 0.1}\n              />\n            ))}\n          </G>\n        ),\n        // Rectangles\n        () => (\n          <G>\n            {Array.from({ length: shapeCount }).map((_, i) => (\n              <Rect\n                key={i}\n                x={size / 4 + i * 3}\n                y={size / 4 + i * 3}\n                width={size / 2 - i * 6}\n                height={size / 2 - i * 6}\n                fill={colors[i % 2]}\n                opacity={0.8 - i * 0.15}\n                transform={`rotate(${i * 15} ${size / 2} ${size / 2})`}\n              />\n            ))}\n          </G>\n        ),\n        // Triangles\n        () => (\n          <G>\n            {Array.from({ length: shapeCount }).map((_, i) => (\n              <Polygon\n                key={i}\n                points={`${size / 2},${size / 4 + i * 3} ${size / 4 + i * 3},${(3 * size) / 4 - i * 3} ${(3 * size) / 4 - i * 3},${(3 * size) / 4 - i * 3}`}\n                fill={colors[i % 2]}\n                opacity={0.8 - i * 0.15}\n              />\n            ))}\n          </G>\n        ),\n        // Hexagons\n        () => {\n          const hexPoints = (cx: number, cy: number, r: number) => {\n            return Array.from({ length: 6 })\n              .map((_, i) => {\n                const angle = (i * Math.PI) / 3;\n                const x = cx + r * Math.cos(angle);\n                const y = cy + r * Math.sin(angle);\n                return `${x},${y}`;\n              })\n              .join(\" \");\n          };\n          return (\n            <G>\n              {Array.from({ length: shapeCount }).map((_, i) => (\n                <Polygon\n                  key={i}\n                  points={hexPoints(size / 2, size / 2, size / 3 - i * 4)}\n                  fill={colors[i % 2]}\n                  opacity={0.8 - i * 0.15}\n                />\n              ))}\n            </G>\n          );\n        },\n        // Stars\n        () => {\n          const starPoints = (cx: number, cy: number, r: number) => {\n            const points = [];\n            for (let i = 0; i < 10; i++) {\n              const radius = i % 2 === 0 ? r : r / 2;\n              const angle = (i * Math.PI) / 5 - Math.PI / 2;\n              points.push(`${cx + radius * Math.cos(angle)},${cy + radius * Math.sin(angle)}`);\n            }\n            return points.join(\" \");\n          };\n          return (\n            <G>\n              {Array.from({ length: Math.min(shapeCount, 3) }).map((_, i) => (\n                <Polygon\n                  key={i}\n                  points={starPoints(size / 2, size / 2, size / 3 - i * 6)}\n                  fill={colors[i % 2]}\n                  opacity={0.8 - i * 0.2}\n                />\n              ))}\n            </G>\n          );\n        },\n        // Waves\n        () => (\n          <G>\n            {Array.from({ length: shapeCount }).map((_, i) => (\n              <Path\n                key={i}\n                d={`M 0,${size / 2 + i * 8} Q ${size / 4},${size / 4 + i * 8} ${size / 2},${size / 2 + i * 8} T ${size},${size / 2 + i * 8}`}\n                stroke={colors[i % 2]}\n                strokeWidth={3}\n                fill=\"none\"\n                opacity={0.8 - i * 0.15}\n              />\n            ))}\n          </G>\n        ),\n        // Dots Grid\n        () => (\n          <G>\n            {Array.from({ length: 16 }).map((_, i) => {\n              const row = Math.floor(i / 4);\n              const col = i % 4;\n              const dotSize = ((hash + i) % 3) + 2;\n              return (\n                <Circle\n                  key={i}\n                  cx={size / 5 + (col * size) / 5}\n                  cy={size / 5 + (row * size) / 5}\n                  r={dotSize}\n                  fill={colors[(row + col) % 2]}\n                  opacity={0.8 - (row + col) * 0.1}\n                />\n              );\n            })}\n          </G>\n        ),\n        // Spirals\n        () => {\n          const spiralPath = () => {\n            let path = `M ${size / 2},${size / 2}`;\n            for (let i = 0; i < 50; i++) {\n              const angle = i * 0.3;\n              const radius = i * 0.5;\n              const x = size / 2 + radius * Math.cos(angle);\n              const y = size / 2 + radius * Math.sin(angle);\n              path += ` L ${x},${y}`;\n            }\n            return path;\n          };\n          return (\n            <G>\n              <Path d={spiralPath()} stroke={colors[0]} strokeWidth={2} fill=\"none\" opacity={0.8} />\n              <Path\n                d={spiralPath()}\n                stroke={colors[1]}\n                strokeWidth={2}\n                fill=\"none\"\n                opacity={0.5}\n                transform={`rotate(120 ${size / 2} ${size / 2})`}\n              />\n            </G>\n          );\n        },\n      ];\n\n      return { colors, pattern: patterns[patternIndex] };\n    },\n    [size],\n  );\n\n  const { colors, pattern } = useMemo(() => generatePattern(seed), [seed, generatePattern]);\n\n  return (\n    <View className=\"rounded-full overflow-hidden\" style={{ width: size, height: size }}>\n      <LinearGradient colors={colors} className=\"absolute w-full h-full\" start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} />\n      <Svg width={size} height={size} className=\"absolute\">\n        {pattern()}\n      </Svg>\n    </View>\n  );\n});\n\n// Reaction types are now imported from replyStore\n\n// Enhanced comment item with threading support\ninterface CommentItemProps {\n  item: any;\n  level?: number;\n  onReply: (item: any) => void;\n  onReact: (item: any, type: ReactionType) => void;\n  onToggleLike: (item: any) => void;\n  onLongPress: (item: any) => void;\n  onReport: (item: any) => void;\n  highlightedId?: string;\n  expandedThreads: Set<string>;\n  onToggleThread: (id: string, item: any) => void;\n  typingUsers: Map<string, boolean>;\n}\n\nconst CommentItem = memo(\n  ({\n    item,\n    level = 0,\n    onReply,\n    onReact,\n    onToggleLike,\n    onLongPress,\n    onReport,\n    highlightedId,\n    expandedThreads,\n    onToggleThread,\n    typingUsers,\n  }: CommentItemProps) => {\n    const scaleAnim = useRef(new Animated.Value(0)).current;\n    const opacityAnim = useRef(new Animated.Value(0)).current;\n    const highlightAnim = useRef(new Animated.Value(0)).current;\n\n    useEffect(() => {\n      Animated.parallel([\n        Animated.spring(scaleAnim, {\n          toValue: 1,\n          tension: 50,\n          friction: 7,\n          useNativeDriver: true,\n        }),\n        Animated.timing(opacityAnim, {\n          toValue: 1,\n          duration: 300,\n          useNativeDriver: true,\n        }),\n      ]).start();\n    }, []);\n\n    useEffect(() => {\n      if (highlightedId === item.id) {\n        Animated.sequence([\n          Animated.timing(highlightAnim, {\n            toValue: 1,\n            duration: 300,\n            useNativeDriver: false,\n          }),\n          Animated.timing(highlightAnim, {\n            toValue: 0,\n            duration: 300,\n            delay: 1000,\n            useNativeDriver: false,\n          }),\n        ]).start();\n      }\n    }, [highlightedId]);\n\n    const handlePress = useCallback(() => {\n      PreferenceAwareHaptics.impactAsync();\n      onReply(item);\n    }, [item, onReply]);\n\n    const handleLongPress = useCallback(() => {\n      PreferenceAwareHaptics.impactAsync();\n      onLongPress(item);\n    }, [item, onLongPress]);\n\n    const handleReaction = useCallback(\n      (type: ReactionType) => {\n        PreferenceAwareHaptics.impactAsync();\n        onReact(item, type);\n      },\n      [item, onReact],\n    );\n\n    const handleToggleLike = useCallback(() => {\n      PreferenceAwareHaptics.impactAsync();\n      onToggleLike(item);\n    }, [item, onToggleLike]);\n\n    const hasReplies = item.replies && item.replies.length > 0;\n    const isExpanded = expandedThreads.has(item.id);\n    const isTyping = typingUsers.get(item.id);\n\n    const highlightColor = highlightAnim.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"transparent\", \"rgba(147, 51, 234, 0.1)\"],\n    });\n\n    return (\n      <Animated.View\n        style={{\n          transform: [{ scale: scaleAnim }],\n          opacity: opacityAnim,\n        }}\n      >\n        <Pressable\n          onPress={handlePress}\n          onLongPress={handleLongPress}\n          delayLongPress={500}\n          accessible={true}\n          accessibilityRole=\"button\"\n          accessibilityLabel={`Comment by Anonymous user`}\n        >\n          <Animated.View\n            className={`flex-row p-3 mx-2 my-1 rounded-xl ${level > 0 ? \"ml-6\" : \"\"}`}\n            style={{\n              backgroundColor: highlightColor,\n            }}\n          >\n            {level > 0 && <View className=\"absolute -left-3 top-0 bottom-0 w-0.5 bg-purple-500/20 rounded-full\" />}\n\n            <GeometricAvatar seed={item.userId || item.id} size={36} />\n\n            <View className=\"flex-1 ml-3\">\n              <View className=\"flex-row items-center mb-1\">\n                <Text className=\"text-purple-500 font-semibold text-xs\">\n                  Anonymous {item.userId?.slice(-4) || \"User\"}\n                </Text>\n                <Text className=\"text-gray-500 text-xs ml-2\">\n                  {item.timestamp ? format(new Date(item.timestamp), \"MMM d, h:mm a\") : \"just now\"}\n                </Text>\n                {item.edited_at && <Text className=\"text-gray-500 text-xs ml-1 italic\">(edited)</Text>}\n              </View>\n\n              <Text className=\"text-white text-sm leading-5\">{sanitizeText(item.content)}</Text>\n\n              {item.reactionCounts && Object.keys(item.reactionCounts).length > 0 && (\n                <View className=\"flex-row mt-2 gap-1\">\n                  {Object.entries(item.reactionCounts || {})\n                    .filter(([_, count]: [string, any]) => count > 0)\n                    .map(([type, count]: [string, any]) => (\n                      <View key={type} className=\"flex-row items-center bg-purple-500/10 px-2 py-1 rounded-full\">\n                        <Text className=\"text-xs mr-1\">\n                          {type === \"heart\"\n                            ? \"❤️\"\n                            : type === \"laugh\"\n                              ? \"😂\"\n                              : type === \"sad\"\n                                ? \"😢\"\n                                : type === \"angry\"\n                                  ? \"😠\"\n                                  : type === \"wow\"\n                                    ? \"😮\"\n                                    : \"👍\"}\n                        </Text>\n                        <Text className=\"text-purple-500 text-xs\">{String(count)}</Text>\n                      </View>\n                    ))}\n                </View>\n              )}\n\n              <View className=\"flex-row mt-2 gap-3\">\n                <TouchableOpacity onPress={handleToggleLike} className=\"flex-row items-center\">\n                  <Ionicons\n                    name={item.isLiked ? \"heart\" : \"heart-outline\"}\n                    size={16}\n                    color={item.isLiked ? \"#FF3040\" : \"#94A3B8\"}\n                  />\n                  <Text className=\"text-gray-400 text-xs ml-1\">{item.likes || 0}</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity onPress={() => onReply(item)} className=\"flex-row items-center\">\n                  <Ionicons name=\"chatbubble-outline\" size={16} color=\"#94A3B8\" />\n                  <Text className=\"text-gray-400 text-xs ml-1\">Reply</Text>\n                </TouchableOpacity>\n\n                {hasReplies && (\n                  <TouchableOpacity onPress={() => onToggleThread(item.id, item)} className=\"flex-row items-center\">\n                    <Ionicons name={isExpanded ? \"chevron-up\" : \"chevron-down\"} size={16} color=\"#9333EA\" />\n                    <Text className=\"text-purple-500 text-xs ml-1\">\n                      {item.replies.length} {item.replies.length === 1 ? \"reply\" : \"replies\"}\n                    </Text>\n                  </TouchableOpacity>\n                )}\n\n                <TouchableOpacity onPress={() => onReport(item)} className=\"ml-auto\">\n                  <Ionicons name=\"flag-outline\" size={16} color=\"#EF4444\" />\n                </TouchableOpacity>\n              </View>\n\n              {isTyping && (\n                <View className=\"flex-row items-center mt-2\">\n                  <ActivityIndicator size=\"small\" color=\"#9333EA\" />\n                  <Text className=\"text-gray-500 text-xs ml-2\">Someone is typing...</Text>\n                </View>\n              )}\n            </View>\n          </Animated.View>\n        </Pressable>\n\n        {hasReplies && isExpanded && (\n          <View>\n            {item.replies.map((reply: any) => (\n              <CommentItem\n                key={reply.id}\n                item={reply}\n                level={level + 1}\n                onReply={onReply}\n                onReact={onReact}\n                onToggleLike={onToggleLike}\n                onLongPress={onLongPress}\n                onReport={onReport}\n                highlightedId={highlightedId}\n                expandedThreads={expandedThreads}\n                onToggleThread={onToggleThread}\n                typingUsers={typingUsers}\n              />\n            ))}\n          </View>\n        )}\n      </Animated.View>\n    );\n  },\n);\n\n// Loading skeleton component\nconst CommentSkeleton = memo(() => {\n  const pulseAnim = useRef(new Animated.Value(0.3)).current;\n\n  useEffect(() => {\n    Animated.loop(\n      Animated.sequence([\n        Animated.timing(pulseAnim, {\n          toValue: 1,\n          duration: 1000,\n          useNativeDriver: true,\n        }),\n        Animated.timing(pulseAnim, {\n          toValue: 0.3,\n          duration: 1000,\n          useNativeDriver: true,\n        }),\n      ]),\n    ).start();\n  }, []);\n\n  return (\n    <Animated.View\n      className=\"flex-row p-3 mx-2 my-1\"\n      style={{\n        opacity: pulseAnim,\n      }}\n    >\n      <View className=\"w-9 h-9 rounded-full bg-gray-700\" />\n      <View className=\"flex-1 ml-3\">\n        <View className=\"w-24 h-3 bg-gray-700 rounded mb-2\" />\n        <View className=\"w-4/5 h-4 bg-gray-700 rounded mb-1\" />\n        <View className=\"w-3/5 h-4 bg-gray-700 rounded\" />\n      </View>\n    </Animated.View>\n  );\n});\n\n// Main EnhancedCommentBottomSheet component\ninterface EnhancedCommentBottomSheetProps {\n  bottomSheetModalRef: React.RefObject<BottomSheetModal | null>;\n  confessionId: string;\n}\n\nconst EnhancedCommentBottomSheet = React.memo(\n  function EnhancedCommentBottomSheet(props: EnhancedCommentBottomSheetProps) {\n    const { bottomSheetModalRef, confessionId } = props ?? ({} as any);\n    const inputRef = useRef<any>(null);\n    const flatListRef = useRef<any>(null);\n    const insets = useSafeAreaInsets();\n\n    const [comment, setComment] = useState(\"\");\n    const [replyingTo, setReplyingTo] = useState<any>(null);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [isSearching, setIsSearching] = useState(false);\n    const [selectedFilter, setSelectedFilter] = useState<\"all\" | \"recent\" | \"popular\">(\"recent\");\n    const [expandedThreads, setExpandedThreads] = useState<Set<string>>(new Set());\n    const [highlightedId, setHighlightedId] = useState<string | undefined>();\n    const [showReactionPicker, setShowReactionPicker] = useState<string | null>(null);\n\n    const { showSuccess, showError } = useToastHelpers();\n\n    const {\n      replies: allReplies,\n      pagination: allPagination,\n      loading,\n      error,\n      loadReplies,\n      loadMoreReplies,\n      addReply,\n      toggleReplyLike,\n      startTyping,\n      stopTyping,\n      addReaction,\n      removeReaction,\n      reportComment,\n      searchComments,\n      clearSearch,\n      subscribeToReplies,\n      unsubscribeFromReplies,\n      subscribeToTypingIndicators,\n      unsubscribeFromTypingIndicators,\n      editReply,\n      deleteReply,\n      loadThreadReplies,\n    } = useReplyStore();\n\n    // Access additional state from store\n    const allSearchResults = useReplyStore((state) => state.searchResults);\n    const allTypingUsers = useReplyStore((state) => state.typingUsers);\n\n    // Derive data from store state\n    const replies = useMemo(() => allReplies[confessionId] ?? [], [allReplies, confessionId]);\n    const searchResults = useMemo(() => allSearchResults[confessionId] ?? [], [allSearchResults, confessionId]);\n    const page = useMemo(() => allPagination[confessionId], [allPagination, confessionId]);\n    const hasMore = page?.hasMore ?? false;\n    const totalCount = page?.totalCount ?? replies.length;\n\n    // Derive typing users map\n    const typingUsersArr = useMemo(() => allTypingUsers[confessionId] || [], [allTypingUsers, confessionId]);\n    const typingUsers = useMemo(\n      () => new Map(typingUsersArr.map((t) => [t.replyId || \"root\", true])),\n      [typingUsersArr],\n    );\n\n    // Determine which data to display\n    const listData = isSearching && searchQuery.trim() ? searchResults : replies;\n\n    const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n    const initialLoadIdRef = useRef<string | null>(null);\n    const loadRepliesStable = useCallback(\n      async (id: string) => {\n        try {\n          await loadReplies(id);\n        } catch {\n          // Silently handle errors\n        }\n      },\n      [loadReplies],\n    );\n\n    useEffect(() => {\n      if (!confessionId) return;\n      if (initialLoadIdRef.current === confessionId) return;\n\n      initialLoadIdRef.current = confessionId;\n      loadRepliesStable(confessionId);\n      subscribeToReplies(confessionId);\n      subscribeToTypingIndicators(confessionId);\n\n      // Track comment sheet open\n      VideoDataService.trackVideoEvent(\"comment_sheet_opened\", {\n        confession_id: confessionId,\n        timestamp: Date.now(),\n      });\n\n      return () => {\n        unsubscribeFromReplies();\n        unsubscribeFromTypingIndicators();\n      };\n    }, [confessionId, loadRepliesStable]); // Only depend on confessionId and the memoized loadRepliesStable\n\n    const handleSendComment = useCallback(async () => {\n      if (!comment.trim()) return;\n\n      PreferenceAwareHaptics.impactAsync();\n\n      const parentId = replyingTo?.id || null;\n      await addReply(confessionId, comment.trim(), true, parentId);\n\n      // Track comment submission\n      VideoDataService.trackVideoEvent(\"comment_submitted\", {\n        confession_id: confessionId,\n        parent_id: parentId,\n        comment_length: comment.length,\n        has_parent: !!parentId,\n        timestamp: Date.now(),\n      });\n\n      setComment(\"\");\n      setReplyingTo(null);\n      showSuccess(\"Comment added successfully!\");\n\n      // Scroll to the new comment\n      setTimeout(() => {\n        flatListRef.current?.scrollToOffset({ offset: 0, animated: true });\n      }, 300);\n    }, [comment, confessionId, replyingTo, addReply, showSuccess]);\n\n    const handleReply = useCallback(\n      (item: any) => {\n        setReplyingTo(item);\n        inputRef.current?.focus();\n\n        // Track reply action\n        VideoDataService.trackVideoEvent(\"comment_reply_initiated\", {\n          confession_id: confessionId,\n          parent_comment_id: item.id,\n          timestamp: Date.now(),\n        });\n      },\n      [confessionId],\n    );\n\n    const handleReaction = useCallback(\n      async (item: any, type: ReactionType) => {\n        await addReaction(item.id, type);\n\n        // Track reaction\n        VideoDataService.trackVideoEvent(\"comment_reaction_added\", {\n          confession_id: confessionId,\n          comment_id: item.id,\n          reaction_type: type,\n          timestamp: Date.now(),\n        });\n      },\n      [confessionId, addReaction],\n    );\n\n    const handleLongPress = useCallback(\n      (item: any) => {\n        Alert.alert(\"Comment Options\", \"\", [\n          {\n            text: \"Copy\",\n            onPress: () => {\n              PreferenceAwareHaptics.notificationAsync();\n            },\n          },\n          {\n            text: \"Edit\",\n            onPress: () => {\n              // Handle edit\n            },\n          },\n          {\n            text: \"Delete\",\n            style: \"destructive\",\n            onPress: () => {\n              Alert.alert(\"Delete Comment\", \"Are you sure you want to delete this comment?\", [\n                { text: \"Cancel\", style: \"cancel\" },\n                {\n                  text: \"Delete\",\n                  style: \"destructive\",\n                  onPress: () => deleteReply(item.id),\n                },\n              ]);\n            },\n          },\n          { text: \"Cancel\", style: \"cancel\" },\n        ]);\n      },\n      [deleteReply],\n    );\n\n    const handleReport = useCallback(\n      (item: any) => {\n        Alert.alert(\"Report Comment\", \"Why are you reporting this comment?\", [\n          {\n            text: \"Spam\",\n            onPress: () => reportComment(item.id, \"spam\"),\n          },\n          {\n            text: \"Inappropriate\",\n            onPress: () => reportComment(item.id, \"inappropriate\"),\n          },\n          {\n            text: \"Harassment\",\n            onPress: () => reportComment(item.id, \"harassment\"),\n          },\n          { text: \"Cancel\", style: \"cancel\" },\n        ]);\n      },\n      [reportComment],\n    );\n\n    const toggleThread = useCallback(\n      async (id: string, item: any) => {\n        const isExpanding = !expandedThreads.has(id);\n\n        // If expanding and has replies but not loaded, load them first\n        if (isExpanding && item.replyCount > 0 && !item.replies?.length) {\n          await loadThreadReplies(id);\n        }\n\n        setExpandedThreads((prev) => {\n          const newSet = new Set(prev);\n          if (newSet.has(id)) {\n            newSet.delete(id);\n          } else {\n            newSet.add(id);\n          }\n          return newSet;\n        });\n      },\n      [expandedThreads, loadThreadReplies],\n    );\n\n    const handleSearch = useCallback(\n      (query: string) => {\n        setSearchQuery(query);\n        if (query.trim()) {\n          searchComments(confessionId, query);\n        } else {\n          clearSearch();\n        }\n      },\n      [confessionId, searchComments, clearSearch],\n    );\n\n    const renderBackdrop = useCallback(\n      (props: any) => (\n        <BottomSheetBackdrop {...props} disappearsOnIndex={-1} appearsOnIndex={0} opacity={0.5} pressBehavior=\"close\" />\n      ),\n      [],\n    );\n\n    const renderComment = useCallback(\n      ({ item }: { item: any }) => (\n        <CommentItem\n          item={item}\n          onReply={handleReply}\n          onReact={handleReaction}\n          onToggleLike={(item) => toggleReplyLike(item.id, confessionId)}\n          onLongPress={handleLongPress}\n          onReport={handleReport}\n          highlightedId={highlightedId}\n          expandedThreads={expandedThreads}\n          onToggleThread={toggleThread}\n          typingUsers={typingUsers}\n        />\n      ),\n      [\n        handleReply,\n        handleReaction,\n        handleLongPress,\n        handleReport,\n        highlightedId,\n        expandedThreads,\n        toggleThread,\n        typingUsers,\n      ],\n    );\n\n    const ListHeaderComponent = useCallback(\n      () => (\n        <View className=\"p-4\">\n          <View className=\"flex-row items-center justify-between mb-3\">\n            <View className=\"flex-row items-center\">\n              <Text className=\"text-white text-lg font-bold\">{totalCount} Comments</Text>\n              <View className=\"ml-2 bg-purple-500 px-2 py-0.5 rounded-full\">\n                <Text className=\"text-white text-xs font-semibold\">{totalCount}</Text>\n              </View>\n            </View>\n            <Pressable onPress={() => bottomSheetModalRef.current?.dismiss()}>\n              <Ionicons name=\"close\" size={24} color=\"#8B98A5\" />\n            </Pressable>\n          </View>\n\n          <View className=\"flex-row gap-2 mb-3\">\n            {([\"recent\", \"popular\", \"all\"] as const).map((filter) => (\n              <TouchableOpacity\n                key={filter}\n                onPress={() => setSelectedFilter(filter)}\n                className={`px-3 py-1.5 rounded-full ${selectedFilter === filter ? \"bg-purple-500\" : \"bg-gray-800\"}`}\n              >\n                <Text className={`text-xs font-semibold ${selectedFilter === filter ? \"text-white\" : \"text-gray-400\"}`}>\n                  {filter.charAt(0).toUpperCase() + filter.slice(1)}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n\n          {isSearching && (\n            <View className=\"flex-row items-center bg-gray-800 rounded-xl px-3 mb-3\">\n              <Ionicons name=\"search\" size={18} color=\"#94A3B8\" />\n              <TextInput\n                className=\"flex-1 py-2 px-2 text-sm text-white\"\n                placeholder=\"Search comments...\"\n                placeholderTextColor=\"#94A3B8\"\n                value={searchQuery}\n                onChangeText={handleSearch}\n                autoCorrect={false}\n              />\n              {searchQuery.length > 0 && (\n                <TouchableOpacity\n                  onPress={() => {\n                    setSearchQuery(\"\");\n                    clearSearch();\n                  }}\n                >\n                  <Ionicons name=\"close-circle\" size={18} color=\"#94A3B8\" />\n                </TouchableOpacity>\n              )}\n            </View>\n          )}\n        </View>\n      ),\n      [totalCount, selectedFilter, isSearching, searchQuery, handleSearch, clearSearch, bottomSheetModalRef],\n    );\n\n    const ListEmptyComponent = useCallback(() => {\n      if (page?.isLoading) {\n        return (\n          <View>\n            {Array.from({ length: 5 }).map((_, i) => (\n              <CommentSkeleton key={i} />\n            ))}\n          </View>\n        );\n      }\n\n      return (\n        <View className=\"p-8 items-center\">\n          <Ionicons name=\"chatbubble-outline\" size={48} color=\"#CBD5E1\" />\n          <Text className=\"text-gray-400 text-base mt-3 text-center\">\n            {searchQuery ? \"No comments found\" : \"No comments yet\"}\n          </Text>\n          <Text className=\"text-gray-500 text-sm mt-1 text-center\">\n            {searchQuery ? \"Try a different search\" : \"Be the first to comment!\"}\n          </Text>\n        </View>\n      );\n    }, [page?.isLoading, searchQuery]);\n\n    const ListFooterComponent = useCallback(() => {\n      if (!hasMore) return null;\n\n      return (\n        <View className=\"p-4 items-center\">\n          <ActivityIndicator size=\"small\" color=\"#9333EA\" />\n        </View>\n      );\n    }, [hasMore]);\n\n    // Handle empty confessionId case after all hooks are called\n    if (!confessionId || confessionId === \"\") {\n      return (\n        <BottomSheetModal\n          ref={bottomSheetModalRef}\n          index={1}\n          snapPoints={snapPoints}\n          backgroundStyle={{ backgroundColor: \"#1A1A1A\" }}\n          handleIndicatorStyle={{ backgroundColor: \"#666\" }}\n        >\n          <BottomSheetView style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text style={{ color: \"#6B7280\", fontSize: 16 }}>No confession selected</Text>\n          </BottomSheetView>\n        </BottomSheetModal>\n      );\n    }\n\n    return (\n      <BottomSheetModal\n        ref={bottomSheetModalRef}\n        index={1}\n        snapPoints={snapPoints}\n        backdropComponent={renderBackdrop}\n        backgroundStyle={{ backgroundColor: \"#1A1A1A\" }}\n        handleIndicatorStyle={{ backgroundColor: \"#666\" }}\n        keyboardBehavior=\"interactive\"\n        keyboardBlurBehavior=\"restore\"\n        android_keyboardInputMode=\"adjustResize\"\n      >\n        <BottomSheetView style={{ flex: 1 }}>\n          <BottomSheetFlatList\n            ref={flatListRef}\n            data={listData}\n            renderItem={renderComment}\n            keyExtractor={(item: any) => item.id}\n            ListHeaderComponent={ListHeaderComponent}\n            ListEmptyComponent={ListEmptyComponent}\n            ListFooterComponent={ListFooterComponent}\n            onEndReached={() => {\n              if (hasMore && !page?.isLoadingMore) {\n                loadMoreReplies(confessionId);\n              }\n            }}\n            onEndReachedThreshold={0.5}\n            contentContainerStyle={{ paddingBottom: 100 }}\n            showsVerticalScrollIndicator={false}\n          />\n\n          <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"} keyboardVerticalOffset={0}>\n            <BlurView intensity={95} className=\"absolute bottom-0 left-0 right-0\">\n              <SafeAreaView edges={[\"bottom\"]}>\n                {replyingTo && (\n                  <View className=\"flex-row items-center px-4 py-2 bg-purple-500/10 border-t border-purple-500/20\">\n                    <Text className=\"flex-1 text-purple-500 text-xs\">\n                      Replying to {replyingTo.userId?.slice(-4) || \"Anonymous\"}\n                    </Text>\n                    <TouchableOpacity onPress={() => setReplyingTo(null)}>\n                      <Ionicons name=\"close\" size={18} color=\"#9333EA\" />\n                    </TouchableOpacity>\n                  </View>\n                )}\n\n                <View className=\"flex-row items-end px-4 py-3 border-t border-gray-800 bg-gray-900/95\">\n                  <View className=\"flex-1 flex-row items-end bg-gray-800 rounded-2xl border border-gray-700 px-4 py-2 min-h-[40px] max-h-[120px]\">\n                    <BottomSheetTextInput\n                      ref={inputRef}\n                      className=\"flex-1 text-white text-sm max-h-[100px]\"\n                      placeholder={replyingTo ? \"Write a reply...\" : \"Add a comment...\"}\n                      placeholderTextColor=\"#94A3B8\"\n                      value={comment}\n                      onChangeText={(text) => {\n                        setComment(text);\n                        if (text.length > 0) {\n                          startTyping(confessionId, replyingTo?.id);\n                        } else {\n                          stopTyping(confessionId, replyingTo?.id);\n                        }\n                      }}\n                      onBlur={() => stopTyping(confessionId, replyingTo?.id)}\n                      multiline\n                      maxLength={500}\n                      autoCorrect\n                      autoCapitalize=\"sentences\"\n                    />\n\n                    <TouchableOpacity onPress={() => setIsSearching(!isSearching)} className=\"ml-2\">\n                      <Ionicons name=\"search\" size={20} color=\"#94A3B8\" />\n                    </TouchableOpacity>\n                  </View>\n\n                  <TouchableOpacity\n                    onPress={handleSendComment}\n                    disabled={!comment.trim()}\n                    className={`ml-2 w-9 h-9 rounded-full items-center justify-center ${\n                      comment.trim() ? \"bg-purple-500\" : \"bg-gray-700\"\n                    }`}\n                  >\n                    <Ionicons name=\"send\" size={18} color={comment.trim() ? \"white\" : \"#94A3B8\"} />\n                  </TouchableOpacity>\n                </View>\n\n                {comment.length > 400 && (\n                  <View className=\"px-4 pb-1\">\n                    <InlineCharacterCounter currentLength={comment.length} maxLength={500} className=\"text-xs\" />\n                  </View>\n                )}\n              </SafeAreaView>\n            </BlurView>\n          </KeyboardAvoidingView>\n        </BottomSheetView>\n      </BottomSheetModal>\n    );\n  },\n  (prevProps, nextProps) => {\n    return prevProps.confessionId === nextProps.confessionId;\n  },\n);\n\nexport default EnhancedCommentBottomSheet;\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/EnhancedInput.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'focusAnimation'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [focusAnimation, isFocused]","fix":{"range":[1528,1539],"text":"[focusAnimation, isFocused]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'errorAnimation'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [error, errorAnimation, touched]","fix":{"range":[1658,1674],"text":"[error, errorAnimation, touched]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { View, Text, TextInput, Pressable, TextInputProps } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  interpolateColor,\n  interpolate,\n} from \"react-native-reanimated\";\n\ninterface EnhancedInputProps extends Omit<TextInputProps, \"onChangeText\" | \"onBlur\"> {\n  label?: string;\n  error?: string | null;\n  isValid?: boolean;\n  touched?: boolean;\n  required?: boolean;\n  maxLength?: number;\n  showCharacterCount?: boolean;\n  leftIcon?: keyof typeof Ionicons.glyphMap;\n  rightIcon?: keyof typeof Ionicons.glyphMap;\n  onRightIconPress?: () => void;\n  onChangeText?: (text: string) => void;\n  onBlur?: () => void;\n  helperText?: string;\n  variant?: \"default\" | \"outlined\" | \"filled\";\n  size?: \"small\" | \"medium\" | \"large\";\n}\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport const EnhancedInput: React.FC<EnhancedInputProps> = ({\n  label,\n  error,\n  isValid = true,\n  touched = false,\n  required = false,\n  maxLength,\n  showCharacterCount = true,\n  leftIcon,\n  rightIcon,\n  onRightIconPress,\n  onChangeText,\n  onBlur,\n  helperText,\n  variant = \"default\",\n  size = \"medium\",\n  value = \"\",\n  ...textInputProps\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const focusAnimation = useSharedValue(0);\n  const errorAnimation = useSharedValue(0);\n\n  React.useEffect(() => {\n    focusAnimation.value = withTiming(isFocused ? 1 : 0, { duration: 200 });\n  }, [isFocused]);\n\n  React.useEffect(() => {\n    errorAnimation.value = withTiming(error && touched ? 1 : 0, { duration: 200 });\n  }, [error, touched]);\n\n  const handleFocus = () => {\n    setIsFocused(true);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur?.();\n  };\n\n  const handleChangeText = (text: string) => {\n    if (maxLength && text.length > maxLength) {\n      return; // Prevent input beyond max length\n    }\n    onChangeText?.(text);\n  };\n\n  // Animated styles\n  const containerStyle = useAnimatedStyle(() => {\n    const borderColor = interpolateColor(\n      errorAnimation.value,\n      [0, 1],\n      [interpolateColor(focusAnimation.value, [0, 1], [\"#374151\", \"#3B82F6\"]), \"#EF4444\"],\n    );\n\n    return {\n      borderColor,\n      borderWidth: interpolate(focusAnimation.value, [0, 1], [1, 2]),\n    };\n  });\n\n  const labelStyle = useAnimatedStyle(() => {\n    const color = interpolateColor(\n      errorAnimation.value,\n      [0, 1],\n      [interpolateColor(focusAnimation.value, [0, 1], [\"#9CA3AF\", \"#3B82F6\"]), \"#EF4444\"],\n    );\n\n    return { color };\n  });\n\n  // Get size-specific styles\n  const getSizeStyles = () => {\n    switch (size) {\n      case \"small\":\n        return {\n          container: \"py-2 px-3\",\n          text: \"text-14\",\n          icon: 16,\n        };\n      case \"large\":\n        return {\n          container: \"py-4 px-4\",\n          text: \"text-18\",\n          icon: 24,\n        };\n      default:\n        return {\n          container: \"py-3 px-4\",\n          text: \"text-16\",\n          icon: 20,\n        };\n    }\n  };\n\n  const sizeStyles = getSizeStyles();\n  const textValue = typeof value === \"string\" ? value : String(value ?? \"\");\n  const characterCount = textValue.length;\n  const isNearLimit = maxLength && characterCount > maxLength * 0.8;\n  const isAtLimit = maxLength && characterCount >= maxLength;\n\n  return (\n    <View className=\"mb-4\">\n      {/* Label */}\n      {label && (\n        <Animated.Text style={labelStyle} className={`font-medium mb-2 ${sizeStyles.text}`}>\n          {label}\n          {required && <Text className=\"text-red-400 ml-1\">*</Text>}\n        </Animated.Text>\n      )}\n\n      {/* Input Container */}\n      <Animated.View\n        style={[containerStyle]}\n        className={`\n          bg-gray-900 rounded-lg flex-row items-center\n          ${sizeStyles.container}\n          ${variant === \"outlined\" ? \"bg-transparent border\" : \"\"}\n          ${variant === \"filled\" ? \"bg-gray-800\" : \"\"}\n        `}\n      >\n        {/* Left Icon */}\n        {leftIcon && <Ionicons name={leftIcon} size={sizeStyles.icon} color=\"#9CA3AF\" style={{ marginRight: 12 }} />}\n\n        {/* Text Input */}\n        <AnimatedTextInput\n          {...textInputProps}\n          value={value}\n          onChangeText={handleChangeText}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          maxLength={maxLength}\n          className={`flex-1 text-white ${sizeStyles.text}`}\n          placeholderTextColor=\"#6B7280\"\n          selectionColor=\"#3B82F6\"\n          accessibilityLabel={label}\n          accessibilityHint={helperText}\n        />\n\n        {/* Right Icon */}\n        {rightIcon && (\n          <Pressable\n            onPress={onRightIconPress}\n            className=\"ml-3\"\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"Input action\"\n          >\n            <Ionicons name={rightIcon} size={sizeStyles.icon} color=\"#9CA3AF\" />\n          </Pressable>\n        )}\n      </Animated.View>\n\n      {/* Bottom Row: Error/Helper Text and Character Count */}\n      <View className=\"flex-row justify-between items-center mt-1\">\n        <View className=\"flex-1\">\n          {/* Error Message */}\n          {error && touched && (\n            <Animated.View entering={undefined} exiting={undefined} className=\"flex-row items-center\">\n              <Ionicons name=\"alert-circle\" size={14} color=\"#EF4444\" />\n              <Text className=\"text-red-400 text-12 ml-1 flex-1\">{error}</Text>\n            </Animated.View>\n          )}\n\n          {/* Helper Text */}\n          {!error && helperText && <Text className=\"text-gray-500 text-12\">{helperText}</Text>}\n\n          {/* Success Indicator */}\n          {!error && touched && isValid && textValue.length > 0 && (\n            <View className=\"flex-row items-center\">\n              <Ionicons name=\"checkmark-circle\" size={14} color=\"#10B981\" />\n              <Text className=\"text-green-400 text-12 ml-1\">Looks good!</Text>\n            </View>\n          )}\n        </View>\n\n        {/* Character Count */}\n        {showCharacterCount && maxLength && (\n          <Text\n            className={`text-12 ml-2 ${isAtLimit ? \"text-red-400\" : isNearLimit ? \"text-yellow-400\" : \"text-gray-500\"}`}\n          >\n            {characterCount}/{maxLength}\n          </Text>\n        )}\n      </View>\n    </View>\n  );\n};\n\n// Preset input components for common use cases\nexport const EmailInput: React.FC<Omit<EnhancedInputProps, \"leftIcon\" | \"keyboardType\" | \"autoCapitalize\">> = (\n  props,\n) => (\n  <EnhancedInput\n    {...props}\n    leftIcon=\"mail-outline\"\n    keyboardType=\"email-address\"\n    autoCapitalize=\"none\"\n    autoCorrect={false}\n  />\n);\n\nexport const PasswordInput: React.FC<Omit<EnhancedInputProps, \"leftIcon\" | \"rightIcon\" | \"secureTextEntry\">> = (\n  props,\n) => {\n  const [isSecure, setIsSecure] = useState(true);\n\n  return (\n    <EnhancedInput\n      {...props}\n      leftIcon=\"lock-closed-outline\"\n      rightIcon={isSecure ? \"eye-outline\" : \"eye-off-outline\"}\n      onRightIconPress={() => setIsSecure(!isSecure)}\n      secureTextEntry={isSecure}\n      autoCapitalize=\"none\"\n      autoCorrect={false}\n    />\n  );\n};\n\nexport const SearchInput: React.FC<Omit<EnhancedInputProps, \"leftIcon\" | \"variant\">> = (props) => (\n  <EnhancedInput {...props} leftIcon=\"search-outline\" variant=\"filled\" placeholder=\"Search...\" />\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/EnhancedProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":2,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'displayUser?.id'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [displayUser?.id, isOwnProfile, userId, user?.id, loadUserConfessions]","fix":{"range":[3695,3748],"text":"[displayUser?.id, isOwnProfile, userId, user?.id, loadUserConfessions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { View, Text, StyleSheet, Pressable, ScrollView, Image, Dimensions, RefreshControl, Alert } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport type { NavigationProp } from \"@react-navigation/native\";\nimport type { RootStackParamList } from \"../navigation/AppNavigator\";\nimport { useAuthStore } from \"../state/authStore\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { useMembershipStore } from \"../state/membershipStore\";\nimport { usePreferenceAwareHaptics } from \"../utils/haptics\";\nimport * as Haptics from \"expo-haptics\";\nimport { supabase } from \"../lib/supabase\";\n\nconst { width: SCREEN_WIDTH } = Dimensions.get(\"window\");\n\ninterface ProfileStats {\n  confessions: number;\n  likes: number;\n  views: number;\n  followers: number;\n  following: number;\n}\n\ninterface EnhancedProfileScreenProps {\n  userId?: string; // If provided, shows another user's profile\n}\n\nexport const EnhancedProfileScreen: React.FC<EnhancedProfileScreenProps> = ({ userId }) => {\n  const navigation = useNavigation<NavigationProp<RootStackParamList>>();\n  const { user, signOut } = useAuthStore();\n  const { userConfessions, loadUserConfessions } = useConfessionStore();\n  const { membershipTier } = useMembershipStore();\n  const { hapticsEnabled, impactAsync } = usePreferenceAwareHaptics();\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [stats, setStats] = useState<ProfileStats>({\n    confessions: 0,\n    likes: 0,\n    views: 0,\n    followers: 0,\n    following: 0,\n  });\n  const [activeTab, setActiveTab] = useState<\"confessions\" | \"liked\" | \"saved\">(\"confessions\");\n  const [profileData, setProfileData] = useState<any>(null);\n\n  // Add isMounted flag to prevent state updates after unmount\n  const isMountedRef = useRef(true);\n\n  // Set isMounted to false on unmount\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  const isOwnProfile = !userId || userId === user?.id;\n  const displayUser = profileData || user;\n\n  // Load profile data\n  const loadProfileData = useCallback(async () => {\n    if (!displayUser?.id) return;\n\n    try {\n      // Load user profile\n      if (!isOwnProfile) {\n        const { data: profile } = await supabase.from(\"user_profiles\").select(\"*\").eq(\"id\", userId).single();\n\n        // Check if component is still mounted before updating state\n        if (isMountedRef.current) {\n          setProfileData(profile);\n        }\n      }\n\n      // Load user stats\n      const targetUserId = userId || user?.id;\n      if (!targetUserId) return;\n\n      const { data: confessions } = await supabase\n        .from(\"confessions\")\n        .select(\"id, likes, views\")\n        .eq(\"user_id\", targetUserId);\n\n      const totalLikes = confessions?.reduce((sum, c) => sum + (c.likes || 0), 0) || 0;\n      const totalViews = confessions?.reduce((sum, c) => sum + (c.views || 0), 0) || 0;\n\n      // Check if component is still mounted before updating state\n      if (isMountedRef.current) {\n        setStats({\n          confessions: confessions?.length || 0,\n          likes: totalLikes,\n          views: totalViews,\n          followers: 0, // Placeholder - would need followers table\n          following: 0, // Placeholder - would need following table\n        });\n      }\n\n      // Load user confessions\n      if (isOwnProfile && isMountedRef.current) {\n        await loadUserConfessions();\n      }\n    } catch (error) {\n      console.error(\"Error loading profile data:\", error);\n    }\n  }, [userId, user?.id, isOwnProfile, loadUserConfessions]);\n\n  useEffect(() => {\n    loadProfileData();\n  }, [loadProfileData]);\n\n  const handleRefresh = useCallback(async () => {\n    setIsRefreshing(true);\n    await loadProfileData();\n    setIsRefreshing(false);\n  }, [loadProfileData]);\n\n  const handleTabChange = useCallback(\n    async (tab: typeof activeTab) => {\n      setActiveTab(tab);\n      if (hapticsEnabled) {\n        await impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      }\n    },\n    [hapticsEnabled, impactAsync],\n  );\n\n  const handleEditProfile = useCallback(() => {\n    // Navigate to edit profile screen\n    navigation.navigate(\"EditProfile\");\n  }, [navigation]);\n\n  const handleSettings = useCallback(() => {\n    navigation.navigate(\"Settings\");\n  }, [navigation]);\n\n  const handleSignOut = useCallback(async () => {\n    Alert.alert(\"Sign Out\", \"Are you sure you want to sign out?\", [\n      { text: \"Cancel\", style: \"cancel\" },\n      {\n        text: \"Sign Out\",\n        style: \"destructive\",\n        onPress: async () => {\n          if (hapticsEnabled) {\n            await impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n          }\n          await signOut();\n        },\n      },\n    ]);\n  }, [signOut, hapticsEnabled, impactAsync]);\n\n  const formatNumber = (num: number): string => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n    return num.toString();\n  };\n\n  const getMembershipBadge = () => {\n    switch (membershipTier) {\n      case \"plus\":\n        return { icon: \"diamond\", color: \"#FFD700\", label: \"Plus\" };\n      case \"free\":\n      default:\n        return null;\n    }\n  };\n\n  const membershipBadge = getMembershipBadge();\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView\n        style={styles.scrollView}\n        refreshControl={<RefreshControl refreshing={isRefreshing} onRefresh={handleRefresh} />}\n        showsVerticalScrollIndicator={false}\n      >\n        {/* Header */}\n        <View style={styles.header}>\n          <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n            <Ionicons name=\"arrow-back\" size={24} color=\"white\" />\n          </Pressable>\n\n          <View style={styles.headerInfo}>\n            <Text style={styles.headerName}>{displayUser?.username || \"Anonymous\"}</Text>\n            <Text style={styles.headerSubtitle}>{stats.confessions} secrets</Text>\n          </View>\n\n          {isOwnProfile && (\n            <Pressable onPress={handleSettings} style={styles.settingsButton}>\n              <Ionicons name=\"settings-outline\" size={24} color=\"white\" />\n            </Pressable>\n          )}\n        </View>\n\n        {/* Profile Section */}\n        <View style={styles.profileSection}>\n          {/* Avatar */}\n          <View style={styles.avatarContainer}>\n            <View style={styles.avatar}>\n              <Ionicons name=\"person\" size={40} color=\"#666\" />\n            </View>\n            {membershipBadge && (\n              <View style={[styles.membershipBadge, { backgroundColor: membershipBadge.color }]}>\n                <Ionicons name={membershipBadge.icon as any} size={16} color=\"white\" />\n              </View>\n            )}\n          </View>\n\n          {/* Profile Info */}\n          <View style={styles.profileInfo}>\n            <Text style={styles.displayName}>\n              {displayUser?.display_name || displayUser?.username || \"Anonymous User\"}\n            </Text>\n            {membershipBadge && (\n              <Text style={[styles.membershipLabel, { color: membershipBadge.color }]}>\n                {membershipBadge.label} Member\n              </Text>\n            )}\n            <Text style={styles.bio}>{displayUser?.bio || \"Sharing secrets anonymously 🤫\"}</Text>\n            <Text style={styles.joinDate}>\n              Joined{\" \"}\n              {new Date(displayUser?.created_at || Date.now()).toLocaleDateString(\"en-US\", {\n                month: \"long\",\n                year: \"numeric\",\n              })}\n            </Text>\n          </View>\n\n          {/* Action Buttons */}\n          <View style={styles.actionButtons}>\n            {isOwnProfile ? (\n              <>\n                <Pressable style={styles.editButton} onPress={handleEditProfile}>\n                  <Text style={styles.editButtonText}>Edit Profile</Text>\n                </Pressable>\n                <Pressable style={styles.signOutButton} onPress={handleSignOut}>\n                  <Ionicons name=\"log-out-outline\" size={20} color=\"#EF4444\" />\n                </Pressable>\n              </>\n            ) : (\n              <>\n                <Pressable style={styles.followButton}>\n                  <Text style={styles.followButtonText}>Follow</Text>\n                </Pressable>\n                <Pressable style={styles.messageButton}>\n                  <Ionicons name=\"chatbubble-outline\" size={20} color=\"white\" />\n                </Pressable>\n              </>\n            )}\n          </View>\n        </View>\n\n        {/* Stats */}\n        <View style={styles.statsContainer}>\n          <Pressable style={styles.statItem}>\n            <Text style={styles.statValue}>{formatNumber(stats.confessions)}</Text>\n            <Text style={styles.statLabel}>Secrets</Text>\n          </Pressable>\n\n          <Pressable style={styles.statItem}>\n            <Text style={styles.statValue}>{formatNumber(stats.likes)}</Text>\n            <Text style={styles.statLabel}>Likes</Text>\n          </Pressable>\n\n          <Pressable style={styles.statItem}>\n            <Text style={styles.statValue}>{formatNumber(stats.views)}</Text>\n            <Text style={styles.statLabel}>Views</Text>\n          </Pressable>\n\n          <Pressable style={styles.statItem}>\n            <Text style={styles.statValue}>{formatNumber(stats.followers)}</Text>\n            <Text style={styles.statLabel}>Followers</Text>\n          </Pressable>\n        </View>\n\n        {/* Tabs */}\n        <View style={styles.tabsContainer}>\n          <Pressable\n            style={[styles.tab, activeTab === \"confessions\" && styles.activeTab]}\n            onPress={() => handleTabChange(\"confessions\")}\n          >\n            <Ionicons name=\"document-text\" size={20} color={activeTab === \"confessions\" ? \"#1D9BF0\" : \"#666\"} />\n            <Text style={[styles.tabText, activeTab === \"confessions\" && styles.activeTabText]}>Secrets</Text>\n          </Pressable>\n\n          {isOwnProfile && (\n            <>\n              <Pressable\n                style={[styles.tab, activeTab === \"liked\" && styles.activeTab]}\n                onPress={() => handleTabChange(\"liked\")}\n              >\n                <Ionicons name=\"heart\" size={20} color={activeTab === \"liked\" ? \"#1D9BF0\" : \"#666\"} />\n                <Text style={[styles.tabText, activeTab === \"liked\" && styles.activeTabText]}>Liked</Text>\n              </Pressable>\n\n              <Pressable\n                style={[styles.tab, activeTab === \"saved\" && styles.activeTab]}\n                onPress={() => handleTabChange(\"saved\")}\n              >\n                <Ionicons name=\"bookmark\" size={20} color={activeTab === \"saved\" ? \"#1D9BF0\" : \"#666\"} />\n                <Text style={[styles.tabText, activeTab === \"saved\" && styles.activeTabText]}>Saved</Text>\n              </Pressable>\n            </>\n          )}\n        </View>\n\n        {/* Content */}\n        <View style={styles.contentContainer}>\n          {activeTab === \"confessions\" && (\n            <View style={styles.confessionsGrid}>\n              {userConfessions.length > 0 ? (\n                userConfessions.map((confession) => (\n                  <View key={confession.id} style={styles.confessionCard}>\n                    <Text style={styles.confessionText} numberOfLines={3}>\n                      {confession.content}\n                    </Text>\n                    <View style={styles.confessionStats}>\n                      <View style={styles.confessionStat}>\n                        <Ionicons name=\"heart\" size={12} color=\"#EF4444\" />\n                        <Text style={styles.confessionStatText}>{confession.likes || 0}</Text>\n                      </View>\n                      <View style={styles.confessionStat}>\n                        <Ionicons name=\"eye\" size={12} color=\"#666\" />\n                        <Text style={styles.confessionStatText}>{confession.views || 0}</Text>\n                      </View>\n                    </View>\n                  </View>\n                ))\n              ) : (\n                <View style={styles.emptyState}>\n                  <Ionicons name=\"document-text-outline\" size={48} color=\"#666\" />\n                  <Text style={styles.emptyStateText}>No secrets yet</Text>\n                  <Text style={styles.emptyStateSubtext}>\n                    {isOwnProfile ? \"Share your first secret\" : \"This user hasn't shared any secrets\"}\n                  </Text>\n                </View>\n              )}\n            </View>\n          )}\n\n          {activeTab === \"liked\" && isOwnProfile && (\n            <View style={styles.emptyState}>\n              <Ionicons name=\"heart-outline\" size={48} color=\"#666\" />\n              <Text style={styles.emptyStateText}>No liked secrets</Text>\n              <Text style={styles.emptyStateSubtext}>Secrets you like will appear here</Text>\n            </View>\n          )}\n\n          {activeTab === \"saved\" && isOwnProfile && (\n            <View style={styles.emptyState}>\n              <Ionicons name=\"bookmark-outline\" size={48} color=\"#666\" />\n              <Text style={styles.emptyStateText}>No saved secrets</Text>\n              <Text style={styles.emptyStateSubtext}>Secrets you save will appear here</Text>\n            </View>\n          )}\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"black\",\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerInfo: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  headerName: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  headerSubtitle: {\n    color: \"#666\",\n    fontSize: 12,\n    marginTop: 2,\n  },\n  settingsButton: {\n    padding: 8,\n  },\n  profileSection: {\n    padding: 20,\n  },\n  avatarContainer: {\n    alignItems: \"center\",\n    marginBottom: 16,\n  },\n  avatar: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: \"#333\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderWidth: 3,\n    borderColor: \"#1D9BF0\",\n  },\n  membershipBadge: {\n    position: \"absolute\",\n    bottom: 0,\n    right: -8,\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderWidth: 2,\n    borderColor: \"black\",\n  },\n  profileInfo: {\n    alignItems: \"center\",\n    marginBottom: 20,\n  },\n  displayName: {\n    color: \"white\",\n    fontSize: 22,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  membershipLabel: {\n    fontSize: 14,\n    fontWeight: \"600\",\n    marginBottom: 8,\n  },\n  bio: {\n    color: \"#666\",\n    fontSize: 16,\n    textAlign: \"center\",\n    marginBottom: 8,\n    lineHeight: 22,\n  },\n  joinDate: {\n    color: \"#666\",\n    fontSize: 14,\n  },\n  actionButtons: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  editButton: {\n    flex: 1,\n    backgroundColor: \"#333\",\n    borderRadius: 20,\n    paddingVertical: 10,\n    alignItems: \"center\",\n  },\n  editButtonText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  signOutButton: {\n    backgroundColor: \"#333\",\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  followButton: {\n    flex: 1,\n    backgroundColor: \"#1D9BF0\",\n    borderRadius: 20,\n    paddingVertical: 10,\n    alignItems: \"center\",\n  },\n  followButtonText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  messageButton: {\n    backgroundColor: \"#333\",\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  statsContainer: {\n    flexDirection: \"row\",\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n  },\n  statItem: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  statValue: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  statLabel: {\n    color: \"#666\",\n    fontSize: 12,\n  },\n  tabsContainer: {\n    flexDirection: \"row\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n  },\n  tab: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 16,\n    gap: 8,\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: \"#1D9BF0\",\n  },\n  tabText: {\n    color: \"#666\",\n    fontSize: 14,\n    fontWeight: \"500\",\n  },\n  activeTabText: {\n    color: \"#1D9BF0\",\n  },\n  contentContainer: {\n    flex: 1,\n    padding: 20,\n  },\n  confessionsGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 12,\n  },\n  confessionCard: {\n    width: (SCREEN_WIDTH - 52) / 2,\n    backgroundColor: \"#1A1A1A\",\n    borderRadius: 12,\n    padding: 12,\n    minHeight: 120,\n  },\n  confessionText: {\n    color: \"white\",\n    fontSize: 14,\n    lineHeight: 20,\n    flex: 1,\n  },\n  confessionStats: {\n    flexDirection: \"row\",\n    gap: 12,\n    marginTop: 8,\n  },\n  confessionStat: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 4,\n  },\n  confessionStatText: {\n    color: \"#666\",\n    fontSize: 12,\n  },\n  emptyState: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 60,\n  },\n  emptyStateText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"600\",\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyStateSubtext: {\n    color: \"#666\",\n    fontSize: 14,\n    textAlign: \"center\",\n  },\n});\n\nexport default EnhancedProfileScreen;\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/EnhancedShareBottomSheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/EnhancedVideoFeed.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'currentIndex'. Either include it or remove the dependency array.","line":126,"column":7,"nodeType":"ArrayExpression","endLine":126,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [videoConfessions.length, currentIndex, videoPlayers]","fix":{"range":[4898,4937],"text":"[videoConfessions.length, currentIndex, videoPlayers]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/EnhancedVideoItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ErrorState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/FeatureGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/FeedActionSheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_modalType' is assigned a value but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useState } from \"react\";\nimport { View, Text, Pressable, Share, Modal } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as Clipboard from \"expo-clipboard\";\nimport { BottomSheetModal, BottomSheetView, BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\nimport { useSavedStore } from \"../state/savedStore\";\nimport { usePreferenceAwareHaptics } from \"../utils/haptics\";\nimport ReportModal from \"./ReportModal\";\nimport { BlurView } from \"expo-blur\";\n\ninterface FeedActionSheetProps {\n  confessionId: string;\n  confessionText: string;\n  bottomSheetModalRef: React.RefObject<BottomSheetModal | null>;\n}\n\nexport default function FeedActionSheet({ confessionId, confessionText, bottomSheetModalRef }: FeedActionSheetProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [reportModalVisible, setReportModalVisible] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [_modalType, setModalType] = useState<\"success\" | \"confirm\">(\"success\");\n\n  const { saveConfession, unsaveConfession, isSaved } = useSavedStore();\n  const { impactAsync } = usePreferenceAwareHaptics();\n\n  // Bottom sheet configuration\n  const snapPoints = useMemo(() => [\"45%\"], []);\n\n  const showMessage = (message: string, type: \"success\" | \"confirm\") => {\n    setModalMessage(message);\n    setModalType(type);\n    setShowModal(true);\n  };\n\n  // Backdrop component\n  const renderBackdrop = useCallback(\n    (props: any) => <BottomSheetBackdrop {...props} disappearsOnIndex={-1} appearsOnIndex={0} opacity={0.5} />,\n    [],\n  );\n\n  const handleNativeShare = useCallback(async () => {\n    try {\n      const shareUrl = `https://secrets.app/confession/${confessionId}`;\n      await Share.share({\n        message: `Check out this anonymous confession: \"${confessionText.substring(0, 100)}...\" ${shareUrl}`,\n        url: shareUrl,\n      });\n      impactAsync();\n      bottomSheetModalRef.current?.dismiss();\n    } catch (error) {\n      if (__DEV__) {\n        console.error(\"Share failed:\", error);\n      }\n    }\n  }, [confessionId, confessionText, bottomSheetModalRef, impactAsync]);\n\n  const handleCopyLink = useCallback(async () => {\n    try {\n      const shareUrl = `https://secrets.app/confession/${confessionId}`;\n      await Clipboard.setStringAsync(shareUrl);\n      showMessage(\"Link copied to clipboard!\", \"success\");\n      impactAsync();\n      bottomSheetModalRef.current?.dismiss();\n    } catch (error) {\n      if (__DEV__) {\n        console.error(\"Copy failed:\", error);\n      }\n    }\n  }, [confessionId, bottomSheetModalRef, impactAsync]);\n\n  const handleCopyText = useCallback(async () => {\n    try {\n      await Clipboard.setStringAsync(confessionText);\n      showMessage(\"Text copied to clipboard!\", \"success\");\n      impactAsync();\n      bottomSheetModalRef.current?.dismiss();\n    } catch (error) {\n      if (__DEV__) {\n        console.error(\"Copy failed:\", error);\n      }\n    }\n  }, [confessionText, bottomSheetModalRef, impactAsync]);\n\n  const handleSave = useCallback(() => {\n    const isCurrentlySaved = isSaved(confessionId);\n\n    if (isCurrentlySaved) {\n      unsaveConfession(confessionId);\n      showMessage(\"Removed from saved secrets\", \"success\");\n    } else {\n      saveConfession(confessionId);\n      showMessage(\"Saved to your collection!\", \"success\");\n    }\n\n    impactAsync();\n    bottomSheetModalRef.current?.dismiss();\n  }, [confessionId, isSaved, saveConfession, unsaveConfession, bottomSheetModalRef, impactAsync]);\n\n  const handleReport = useCallback(() => {\n    impactAsync();\n    bottomSheetModalRef.current?.dismiss();\n    setTimeout(() => {\n      setReportModalVisible(true);\n    }, 300);\n  }, [bottomSheetModalRef, impactAsync]);\n\n  const ActionOption = ({\n    icon,\n    title,\n    subtitle,\n    onPress,\n    color = \"#8B98A5\",\n  }: {\n    icon: string;\n    title: string;\n    subtitle: string;\n    onPress: () => void;\n    color?: string;\n  }) => (\n    <Pressable className=\"flex-row items-center py-4 px-4 active:bg-gray-800 rounded-xl\" onPress={onPress}>\n      <View\n        className=\"w-10 h-10 rounded-full items-center justify-center mr-3\"\n        style={{ backgroundColor: `${color}20` }}\n      >\n        <Ionicons name={icon as any} size={20} color={color} />\n      </View>\n      <View className=\"flex-1\">\n        <Text className=\"text-white text-16 font-medium\">{title}</Text>\n        <Text className=\"text-gray-400 text-13 mt-0.5\">{subtitle}</Text>\n      </View>\n    </Pressable>\n  );\n\n  return (\n    <>\n      <BottomSheetModal\n        ref={bottomSheetModalRef}\n        index={0}\n        snapPoints={snapPoints}\n        backdropComponent={renderBackdrop}\n        backgroundStyle={{ backgroundColor: \"#1F2937\" }}\n        handleIndicatorStyle={{ backgroundColor: \"#4B5563\" }}\n      >\n        <BottomSheetView className=\"flex-1 px-4\">\n          {/* Header */}\n          <View className=\"items-center mb-6\">\n            <Text className=\"text-white text-18 font-semibold\">Actions</Text>\n            <Text className=\"text-gray-400 text-14 mt-1\">Choose an action for this secret</Text>\n          </View>\n\n          {/* Action Options */}\n          <View className=\"space-y-2\">\n            <ActionOption\n              icon=\"share-outline\"\n              title=\"Share\"\n              subtitle=\"Share this anonymous confession\"\n              onPress={handleNativeShare}\n              color=\"#1D9BF0\"\n            />\n\n            <ActionOption\n              icon=\"link-outline\"\n              title=\"Copy Link\"\n              subtitle=\"Copy link to clipboard\"\n              onPress={handleCopyLink}\n              color=\"#10B981\"\n            />\n\n            <ActionOption\n              icon=\"copy-outline\"\n              title=\"Copy Text\"\n              subtitle=\"Copy confession text\"\n              onPress={handleCopyText}\n              color=\"#8B5CF6\"\n            />\n\n            <ActionOption\n              icon={isSaved(confessionId) ? \"bookmark\" : \"bookmark-outline\"}\n              title={isSaved(confessionId) ? \"Remove from Saved\" : \"Save\"}\n              subtitle={isSaved(confessionId) ? \"Remove from your collection\" : \"Save to your collection\"}\n              onPress={handleSave}\n              color=\"#F59E0B\"\n            />\n\n            <ActionOption\n              icon=\"flag-outline\"\n              title=\"Report\"\n              subtitle=\"Report inappropriate content\"\n              onPress={handleReport}\n              color=\"#EF4444\"\n            />\n          </View>\n        </BottomSheetView>\n      </BottomSheetModal>\n\n      {/* Success/Confirm Modal */}\n      <Modal visible={showModal} transparent animationType=\"fade\" onRequestClose={() => setShowModal(false)}>\n        <BlurView intensity={20} tint=\"dark\" style={{ flex: 1 }}>\n          <View className=\"flex-1 items-center justify-center px-8\">\n            <View className=\"bg-gray-800 rounded-2xl p-6 w-full max-w-sm\">\n              <View className=\"items-center\">\n                <View className=\"w-12 h-12 bg-green-600 rounded-full items-center justify-center mb-4\">\n                  <Ionicons name=\"checkmark\" size={24} color=\"white\" />\n                </View>\n                <Text className=\"text-white text-16 font-medium text-center mb-6\">{modalMessage}</Text>\n                <Pressable className=\"bg-blue-600 rounded-xl py-3 px-6 w-full\" onPress={() => setShowModal(false)}>\n                  <Text className=\"text-white text-16 font-medium text-center\">OK</Text>\n                </Pressable>\n              </View>\n            </View>\n          </View>\n        </BlurView>\n      </Modal>\n\n      {/* Report Modal */}\n      <ReportModal\n        isVisible={reportModalVisible}\n        onClose={() => setReportModalVisible(false)}\n        confessionId={confessionId}\n        contentType=\"confession\"\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/HashtagItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/HashtagText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/HermesCompatibleVideoPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trackInteraction' is assigned a value but never used.","line":260,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport { VideoView, useVideoPlayer } from \"expo-video\";\nimport { View } from \"react-native\";\nimport { useVideoAnalyticsTracker } from \"../hooks/useVideoAnalyticsTracker\";\nimport { consentStore } from \"../state/consentStore\";\n\ninterface HermesCompatibleVideoPlayerProps {\n  videoUri: string;\n  videoId?: string;\n  isActive: boolean;\n  onError?: (error: Error) => void;\n  onPlaybackStatusUpdate?: (status: any) => void;\n  onPlay?: () => void;\n  onPause?: () => void;\n  onSeek?: (from: number, to: number) => void;\n  onBufferStart?: () => void;\n  onBufferEnd?: () => void;\n  onComplete?: () => void;\n  onQualityChange?: (quality: string) => void;\n  enableAnalytics?: boolean;\n  trackDetailedEngagement?: boolean;\n  sessionId?: string;\n  style?: any;\n  className?: string;\n}\n\n/**\n * Enhanced video player component with Hermes-specific disposal handling\n * Addresses \"Player pause failed during disposal\" warnings\n */\nexport const HermesCompatibleVideoPlayer: React.FC<HermesCompatibleVideoPlayerProps> = ({\n  videoUri,\n  videoId,\n  isActive,\n  onError,\n  onPlaybackStatusUpdate,\n  onPlay,\n  onPause,\n  onSeek,\n  onBufferStart,\n  onBufferEnd,\n  onComplete,\n  onQualityChange,\n  enableAnalytics = true,\n  trackDetailedEngagement = true,\n  sessionId,\n  style,\n  className,\n}) => {\n  const playerRef = useRef<VideoView>(null);\n  const [isDisposing, setIsDisposing] = useState(false);\n  const disposalTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const lastPlaybackStatusRef = useRef<any>(null);\n  const bufferingStateRef = useRef(false);\n  const seekDetectionRef = useRef<{ time: number; position: number } | null>(null);\n  const qualityRef = useRef<string>(\"auto\");\n  const videoDurationRef = useRef<number>(0);\n  const hasStartedRef = useRef(false);\n  const performanceStartRef = useRef<number>(Date.now());\n\n  // Create player with enhanced error handling\n  const player = useVideoPlayer(videoUri, (player) => {\n    try {\n      player.loop = true;\n      player.muted = false;\n\n      // Set initial play state\n      if (isActive && !isDisposing) {\n        player.play();\n      } else {\n        player.pause();\n      }\n    } catch (error) {\n      if (__DEV__) {\n        console.warn(\"Video player setup error:\", error);\n      }\n      onError?.(error as Error);\n    }\n  });\n\n  const analyticsConsent = consentStore.preferences.analytics;\n  const analytics = useVideoAnalyticsTracker({\n    videoId: videoId || videoUri,\n    videoDuration: videoDurationRef.current,\n    enableDetailedTracking: trackDetailedEngagement && analyticsConsent && enableAnalytics,\n    sessionId,\n    onEngagementUpdate: (score) => {\n      if (__DEV__) {\n        console.log(`Video engagement score: ${score}`);\n      }\n    },\n    onCompletionDetected: (completionRate) => {\n      if (__DEV__) {\n        console.log(`Video completed: ${completionRate}%`);\n      }\n      onComplete?.();\n    },\n  });\n\n  // Handle play/pause based on active state\n  useEffect(() => {\n    if (!player || isDisposing) return;\n\n    try {\n      if (isActive) {\n        player.play();\n      } else {\n        player.pause();\n      }\n    } catch (error) {\n      if (__DEV__) {\n        console.warn(\"Video play/pause error:\", error);\n      }\n    }\n  }, [player, isActive, isDisposing]);\n\n  // Enhanced disposal handling for Hermes compatibility\n  const disposePlayer = useCallback(async () => {\n    if (isDisposing || !player) return;\n\n    setIsDisposing(true);\n\n    try {\n      // Clear any pending disposal timeout\n      if (disposalTimeoutRef.current) {\n        clearTimeout(disposalTimeoutRef.current);\n        disposalTimeoutRef.current = null;\n      }\n\n      // Graceful pause with timeout\n      const pausePromise = new Promise<void>((resolve) => {\n        try {\n          // Check if player is still valid\n          let shouldPause = false;\n          try {\n            shouldPause = player.playing;\n          } catch (checkError: any) {\n            // Player already disposed\n            if (\n              checkError?.message?.includes(\"NativeSharedObjectNotFoundException\") ||\n              checkError?.message?.includes(\"Unable to find the native shared object\")\n            ) {\n              resolve();\n              return;\n            }\n          }\n\n          if (shouldPause) {\n            try {\n              player.pause();\n            } catch (pauseErr: any) {\n              // Only log non-disposal errors\n              if (\n                __DEV__ &&\n                !pauseErr?.message?.includes(\"NativeSharedObjectNotFoundException\") &&\n                !pauseErr?.message?.includes(\"Unable to find the native shared object\")\n              ) {\n                console.warn(\"Video pause error during disposal:\", pauseErr?.message);\n              }\n            }\n          }\n          resolve();\n        } catch (pauseError: any) {\n          // Ignore disposal-related errors\n          if (\n            __DEV__ &&\n            !pauseError?.message?.includes(\"NativeSharedObjectNotFoundException\") &&\n            !pauseError?.message?.includes(\"Unable to find the native shared object\")\n          ) {\n            console.warn(\"Video pause failed during disposal:\", pauseError?.message);\n          }\n          resolve();\n        }\n      });\n\n      // Set a timeout for pause operation\n      const timeoutPromise = new Promise<void>((resolve) => {\n        disposalTimeoutRef.current = setTimeout(() => {\n          resolve();\n        }, 100); // 100ms timeout for pause\n      });\n\n      // Wait for either pause to complete or timeout\n      await Promise.race([pausePromise, timeoutPromise]);\n\n      // Note: player.unload() does not exist in expo-video\n      // The player is automatically disposed when the component unmounts\n    } catch (error) {\n      // Silently ignore all disposal errors\n      if (__DEV__) {\n        console.warn(\"Video disposal error:\", error);\n      }\n    } finally {\n      // Clean up timeout\n      if (disposalTimeoutRef.current) {\n        clearTimeout(disposalTimeoutRef.current);\n        disposalTimeoutRef.current = null;\n      }\n    }\n  }, [player, isDisposing]);\n\n  // Enhanced cleanup with analytics\n  useEffect(() => {\n    return () => {\n      // Clean up analytics tracking\n      if (enableAnalytics && analyticsConsent) {\n        analytics.cleanup();\n      }\n      disposePlayer();\n    };\n  }, [disposePlayer, enableAnalytics, analytics, analyticsConsent]);\n\n  // Track quality changes if supported\n  useEffect(() => {\n    if (!player || !trackDetailedEngagement || !enableAnalytics || !analyticsConsent) return;\n\n    // expo-video doesn't expose quality directly, but we can track if it changes\n    // This is a placeholder for when quality information becomes available\n    const checkQuality = () => {\n      // Future: Check player.quality or similar property\n      const currentQuality = \"auto\"; // Default for now\n      if (currentQuality !== qualityRef.current) {\n        qualityRef.current = currentQuality;\n        onQualityChange?.(currentQuality);\n        analytics.updateQuality(currentQuality);\n      }\n    };\n\n    const qualityInterval = setInterval(checkQuality, 5000);\n    return () => clearInterval(qualityInterval);\n  }, [player, trackDetailedEngagement, enableAnalytics, analyticsConsent, onQualityChange, analytics]);\n\n  // Track buffer events (placeholder for when expo-video exposes buffering state)\n  useEffect(() => {\n    if (!player || !trackDetailedEngagement || !enableAnalytics || !analyticsConsent) return;\n\n    // This is a placeholder - expo-video doesn't currently expose buffering events\n    // When available, implement proper buffer tracking\n    const checkBuffering = () => {\n      // Future: Check player.isBuffering or similar\n      const isBuffering = false; // Default for now\n\n      if (isBuffering !== bufferingStateRef.current) {\n        bufferingStateRef.current = isBuffering;\n        if (isBuffering) {\n          onBufferStart?.();\n          analytics.handleBufferStart();\n        } else {\n          onBufferEnd?.();\n          analytics.handleBufferEnd();\n        }\n      }\n    };\n\n    const bufferInterval = setInterval(checkBuffering, 500);\n    return () => clearInterval(bufferInterval);\n  }, [player, trackDetailedEngagement, enableAnalytics, analyticsConsent, onBufferStart, onBufferEnd, analytics]);\n\n  // Track interaction events\n  const trackInteraction = useCallback(\n    (type: \"like\" | \"unlike\" | \"comment\" | \"share\" | \"save\") => {\n      if (enableAnalytics && analyticsConsent) {\n        analytics.trackInteraction(type);\n      }\n    },\n    [enableAnalytics, analyticsConsent, analytics],\n  );\n\n  // Handle player status changes with enhanced analytics\n  useEffect(() => {\n    if (!player || isDisposing) return;\n\n    // Monitor player properties for status updates\n    const checkStatus = () => {\n      try {\n        const currentStatus = {\n          isLoaded: true,\n          isPlaying: player.playing,\n          isBuffering: false, // expo-video doesn't expose buffering state directly\n          currentTime: player.currentTime,\n          duration: player.duration,\n          positionMillis: player.currentTime * 1000,\n          durationMillis: player.duration * 1000,\n          muted: player.muted,\n          loop: player.loop,\n          didJustFinish: false,\n          isLooping: player.loop,\n          error: null,\n        };\n\n        // Update duration reference\n        if (player.duration > 0 && videoDurationRef.current !== player.duration) {\n          videoDurationRef.current = player.duration;\n        }\n\n        // Detect first play\n        if (player.playing && !hasStartedRef.current) {\n          hasStartedRef.current = true;\n          const startupTime = Date.now() - performanceStartRef.current;\n          if (__DEV__) {\n            console.log(`Video startup time: ${startupTime}ms`);\n          }\n        }\n\n        // Detect playback state changes\n        if (lastPlaybackStatusRef.current) {\n          const lastStatus = lastPlaybackStatusRef.current;\n\n          // Play/Pause detection\n          if (player.playing !== lastStatus.isPlaying) {\n            if (player.playing) {\n              onPlay?.();\n            } else {\n              onPause?.();\n            }\n          }\n\n          // Seek detection\n          if (seekDetectionRef.current) {\n            const timeDiff = Date.now() - seekDetectionRef.current.time;\n            const positionDiff = Math.abs(player.currentTime - seekDetectionRef.current.position);\n\n            if (timeDiff < 100 && positionDiff > 2) {\n              // Likely a seek if position changed more than 2 seconds within 100ms\n              onSeek?.(seekDetectionRef.current.position, player.currentTime);\n            }\n          }\n          seekDetectionRef.current = { time: Date.now(), position: player.currentTime };\n\n          // Completion detection\n          if (player.duration > 0 && player.currentTime >= player.duration * 0.95) {\n            if (!lastStatus.didJustFinish) {\n              currentStatus.didJustFinish = true;\n            }\n          }\n        }\n\n        // Send status updates\n        onPlaybackStatusUpdate?.(currentStatus);\n\n        // Send to analytics tracker if enabled\n        if (enableAnalytics && analyticsConsent) {\n          analytics.onPlaybackStatusUpdate(currentStatus);\n        }\n\n        lastPlaybackStatusRef.current = currentStatus;\n      } catch (statusError) {\n        if (__DEV__) {\n          console.warn(\"Playback status update error:\", statusError);\n        }\n        onError?.(new Error(\"Failed to get playback status\"));\n      }\n    };\n\n    // Check status periodically with higher frequency for better tracking\n    const interval = setInterval(checkStatus, 250); // 250ms for more accurate tracking\n\n    // Initial status check\n    checkStatus();\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [\n    player,\n    isDisposing,\n    onPlaybackStatusUpdate,\n    onError,\n    onPlay,\n    onPause,\n    onSeek,\n    onComplete,\n    enableAnalytics,\n    analytics,\n    analyticsConsent,\n  ]);\n\n  if (isDisposing) {\n    return <View style={style} className={className} />;\n  }\n\n  return (\n    <VideoView\n      ref={playerRef}\n      style={style}\n      player={player}\n      fullscreenOptions={{ enable: false }}\n      allowsPictureInPicture={false}\n      showsTimecodes={false}\n      requiresLinearPlayback={false}\n    />\n  );\n};\n\nexport default HermesCompatibleVideoPlayer;\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/KeyboardAvoidingWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'rotation' and 'scale'. Either include them or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [rotation, scale]","fix":{"range":[857,859],"text":"[rotation, scale]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/MigrationHelper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/NetworkStatusIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'withDelay' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FadeIn' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FadeOut' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'runOnJS' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'metrics.status', 'persistentMode', 'scheduleAutoHide', and 'startReconnectAnimation'. Either include them or remove the dependency array.","line":250,"column":6,"nodeType":"ArrayExpression","endLine":250,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [metrics.status, persistentMode, scheduleAutoHide, startReconnectAnimation]","fix":{"range":[6925,6927],"text":"[metrics.status, persistentMode, scheduleAutoHide, startReconnectAnimation]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'dotScale', 'opacity', 'pulseScale', 'scale', and 'translateY'. Either include them or remove the dependency array.","line":276,"column":6,"nodeType":"ArrayExpression","endLine":276,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [dotScale, isVisible, metrics.status, opacity, position, pulseScale, scale, translateY]","fix":{"range":[7820,7857],"text":"[dotScale, isVisible, metrics.status, opacity, position, pulseScale, scale, translateY]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef, useMemo } from \"react\";\nimport { View, Text, StyleSheet, Pressable, AccessibilityInfo, Platform } from \"react-native\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  withSpring,\n  withSequence,\n  withDelay,\n  withRepeat,\n  Easing,\n  FadeIn,\n  FadeOut,\n  SlideInUp,\n  SlideOutUp,\n  runOnJS,\n} from \"react-native-reanimated\";\nimport NetInfo, { NetInfoState, NetInfoStateType } from \"@react-native-community/netinfo\";\nimport * as Haptics from \"expo-haptics\";\nimport { useTheme } from \"../hooks/useTheme\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\ntype ConnectionStatus = \"online\" | \"offline\" | \"poor\" | \"reconnecting\";\ntype ConnectionQuality = \"excellent\" | \"good\" | \"fair\" | \"poor\" | \"offline\";\n\ninterface NetworkStatusIndicatorProps {\n  position?: \"top\" | \"bottom\" | \"inline\";\n  autoHideDelay?: number;\n  showBandwidth?: boolean;\n  showRetryButton?: boolean;\n  onRetry?: () => void;\n  minimalMode?: boolean;\n  persistentMode?: boolean;\n  scrollOffset?: any;\n  style?: any;\n}\n\ninterface ConnectionMetrics {\n  status: ConnectionStatus;\n  quality: ConnectionQuality;\n  type: NetInfoStateType;\n  effectiveType?: string;\n  downlinkSpeed?: number;\n  isInternetReachable: boolean | null;\n  details?: string;\n}\n\nconst getConnectionMetrics = (state: NetInfoState): ConnectionMetrics => {\n  const { isConnected, isInternetReachable, type, details } = state;\n\n  if (!isConnected || isInternetReachable === false) {\n    return {\n      status: \"offline\",\n      quality: \"offline\",\n      type,\n      isInternetReachable: isInternetReachable ?? false,\n      details: \"No internet connection\",\n    };\n  }\n\n  if (type === NetInfoStateType.wifi) {\n    const wifiDetails = details as any;\n    const strength = wifiDetails?.strength || 100;\n\n    if (strength > 70) {\n      return {\n        status: \"online\",\n        quality: \"excellent\",\n        type,\n        isInternetReachable: true,\n        details: \"Wi-Fi connected\",\n      };\n    } else if (strength > 50) {\n      return {\n        status: \"online\",\n        quality: \"good\",\n        type,\n        isInternetReachable: true,\n        details: \"Wi-Fi connected\",\n      };\n    } else {\n      return {\n        status: \"poor\",\n        quality: \"fair\",\n        type,\n        isInternetReachable: true,\n        details: \"Weak Wi-Fi signal\",\n      };\n    }\n  }\n\n  if (type === NetInfoStateType.cellular) {\n    const cellularDetails = details as any;\n    const generation = cellularDetails?.cellularGeneration;\n\n    switch (generation) {\n      case \"5g\":\n        return {\n          status: \"online\",\n          quality: \"excellent\",\n          type,\n          effectiveType: \"5G\",\n          isInternetReachable: true,\n          details: \"5G connected\",\n        };\n      case \"4g\":\n        return {\n          status: \"online\",\n          quality: \"good\",\n          type,\n          effectiveType: \"4G\",\n          isInternetReachable: true,\n          details: \"4G LTE connected\",\n        };\n      case \"3g\":\n        return {\n          status: \"poor\",\n          quality: \"fair\",\n          type,\n          effectiveType: \"3G\",\n          isInternetReachable: true,\n          details: \"3G connection (slower speeds)\",\n        };\n      default:\n        return {\n          status: \"poor\",\n          quality: \"poor\",\n          type,\n          effectiveType: \"2G\",\n          isInternetReachable: true,\n          details: \"Slow cellular connection\",\n        };\n    }\n  }\n\n  return {\n    status: isInternetReachable === null ? \"reconnecting\" : \"online\",\n    quality: \"fair\",\n    type,\n    isInternetReachable: isInternetReachable ?? true,\n    details: \"Checking connection...\",\n  };\n};\n\nexport default function NetworkStatusIndicator({\n  position = \"top\",\n  autoHideDelay = 5000,\n  showBandwidth = false,\n  showRetryButton = true,\n  onRetry,\n  minimalMode = false,\n  persistentMode = false,\n  scrollOffset,\n  style,\n}: NetworkStatusIndicatorProps) {\n  const theme = useTheme();\n  const [metrics, setMetrics] = useState<ConnectionMetrics>({\n    status: \"online\",\n    quality: \"good\",\n    type: NetInfoStateType.unknown,\n    isInternetReachable: true,\n  });\n  const [isVisible, setIsVisible] = useState(false);\n  const [bandwidthMbps, setBandwidthMbps] = useState<number | null>(null);\n\n  const hideTimer = useRef<NodeJS.Timeout | undefined>(undefined);\n  const reconnectAttempts = useRef(0);\n\n  const opacity = useSharedValue(0);\n  const translateY = useSharedValue(position === \"top\" ? -50 : 50);\n  const scale = useSharedValue(0.95);\n  const pulseScale = useSharedValue(1);\n  const dotScale = useSharedValue(1);\n  const retryRotation = useSharedValue(0);\n\n  const statusColors = useMemo(\n    () => ({\n      online: \"#10B981\",\n      offline: \"#EF4444\",\n      poor: \"#F59E0B\",\n      reconnecting: \"#6B7280\",\n    }),\n    [],\n  );\n\n  const qualityIcons = useMemo(\n    () => ({\n      excellent: \"wifi\",\n      good: \"wifi\",\n      fair: \"cellular-outline\",\n      poor: \"cellular-outline\",\n      offline: \"cloud-offline\",\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    const unsubscribe = NetInfo.addEventListener((state) => {\n      const newMetrics = getConnectionMetrics(state);\n      const prevStatus = metrics.status;\n\n      setMetrics(newMetrics);\n\n      if (Platform.OS === \"android\" && state.details) {\n        const details = state.details as any;\n        if (details.linkDownBandwidthKbps) {\n          setBandwidthMbps(details.linkDownBandwidthKbps / 1000);\n        }\n      }\n\n      if (newMetrics.status === \"offline\") {\n        setIsVisible(true);\n        reconnectAttempts.current = 0;\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n        AccessibilityInfo.announceForAccessibility(\"Internet connection lost\");\n      } else if (newMetrics.status === \"poor\") {\n        setIsVisible(true);\n        scheduleAutoHide();\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n        AccessibilityInfo.announceForAccessibility(\"Poor connection detected\");\n      } else if (prevStatus === \"offline\" && newMetrics.status === \"online\") {\n        setIsVisible(true);\n        scheduleAutoHide();\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n        AccessibilityInfo.announceForAccessibility(\"Internet connection restored\");\n      } else if (!persistentMode && newMetrics.status === \"online\") {\n        scheduleAutoHide();\n      }\n\n      if (newMetrics.status === \"reconnecting\") {\n        reconnectAttempts.current++;\n        startReconnectAnimation();\n      }\n    });\n\n    NetInfo.fetch().then((state) => {\n      const initialMetrics = getConnectionMetrics(state);\n      setMetrics(initialMetrics);\n      if (initialMetrics.status !== \"online\" || persistentMode) {\n        setIsVisible(true);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n      if (hideTimer.current) clearTimeout(hideTimer.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isVisible) {\n      opacity.value = withTiming(1, { duration: 300 });\n      translateY.value = withSpring(0, { damping: 15, stiffness: 100 });\n      scale.value = withSpring(1, { damping: 12, stiffness: 150 });\n\n      if (metrics.status === \"poor\" || metrics.status === \"reconnecting\") {\n        pulseScale.value = withRepeat(\n          withSequence(withTiming(1.05, { duration: 600 }), withTiming(1, { duration: 600 })),\n          -1,\n          false,\n        );\n      }\n\n      dotScale.value = withRepeat(\n        withSequence(withTiming(1.2, { duration: 500 }), withTiming(0.8, { duration: 500 })),\n        -1,\n        false,\n      );\n    } else {\n      opacity.value = withTiming(0, { duration: 300 });\n      translateY.value = withTiming(position === \"top\" ? -50 : 50, { duration: 300 });\n      scale.value = withTiming(0.95, { duration: 300 });\n    }\n  }, [isVisible, metrics.status, position]);\n\n  const scheduleAutoHide = () => {\n    if (!persistentMode && autoHideDelay > 0 && metrics.status === \"online\") {\n      if (hideTimer.current) clearTimeout(hideTimer.current);\n      hideTimer.current = setTimeout(() => {\n        setIsVisible(false);\n      }, autoHideDelay);\n    }\n  };\n\n  const startReconnectAnimation = () => {\n    retryRotation.value = withRepeat(withTiming(360, { duration: 1000, easing: Easing.linear }), -1, false);\n  };\n\n  const handleRetry = () => {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    retryRotation.value = withSequence(withTiming(360, { duration: 500 }), withTiming(0, { duration: 0 }));\n    if (onRetry) onRetry();\n    NetInfo.fetch();\n  };\n\n  const animatedStyle = useAnimatedStyle(() => {\n    const baseTranslateY = translateY.value;\n    const scrollAdjustment = scrollOffset ? scrollOffset.value * 0.5 : 0;\n\n    return {\n      opacity: opacity.value,\n      transform: [{ translateY: baseTranslateY - scrollAdjustment }, { scale: scale.value * pulseScale.value }],\n    };\n  });\n\n  const dotAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: dotScale.value }],\n  }));\n\n  const retryAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ rotate: `${retryRotation.value}deg` }],\n  }));\n\n  if (!isVisible && metrics.status === \"online\" && !persistentMode) {\n    return null;\n  }\n\n  const positionStyles = {\n    top: { top: 50 },\n    bottom: { bottom: 100 },\n    inline: {},\n  };\n\n  const renderMinimal = () => (\n    <Animated.View style={[styles.minimalContainer, positionStyles[position], animatedStyle, style]}>\n      <Animated.View style={[styles.minimalDot, { backgroundColor: statusColors[metrics.status] }, dotAnimatedStyle]} />\n      {metrics.status === \"offline\" && <Text style={[styles.minimalText, { color: theme.colors.error }]}>Offline</Text>}\n    </Animated.View>\n  );\n\n  const renderFull = () => (\n    <Animated.View\n      style={[\n        styles.container,\n        positionStyles[position],\n        { backgroundColor: theme.colors.surfaceLight },\n        animatedStyle,\n        style,\n      ]}\n      entering={SlideInUp.duration(300).springify()}\n      exiting={SlideOutUp.duration(300).springify()}\n    >\n      <View style={styles.content}>\n        <View style={styles.statusSection}>\n          <Animated.View\n            style={[styles.statusDot, { backgroundColor: statusColors[metrics.status] }, dotAnimatedStyle]}\n          />\n          <Ionicons\n            name={qualityIcons[metrics.quality] as any}\n            size={20}\n            color={statusColors[metrics.status]}\n            style={styles.icon}\n          />\n          <View style={styles.textContainer}>\n            <Text style={[styles.statusText, { color: theme.colors.text }]}>{metrics.details}</Text>\n            {showBandwidth && bandwidthMbps && (\n              <Text style={[styles.bandwidthText, { color: theme.colors.textSecondary }]}>\n                {bandwidthMbps.toFixed(1)} Mbps\n              </Text>\n            )}\n          </View>\n        </View>\n\n        {showRetryButton && metrics.status !== \"online\" && (\n          <AnimatedPressable\n            onPress={handleRetry}\n            style={[styles.retryButton, retryAnimatedStyle]}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"Retry connection\"\n          >\n            <Ionicons name=\"refresh\" size={18} color={theme.colors.primary} />\n          </AnimatedPressable>\n        )}\n      </View>\n\n      {metrics.status === \"reconnecting\" && (\n        <View style={styles.progressBar}>\n          <Animated.View style={[styles.progressFill, { backgroundColor: theme.colors.primary }]} />\n        </View>\n      )}\n    </Animated.View>\n  );\n\n  return minimalMode ? renderMinimal() : renderFull();\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: \"absolute\",\n    left: 16,\n    right: 16,\n    borderRadius: 12,\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 5,\n    overflow: \"hidden\",\n    zIndex: 1000,\n  },\n  content: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  statusSection: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    flex: 1,\n  },\n  statusDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    marginRight: 8,\n  },\n  icon: {\n    marginRight: 8,\n  },\n  textContainer: {\n    flex: 1,\n  },\n  statusText: {\n    fontSize: 14,\n    fontWeight: \"500\",\n  },\n  bandwidthText: {\n    fontSize: 12,\n    marginTop: 2,\n  },\n  retryButton: {\n    padding: 8,\n    borderRadius: 20,\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n  },\n  progressBar: {\n    height: 2,\n    backgroundColor: \"rgba(0, 0, 0, 0.1)\",\n  },\n  progressFill: {\n    height: \"100%\",\n    width: \"30%\",\n  },\n  minimalContainer: {\n    position: \"absolute\",\n    right: 16,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 8,\n    borderRadius: 20,\n    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n    zIndex: 1000,\n  },\n  minimalDot: {\n    width: 6,\n    height: 6,\n    borderRadius: 3,\n  },\n  minimalText: {\n    fontSize: 12,\n    fontWeight: \"500\",\n    marginLeft: 6,\n    color: \"white\",\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/NotificationSkeleton.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'shimmer'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [shimmer]","fix":{"range":[612,614],"text":"[shimmer]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/OnboardingSlide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/OptimizedAdBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/OptimizedTikTokVideoFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GestureDetector' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useVideoFeedGestures' is defined but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VideoErrorCode' is defined but never used.","line":33,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VideoErrorSeverity' is defined but never used.","line":33,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VideoLoadResult' is defined but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAX_RETRY_ATTEMPTS' is assigned a value but never used.","line":54,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNetworkStatus' is assigned a value but never used.","line":70,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'videos.length'. Either include it or remove the dependency array.","line":209,"column":5,"nodeType":"ArrayExpression","endLine":209,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [retryAttempts, videos.length]","fix":{"range":[7709,7724],"text":"[retryAttempts, videos.length]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'hydrateVideos', 'isLoading', and 'videos.length'. Either include them or remove the dependency array.","line":225,"column":6,"nodeType":"ArrayExpression","endLine":225,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [hydrateVideos, isLoading, videos.length]","fix":{"range":[8177,8179],"text":"[hydrateVideos, isLoading, videos.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":241,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":252,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":263,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'videos'. Either include it or remove the dependency array.","line":292,"column":6,"nodeType":"ArrayExpression","endLine":292,"endColumn":70,"suggestions":[{"desc":"Update the dependencies array to be: [activeIndex, videoPlayer, isFocused, videos.length, playPlayer, videos]","fix":{"range":[9637,9701],"text":"[activeIndex, videoPlayer, isFocused, videos.length, playPlayer, videos]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  ActivityIndicator,\n  Dimensions,\n  RefreshControl,\n  StatusBar,\n  Text,\n  View,\n  Pressable,\n  AppState,\n} from \"react-native\";\nimport { FlatList } from \"react-native\";\nimport type { ViewToken } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { GestureDetector } from \"react-native-gesture-handler\";\nimport Animated, { useAnimatedStyle, withTiming, useSharedValue } from \"react-native-reanimated\";\nimport { useVideoPlayer, VideoPlayer } from \"expo-video\";\nimport * as Haptics from \"expo-haptics\";\n\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport OptimizedVideoItem from \"./OptimizedVideoItem\";\nimport VideoFeedSkeleton from \"./VideoFeedSkeleton\";\nimport NetworkStatusIndicator from \"./NetworkStatusIndicator\";\nimport SimpleCommentModal from \"./SimpleCommentModal\";\nimport { Share } from \"react-native\";\nimport { generateConfessionLink, generateShareMessage } from \"../utils/links\";\nimport { VideoDataService } from \"../services/VideoDataService\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport type { Confession } from \"../types/confession\";\nimport { useVideoFeedGestures } from \"../hooks/useVideoFeedGestures\";\nimport { isOnline, setOnline } from \"../lib/offlineQueue\";\nimport { VideoLoadError, VideoErrorCode, VideoErrorSeverity } from \"../types/videoErrors\";\n\ninterface OptimizedTikTokVideoFeedProps {\n  onClose?: () => void;\n  initialIndex?: number;\n}\n\ninterface VideoLoadResult {\n  success: boolean;\n  videos: Confession[];\n  error?: VideoLoadError;\n  shouldRetry: boolean;\n}\n\n// Single video player approach - only one player at a time\nconst FALLBACK_VIDEOS = [\n  \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n  \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4\",\n];\n\nconst { height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\nconst MAX_RETRY_ATTEMPTS = 3;\n\nconst viewabilityConfig = {\n  itemVisiblePercentThreshold: 80,\n  minimumViewTime: 120,\n  waitForInteraction: false,\n};\n\nexport default function OptimizedTikTokVideoFeed({ onClose, initialIndex = 0 }: OptimizedTikTokVideoFeedProps) {\n  const isFocused = useIsFocused();\n  const flatListRef = useRef<FlatList<Confession>>(null);\n  const [videos, setVideos] = useState<Confession[]>([]);\n  const [activeIndex, setActiveIndex] = useState(initialIndex);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [networkStatus, setNetworkStatus] = useState(isOnline());\n  const [retryAttempts, setRetryAttempts] = useState(0);\n  const scrollOffset = useSharedValue(0);\n  const hasInitializedScroll = useRef(false);\n  const loadingRef = useRef(false);\n  const appStateRef = useRef(AppState.currentState);\n  const fallbackVideoIndex = useRef(0);\n\n  const userPreferences = useConfessionStore((state) => state.userPreferences);\n  const [muted, setMuted] = useState(!userPreferences.sound_enabled);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const activeIndexRef = useRef(activeIndex);\n\n  // Comment state\n  const [commentModalVisible, setCommentModalVisible] = useState(false);\n  const [currentVideoId, setCurrentVideoId] = useState<string | null>(null);\n\n  // Single video player for current video only\n  const activeSource = useMemo(() => {\n    if (!videos.length || activeIndex < 0 || activeIndex >= videos.length) {\n      return FALLBACK_VIDEOS[fallbackVideoIndex.current % FALLBACK_VIDEOS.length];\n    }\n\n    const video = videos[activeIndex];\n    if (!video || typeof video !== \"object\" || !video.videoUri) {\n      return FALLBACK_VIDEOS[fallbackVideoIndex.current % FALLBACK_VIDEOS.length];\n    }\n\n    return video.videoUri;\n  }, [activeIndex, videos]);\n\n  // Single video player instance\n  const videoPlayer: VideoPlayer | null = useVideoPlayer(activeSource, (player) => {\n    if (!player) {\n      console.log(\"Video player is null for source:\", activeSource);\n      return;\n    }\n\n    try {\n      player.loop = true;\n      player.volume = muted ? 0 : 1;\n      console.log(\"Video player configured for:\", activeSource);\n    } catch (error) {\n      console.warn(\"Video player configuration error:\", error);\n    }\n  });\n\n  const videoPlayerRef = useRef<VideoPlayer | null>(null);\n\n  useEffect(() => {\n    videoPlayerRef.current = videoPlayer;\n  }, [videoPlayer]);\n\n  // Load videos with better error handling\n  const hydrateVideos = useCallback(\n    async (isRefresh = false, append = false) => {\n      if (loadingRef.current && !append) {\n        return;\n      }\n\n      loadingRef.current = true;\n      setError(null);\n      // Only show loading spinner if we don't have any videos yet\n      if (!isRefresh && !append && videos.length === 0) {\n        setIsLoading(true);\n      }\n      if (isRefresh) {\n        setIsRefreshing(true);\n      }\n\n      try {\n        const [confessions, trending] = await Promise.all([\n          VideoDataService.fetchVideoConfessions(append ? 10 : 20),\n          append ? Promise.resolve([]) : VideoDataService.fetchTrendingVideos(24, 10),\n        ]);\n\n        // Ensure both arrays are valid before spreading\n        const safeConfessions = Array.isArray(confessions) ? confessions : [];\n        const safeTrending = Array.isArray(trending) ? trending : [];\n\n        const combined = [...safeTrending, ...safeConfessions].filter(\n          (item) => item && typeof item === \"object\" && item.id && item.videoUri,\n        );\n\n        console.log(\"OptimizedTikTokVideoFeed: Raw confessions:\", safeConfessions.length);\n        console.log(\"OptimizedTikTokVideoFeed: Raw trending:\", safeTrending.length);\n        console.log(\"OptimizedTikTokVideoFeed: Combined after filter:\", combined.length);\n        console.log(\"OptimizedTikTokVideoFeed: Sample items:\", combined.slice(0, 2));\n\n        if (combined.length > 0) {\n          setVideos((prevVideos) => {\n            const dedupedMap = new Map<string, Confession>();\n\n            // Add existing videos first if appending\n            if (append) {\n              for (const item of prevVideos) {\n                if (item?.id) {\n                  dedupedMap.set(item.id, item);\n                }\n              }\n            }\n\n            for (const item of combined) {\n              dedupedMap.set(item.id, item);\n            }\n\n            const result = Array.from(dedupedMap.values());\n\n            if (!append) {\n              setActiveIndex((prev) => {\n                if (isRefresh) return 0;\n                return Math.min(prev, result.length - 1);\n              });\n              setIsPlaying(false);\n            }\n\n            console.log(\"OptimizedTikTokVideoFeed: Successfully loaded\", result.length, \"videos\");\n            return result;\n          });\n\n          VideoDataService.flushAllEvents();\n          setRetryAttempts(0); // Reset retry attempts on success\n          setError(null); // Clear any previous errors\n        } else {\n          const online = isOnline();\n          const attemptNum = retryAttempts + 1;\n          setRetryAttempts(attemptNum);\n          console.log(\"OptimizedTikTokVideoFeed: No videos found, online:\", online);\n          setError(online ? \"No videos available right now\" : \"No internet connection\");\n        }\n      } catch (err) {\n        console.error(\"OptimizedTikTokVideoFeed: failed to load videos\", err);\n        setError(\"An unexpected error occurred. Please try again.\");\n      } finally {\n        loadingRef.current = false;\n        setIsLoading(false);\n        setIsRefreshing(false);\n      }\n    },\n    [retryAttempts],\n  );\n\n  useEffect(() => {\n    hydrateVideos(false);\n\n    // Add a timeout to prevent infinite loading\n    const loadingTimeout = setTimeout(() => {\n      if (isLoading && !videos.length) {\n        console.log(\"OptimizedTikTokVideoFeed: Loading timeout reached\");\n        setIsLoading(false);\n        setError(\"Loading took too long. Please try again.\");\n      }\n    }, 10000); // 10 second timeout\n\n    return () => clearTimeout(loadingTimeout);\n  }, []);\n\n  useEffect(() => {\n    activeIndexRef.current = activeIndex;\n  }, [activeIndex]);\n\n  useEffect(() => {\n    setMuted(!userPreferences.sound_enabled);\n  }, [userPreferences.sound_enabled]);\n\n  useEffect(() => {\n    if (!videoPlayer) return;\n\n    try {\n      videoPlayer.muted = muted;\n      videoPlayer.volume = muted ? 0 : 1;\n    } catch (error) {\n      // Ignore disposal errors\n    }\n  }, [videoPlayer, muted]);\n\n  const pausePlayer = useCallback(() => {\n    if (!videoPlayer) return;\n\n    try {\n      videoPlayer.pause?.();\n      setIsPlaying(false);\n    } catch (error) {\n      // Ignore disposal errors\n    }\n  }, [videoPlayer]);\n\n  const playPlayer = useCallback(() => {\n    if (!videoPlayer) return;\n\n    try {\n      videoPlayer.play?.();\n      setIsPlaying(true);\n    } catch (error) {\n      // Ignore disposal errors\n    }\n  }, [videoPlayer]);\n\n  useEffect(() => {\n    if (!videoPlayer) return;\n\n    if (!isFocused || !videos.length || appStateRef.current !== \"active\") {\n      pausePlayer();\n      return;\n    }\n\n    playPlayer();\n  }, [videoPlayer, isFocused, videos.length, pausePlayer, playPlayer]);\n\n  useEffect(() => {\n    if (!videoPlayer || !isFocused || !videos.length || appStateRef.current !== \"active\") {\n      return;\n    }\n\n    setIsPlaying(false);\n    playPlayer();\n\n    // Track video view\n    const currentVideo = videos[activeIndex];\n    if (currentVideo) {\n      VideoDataService.updateVideoViews(currentVideo.id);\n    }\n  }, [activeIndex, videoPlayer, isFocused, videos.length, playPlayer]);\n\n  useEffect(() => {\n    if (!videos.length || hasInitializedScroll.current) {\n      return;\n    }\n\n    hasInitializedScroll.current = true;\n    if (initialIndex > 0) {\n      requestAnimationFrame(() => {\n        flatListRef.current?.scrollToIndex({ index: initialIndex, animated: false });\n      });\n    }\n  }, [initialIndex, videos.length]);\n\n  const handleRefresh = useCallback(() => {\n    setOnline(true);\n    hydrateVideos(true);\n  }, [hydrateVideos]);\n\n  const handleSingleTap = useCallback(() => {\n    if (isPlaying) {\n      pausePlayer();\n    } else {\n      playPlayer();\n    }\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n  }, [isPlaying, pausePlayer, playPlayer]);\n\n  const handleViewableItemsChangedRef = useRef(({ viewableItems }: { viewableItems: ViewToken[] }) => {\n    if (!viewableItems?.length) return;\n\n    const visibleItem = viewableItems.find((item) => item.isViewable && typeof item.index === \"number\");\n    if (visibleItem && typeof visibleItem.index === \"number\" && visibleItem.index !== activeIndexRef.current) {\n      setActiveIndex(visibleItem.index);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n    }\n  });\n\n  // Handle comment press\n  const handleCommentPress = useCallback(\n    (confessionId: string) => {\n      try {\n        // Pause video when opening comments\n        if (videoPlayer) {\n          videoPlayer.pause();\n          setIsPlaying(false);\n        }\n\n        setCurrentVideoId(confessionId);\n        setCommentModalVisible(true);\n      } catch (error) {\n        console.error(\"Failed to open comments:\", error);\n      }\n    },\n    [videoPlayer],\n  );\n\n  const handleCloseComments = useCallback(() => {\n    setCommentModalVisible(false);\n    setCurrentVideoId(null);\n  }, []);\n\n  // Handle share press\n  const handleSharePress = useCallback(async (confessionId: string, confessionText: string) => {\n    try {\n      const shareUrl = generateConfessionLink(confessionId);\n      const shareMessage = generateShareMessage(confessionText, confessionId);\n\n      await Share.share({\n        message: shareMessage,\n        url: shareUrl,\n      });\n\n      // Track share event\n      VideoDataService.trackVideoEvent(confessionId, {\n        type: \"share\",\n        timestamp: Date.now(),\n      });\n\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n    } catch (error) {\n      console.error(\"Failed to share:\", error);\n    }\n  }, []);\n\n  const renderItem = useCallback(\n    ({ item, index }: { item: Confession; index: number }) => {\n      const isItemActive = index === activeIndex && isFocused;\n\n      return (\n        <OptimizedVideoItem\n          confession={item}\n          isActive={isItemActive}\n          videoPlayer={isItemActive ? videoPlayer : null}\n          onClose={onClose}\n          muted={muted}\n          onToggleMute={() => setMuted((prev) => !prev)}\n          isPlaying={isItemActive ? isPlaying : false}\n          onSingleTap={handleSingleTap}\n          onCommentPress={handleCommentPress}\n          onSharePress={handleSharePress}\n          networkStatus={networkStatus}\n        />\n      );\n    },\n    [\n      activeIndex,\n      isFocused,\n      isPlaying,\n      muted,\n      onClose,\n      videoPlayer,\n      handleSingleTap,\n      handleCommentPress,\n      handleSharePress,\n      networkStatus,\n    ],\n  );\n\n  const errorOpacity = useAnimatedStyle(() => ({\n    opacity: withTiming(error && !videos.length ? 1 : 0, { duration: 300 }),\n  }));\n\n  console.log(\n    \"OptimizedTikTokVideoFeed render: isLoading=\",\n    isLoading,\n    \"videos.length=\",\n    videos.length,\n    \"error=\",\n    error,\n  );\n\n  // Show loading only if we have no videos AND we're actually loading\n  if (isLoading && videos.length === 0) {\n    return (\n      <>\n        <VideoFeedSkeleton\n          isVisible={true}\n          state=\"initial\"\n          showNetworkStatus={!networkStatus}\n          animationTiming={{ fade: 400, stagger: 100 }}\n        />\n        <NetworkStatusIndicator\n          position=\"top\"\n          minimalMode={false}\n          persistentMode={!networkStatus}\n          scrollOffset={scrollOffset}\n          onRetry={handleRefresh}\n        />\n      </>\n    );\n  }\n\n  if (error && !videos.length) {\n    return (\n      <>\n        <VideoFeedSkeleton\n          isVisible={true}\n          state=\"initial\"\n          showErrorIndicator={true}\n          showNetworkStatus={!networkStatus}\n        />\n        <Animated.View style={[styles.centeredContainer, errorOpacity]}>\n          <StatusBar hidden />\n          <Ionicons name=\"cloud-offline-outline\" size={48} color=\"#ff6666\" />\n          <Text style={styles.errorTitle}>Oops!</Text>\n          <Text style={styles.centeredText}>{error}</Text>\n          <Pressable\n            style={styles.primaryButton}\n            onPress={handleRefresh}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"Retry loading videos\"\n          >\n            <Text style={styles.primaryButtonText}>Retry</Text>\n          </Pressable>\n        </Animated.View>\n      </>\n    );\n  }\n\n  if (!videos.length) {\n    return (\n      <View style={styles.centeredContainer}>\n        <StatusBar hidden />\n        <Ionicons name=\"videocam-off-outline\" size={48} color=\"#555555\" />\n        <Text style={styles.centeredText}>No videos available right now</Text>\n        <Text style={styles.centeredMeta}>Pull down to refresh</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ErrorBoundary resetKeys={[videos.length, activeIndex]}>\n      <View style={styles.feedContainer}>\n        <StatusBar hidden />\n        <FlatList\n          ref={flatListRef}\n          data={videos}\n          renderItem={renderItem}\n          keyExtractor={(item) => item.id}\n          onViewableItemsChanged={handleViewableItemsChangedRef.current}\n          viewabilityConfig={viewabilityConfig}\n          pagingEnabled\n          snapToInterval={SCREEN_HEIGHT}\n          snapToAlignment=\"start\"\n          decelerationRate=\"fast\"\n          showsVerticalScrollIndicator={false}\n          removeClippedSubviews\n          refreshControl={\n            <RefreshControl\n              tintColor=\"#ffffff\"\n              colors={[\"#ffffff\"]}\n              refreshing={isRefreshing}\n              onRefresh={handleRefresh}\n              progressViewOffset={20}\n            />\n          }\n          ListFooterComponent={\n            isRefreshing && videos.length > 0 ? (\n              <ActivityIndicator color=\"#ffffff\" style={styles.footerSpinner} />\n            ) : null\n          }\n          getItemLayout={(data, index) => ({\n            length: SCREEN_HEIGHT,\n            offset: SCREEN_HEIGHT * index,\n            index,\n          })}\n        />\n        <NetworkStatusIndicator position=\"top\" minimalMode={true} autoHideDelay={3000} scrollOffset={scrollOffset} />\n      </View>\n\n      {/* Comment Modal */}\n      <SimpleCommentModal\n        visible={commentModalVisible}\n        onClose={handleCloseComments}\n        confessionId={currentVideoId || \"\"}\n      />\n    </ErrorBoundary>\n  );\n}\n\nconst styles = {\n  feedContainer: {\n    flex: 1,\n    backgroundColor: \"#000000\",\n  },\n  centeredContainer: {\n    flex: 1,\n    backgroundColor: \"#000000\",\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n    paddingHorizontal: 24,\n  },\n  centeredText: {\n    color: \"#ffffff\",\n    marginTop: 16,\n    textAlign: \"center\" as const,\n    fontSize: 16,\n    fontWeight: \"500\" as const,\n  },\n  centeredMeta: {\n    color: \"#aaaaaa\",\n    marginTop: 8,\n    textAlign: \"center\" as const,\n    fontSize: 14,\n  },\n  errorTitle: {\n    color: \"#ffffff\",\n    fontSize: 20,\n    fontWeight: \"700\" as const,\n    marginTop: 12,\n    marginBottom: 8,\n  },\n  primaryButton: {\n    marginTop: 24,\n    paddingHorizontal: 36,\n    paddingVertical: 14,\n    borderRadius: 24,\n    backgroundColor: \"#3B82F6\",\n  },\n  primaryButtonText: {\n    color: \"#ffffff\",\n    fontWeight: \"600\" as const,\n    fontSize: 16,\n  },\n  footerSpinner: {\n    paddingVertical: 24,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/OptimizedVideoItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'interpolate' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCommentUpdate' is assigned a value but never used.","line":201,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { View, Text, Pressable, Dimensions, StyleSheet } from \"react-native\";\nimport { VideoView, VideoPlayer, VideoPlayerStatus } from \"expo-video\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n  withTiming,\n  interpolate,\n} from \"react-native-reanimated\";\nimport { format, isValid } from \"date-fns\";\nimport * as Haptics from \"expo-haptics\";\n\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { VideoDataService } from \"../services/VideoDataService\";\nimport type { Confession } from \"../types/confession\";\nimport { offlineQueue, OFFLINE_ACTIONS } from \"../utils/offlineQueue\";\n\nconst { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get(\"window\");\n\nconst FALLBACK_USERNAME = \"@anonymous\";\nconst DOUBLE_TAP_MAX_DELAY = 280;\n\nconst formatTimestamp = (timestamp: number) => {\n  const date = new Date(timestamp);\n  if (!isValid(date)) {\n    return \"Just now\";\n  }\n  return format(date, \"MMM d, h:mm a\");\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\ninterface OptimizedVideoItemProps {\n  confession: Confession;\n  isActive: boolean;\n  onClose?: () => void;\n  videoPlayer: VideoPlayer | null;\n  muted: boolean;\n  onToggleMute: () => void;\n  isPlaying: boolean;\n  onSingleTap?: () => void;\n  onCommentPress?: (confessionId: string) => void;\n  onSharePress?: (confessionId: string, confessionText: string) => void;\n  networkStatus?: boolean;\n}\n\nexport default function OptimizedVideoItem({\n  confession,\n  isActive,\n  onClose,\n  videoPlayer,\n  muted,\n  onToggleMute,\n  isPlaying,\n  onSingleTap,\n  onCommentPress,\n  onSharePress,\n  networkStatus = true,\n}: OptimizedVideoItemProps) {\n  const toggleLike = useConfessionStore((state) => state.toggleLike);\n\n  const [isLiked, setIsLiked] = useState(Boolean(confession.isLiked));\n  const [likesCount, setLikesCount] = useState(confession.likes || 0);\n  const [viewsCount, setViewsCount] = useState(confession.views || 0);\n  const [commentCount, setCommentCount] = useState(0);\n  const [videoError, setVideoError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const likeInFlightRef = useRef(false);\n  const viewTrackedRef = useRef(false);\n  const lastTapRef = useRef(0);\n\n  // Animation values\n  const likeScale = useSharedValue(1);\n  const heartOpacity = useSharedValue(0);\n  const heartScale = useSharedValue(0.5);\n\n  // Monitor player status to update loading/error state\n  useEffect(() => {\n    if (!videoPlayer) {\n      return;\n    }\n\n    const applyStatus = (status: VideoPlayerStatus, error?: { message?: string }) => {\n      if (status === \"readyToPlay\") {\n        setIsLoading(false);\n        setVideoError(false);\n      } else if (status === \"loading\" || status === \"idle\") {\n        setIsLoading(true);\n      } else if (status === \"error\") {\n        setIsLoading(false);\n        setVideoError(true);\n        if (__DEV__ && error?.message) {\n          console.warn(\"OptimizedVideoItem: Video status error\", error.message);\n        }\n      }\n    };\n\n    // Apply current status immediately\n    applyStatus(videoPlayer.status as VideoPlayerStatus);\n\n    const statusSubscription = videoPlayer.addListener(\"statusChange\", ({ status, error }: any) => {\n      applyStatus(status as VideoPlayerStatus, error);\n    });\n\n    const sourceSubscription = videoPlayer.addListener(\"sourceChange\", () => {\n      setIsLoading(true);\n      setVideoError(false);\n    });\n\n    return () => {\n      statusSubscription.remove();\n      sourceSubscription.remove();\n    };\n  }, [videoPlayer]);\n\n  // Track video view when it becomes active\n  useEffect(() => {\n    if (isActive && !viewTrackedRef.current) {\n      viewTrackedRef.current = true;\n      VideoDataService.updateVideoViews(confession.id);\n      setViewsCount((prev) => prev + 1);\n    } else if (!isActive) {\n      viewTrackedRef.current = false;\n    }\n  }, [isActive, confession.id]);\n\n  // Load comment count\n  useEffect(() => {\n    const loadCommentCount = async () => {\n      try {\n        const count = await VideoDataService.getCommentCount(confession.id);\n        setCommentCount(count);\n      } catch (error) {\n        console.warn(\"Failed to load comment count:\", error);\n      }\n    };\n\n    loadCommentCount();\n  }, [confession.id]);\n\n  // Handle like action\n  const handleLike = useCallback(async () => {\n    if (likeInFlightRef.current) return;\n\n    likeInFlightRef.current = true;\n    const wasLiked = isLiked;\n    const newLikedState = !wasLiked;\n    const newLikesCount = wasLiked ? likesCount - 1 : likesCount + 1;\n\n    // Optimistic update\n    setIsLiked(newLikedState);\n    setLikesCount(newLikesCount);\n\n    // Animate like button\n    likeScale.value = withSpring(1.2, { duration: 150 }, () => {\n      likeScale.value = withSpring(1, { duration: 150 });\n    });\n\n    // Show heart animation for likes\n    if (newLikedState) {\n      heartOpacity.value = withTiming(1, { duration: 200 });\n      heartScale.value = withSpring(1.5, { duration: 300 }, () => {\n        heartOpacity.value = withTiming(0, { duration: 500 });\n        heartScale.value = 0.5;\n      });\n    }\n\n    try {\n      if (offlineQueue.getNetworkStatus()) {\n        await toggleLike(confession.id);\n      } else {\n        await offlineQueue.enqueue(\n          newLikedState ? OFFLINE_ACTIONS.LIKE_CONFESSION : OFFLINE_ACTIONS.UNLIKE_CONFESSION,\n          { confessionId: confession.id },\n        );\n      }\n\n      // Haptic feedback\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(() => undefined);\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      // Revert optimistic update on error\n      setIsLiked(wasLiked);\n      setLikesCount(likesCount);\n    } finally {\n      likeInFlightRef.current = false;\n    }\n  }, [isLiked, likesCount, confession.id, toggleLike, likeScale, heartOpacity, heartScale]);\n\n  // Handle comment action\n  const handleComment = useCallback(() => {\n    if (onCommentPress) {\n      onCommentPress(confession.id);\n    }\n  }, [onCommentPress, confession.id]);\n\n  // Listen for comment updates to refresh count\n  const handleCommentUpdate = useCallback(() => {\n    VideoDataService.getCommentCount(confession.id).then(setCommentCount);\n  }, [confession.id]);\n\n  // Handle share action\n  const handleShare = useCallback(() => {\n    if (onSharePress) {\n      onSharePress(confession.id, confession.content);\n    }\n  }, [onSharePress, confession.id, confession.content]);\n\n  // Handle double tap for like\n  const handleDoubleTap = useCallback(() => {\n    const now = Date.now();\n    const timeSinceLastTap = now - lastTapRef.current;\n    lastTapRef.current = now;\n\n    if (timeSinceLastTap < DOUBLE_TAP_MAX_DELAY) {\n      handleLike();\n    } else if (onSingleTap) {\n      // Delay single tap to allow for potential double tap\n      setTimeout(() => {\n        const timeSinceThisTap = Date.now() - lastTapRef.current;\n        if (timeSinceThisTap >= DOUBLE_TAP_MAX_DELAY) {\n          onSingleTap();\n        }\n      }, DOUBLE_TAP_MAX_DELAY);\n    }\n  }, [handleLike, onSingleTap]);\n\n  // Video loading handlers\n  // Animated styles\n  const likeButtonStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: likeScale.value }],\n  }));\n\n  const heartAnimationStyle = useAnimatedStyle(() => ({\n    opacity: heartOpacity.value,\n    transform: [{ scale: heartScale.value }],\n  }));\n\n  const playButtonOpacity = useAnimatedStyle(() => ({\n    opacity: withTiming(isActive && !isPlaying && !isLoading ? 1 : 0, { duration: 300 }),\n  }));\n\n  const loadingOpacity = useAnimatedStyle(() => ({\n    opacity: withTiming(isLoading ? 1 : 0, { duration: 300 }),\n  }));\n\n  return (\n    <View style={styles.container}>\n      {/* Video Player */}\n      <AnimatedPressable style={styles.videoContainer} onPress={handleDoubleTap}>\n        {isActive && videoPlayer && !videoError ? (\n          <VideoView\n            style={styles.video}\n            player={videoPlayer}\n            allowsFullscreen={false}\n            allowsPictureInPicture={false}\n            fullscreenOptions={{ enable: false }}\n          />\n        ) : (\n          <View style={styles.videoPlaceholder}>\n            <Ionicons name=\"videocam-outline\" size={64} color=\"#666666\" />\n          </View>\n        )}\n\n        {/* Loading Indicator */}\n        <Animated.View style={[styles.loadingContainer, loadingOpacity]}>\n          <View style={styles.loadingSpinner} />\n        </Animated.View>\n\n        {/* Play Button */}\n        <Animated.View style={[styles.playButtonContainer, playButtonOpacity]}>\n          <Pressable style={styles.playButton} onPress={onSingleTap}>\n            <Ionicons name=\"play\" size={32} color=\"#ffffff\" />\n          </Pressable>\n        </Animated.View>\n\n        {/* Heart Animation */}\n        <Animated.View style={[styles.heartAnimation, heartAnimationStyle]}>\n          <Ionicons name=\"heart\" size={80} color=\"#ff3040\" />\n        </Animated.View>\n\n        {/* Video Overlay */}\n        <LinearGradient colors={[\"transparent\", \"rgba(0,0,0,0.3)\", \"rgba(0,0,0,0.8)\"]} style={styles.overlay} />\n      </AnimatedPressable>\n\n      {/* Content Overlay */}\n      <View style={styles.contentOverlay}>\n        {/* Close Button */}\n        {onClose && (\n          <Pressable style={styles.closeButton} onPress={onClose}>\n            <Ionicons name=\"close\" size={24} color=\"#ffffff\" />\n          </Pressable>\n        )}\n\n        {/* Bottom Content */}\n        <View style={styles.bottomContent}>\n          {/* Left Content */}\n          <View style={styles.leftContent}>\n            <Text style={styles.username}>{FALLBACK_USERNAME}</Text>\n            <Text style={styles.content} numberOfLines={3}>\n              {confession.content}\n            </Text>\n            <Text style={styles.timestamp}>{formatTimestamp(confession.timestamp)}</Text>\n          </View>\n        </View>\n\n        {/* Right Actions - Positioned Absolutely */}\n        <View style={styles.rightActions}>\n          {/* Like Button */}\n          <AnimatedPressable style={[styles.actionButton, likeButtonStyle]} onPress={handleLike}>\n            <Ionicons name={isLiked ? \"heart\" : \"heart-outline\"} size={28} color={isLiked ? \"#ff3040\" : \"#ffffff\"} />\n            <Text style={styles.actionText}>{likesCount}</Text>\n          </AnimatedPressable>\n\n          {/* Comment Button */}\n          <Pressable style={styles.actionButton} onPress={handleComment}>\n            <Ionicons name=\"chatbubble-outline\" size={28} color=\"#ffffff\" />\n            <Text style={styles.actionText}>{commentCount}</Text>\n          </Pressable>\n\n          {/* Share Button */}\n          <Pressable style={styles.actionButton} onPress={handleShare}>\n            <Ionicons name=\"arrow-redo-outline\" size={28} color=\"#ffffff\" />\n            <Text style={styles.actionText}>Share</Text>\n          </Pressable>\n\n          {/* Views */}\n          <View style={styles.actionButton}>\n            <Ionicons name=\"eye-outline\" size={28} color=\"#ffffff\" />\n            <Text style={styles.actionText}>{viewsCount}</Text>\n          </View>\n\n          {/* Mute Button */}\n          <Pressable style={styles.actionButton} onPress={onToggleMute}>\n            <Ionicons name={muted ? \"volume-mute\" : \"volume-high\"} size={28} color=\"#ffffff\" />\n          </Pressable>\n\n          {/* Network Status */}\n          {!networkStatus && (\n            <View style={styles.actionButton}>\n              <Ionicons name=\"cloud-offline-outline\" size={24} color=\"#ff6666\" />\n            </View>\n          )}\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    backgroundColor: \"#000000\",\n  },\n  videoContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  video: {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n  },\n  videoPlaceholder: {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#1a1a1a\",\n  },\n  overlay: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    height: 200,\n  },\n  contentOverlay: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    justifyContent: \"space-between\",\n  },\n  closeButton: {\n    position: \"absolute\",\n    top: 60,\n    right: 20,\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  bottomContent: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    paddingHorizontal: 20,\n    paddingBottom: 30,\n  },\n  leftContent: {\n    maxWidth: \"75%\",\n  },\n  username: {\n    color: \"#ffffff\",\n    fontSize: 15,\n    fontWeight: \"700\",\n    marginBottom: 6,\n  },\n  content: {\n    color: \"#ffffff\",\n    fontSize: 15,\n    lineHeight: 22,\n    marginBottom: 8,\n    fontWeight: \"400\",\n  },\n  timestamp: {\n    color: \"rgba(255,255,255,0.7)\",\n    fontSize: 13,\n    fontWeight: \"400\",\n  },\n  rightActions: {\n    position: \"absolute\",\n    right: 15,\n    bottom: 100,\n    alignItems: \"center\",\n    gap: 20,\n  },\n  actionButton: {\n    alignItems: \"center\",\n    gap: 4,\n    minWidth: 48,\n    paddingVertical: 6,\n  },\n  actionText: {\n    color: \"#ffffff\",\n    fontSize: 12,\n    fontWeight: \"600\",\n    textAlign: \"center\",\n  },\n  loadingContainer: {\n    position: \"absolute\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingSpinner: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    borderWidth: 3,\n    borderColor: \"#ffffff\",\n    borderTopColor: \"transparent\",\n  },\n  playButtonContainer: {\n    position: \"absolute\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  playButton: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: \"rgba(0,0,0,0.6)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  heartAnimation: {\n    position: \"absolute\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/OptimizedVideoList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pressable' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Animated' is defined but never used.","line":14,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAnimatedStyle' is defined but never used.","line":14,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'withTiming' is defined but never used.","line":14,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FadeIn' is defined but never used.","line":14,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FadeOut' is defined but never used.","line":14,"column":74,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'modalOpen' is assigned a value but never used.","line":114,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLoadingMore' is assigned a value but never used.","line":116,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'confessions.length', 'errorOpacity', 'loadConfessions', 'loadingOpacity', 'onError', 'retryAttempts', and 'videoConfessions.length'. Either include them or remove the dependency array. If 'onError' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":176,"column":6,"nodeType":"ArrayExpression","endLine":176,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [confessions.length, errorOpacity, loadConfessions, loadingOpacity, onError, retryAttempts, videoConfessions.length]","fix":{"range":[6756,6758],"text":"[confessions.length, errorOpacity, loadConfessions, loadingOpacity, onError, retryAttempts, videoConfessions.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isPreloading' is assigned a value but never used.","line":351,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":351,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shouldOptimizeRender' is assigned a value but never used.","line":353,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":353,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useRef, useState, useEffect, memo } from \"react\";\nimport {\n  View,\n  Dimensions,\n  StatusBar,\n  NativeSyntheticEvent,\n  NativeScrollEvent,\n  Text,\n  RefreshControl,\n  Pressable,\n} from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming, FadeIn, FadeOut } from \"react-native-reanimated\";\nimport type { Confession } from \"../types/confession\";\nimport { BottomSheetModal } from \"@gorhom/bottom-sheet\";\nimport { useFocusEffect, useIsFocused } from \"@react-navigation/native\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { useSavedStore } from \"../state/savedStore\";\nimport { useGlobalVideoStore } from \"../state/globalVideoStore\";\nimport EnhancedVideoItem from \"./EnhancedVideoItem\";\nimport EnhancedCommentBottomSheet from \"./EnhancedCommentBottomSheet\";\nimport EnhancedShareBottomSheet from \"./EnhancedShareBottomSheet\";\nimport ReportModal from \"./ReportModal\";\nimport VideoFeedSkeleton from \"./VideoFeedSkeleton\";\nimport NetworkStatusIndicator from \"./NetworkStatusIndicator\";\nimport { ErrorState } from \"./ErrorState\";\nimport { LoadingTransitions } from \"../utils/loadingTransitions\";\nimport { VideoErrorMessages, UserFriendlyError } from \"../utils/videoErrorMessages\";\nimport { VideoError, VideoErrorType } from \"../types/videoErrors\";\nimport * as Haptics from \"expo-haptics\";\n\nconst { height: screenHeight, width: screenWidth } = Dimensions.get(\"window\");\n\n// Performance constants\nconst PRELOAD_BUFFER = 2;\nconst VELOCITY_THRESHOLD = 0.5;\nconst CLEANUP_INTERVAL = 30000; // 30 seconds\n\ninterface OptimizedVideoListProps {\n  onClose: () => void;\n  initialIndex?: number;\n  onError?: (error: unknown) => void;\n}\n\nfunction OptimizedVideoList({ onClose, initialIndex = 0, onError }: OptimizedVideoListProps) {\n  const confessions = useConfessionStore((state) => state.confessions);\n  const loadConfessions = useConfessionStore((state) => state.loadConfessions);\n  const isLoading = useConfessionStore((state) => state.isLoading);\n  const videoConfessions = useMemo(() => {\n    const filtered = confessions.filter((c) => c && c.type === \"video\" && c.id);\n\n    // Validate for duplicates and dedupe if necessary\n    if (filtered.length > 0) {\n      const ids = filtered.map((c) => c.id);\n      const duplicates = ids.filter((id, index) => ids.indexOf(id) !== index);\n\n      if (duplicates.length > 0) {\n        if (__DEV__) {\n          console.warn(\"OptimizedVideoList: Duplicate confession IDs detected:\", duplicates);\n        }\n        // Dedupe by ID using Map\n        const uniqueConfessions = Array.from(new Map(filtered.map((item) => [item.id, item])).values());\n        if (__DEV__) {\n          console.log(\n            `OptimizedVideoList: Deduplicated ${filtered.length - uniqueConfessions.length} duplicate confessions`,\n          );\n        }\n        return uniqueConfessions;\n      }\n    }\n\n    return filtered;\n  }, [confessions]);\n\n  const { saveConfession, unsaveConfession, isSaved } = useSavedStore();\n  const { pauseAllVideos } = useGlobalVideoStore();\n\n  const [currentIndex, setCurrentIndex] = useState(initialIndex);\n  const currentIndexRef = useRef(initialIndex);\n  const [scrollVelocity, setScrollVelocity] = useState(0);\n  const [isScrolling, setIsScrolling] = useState(false);\n  const lastScrollTime = useRef(Date.now());\n  const lastScrollY = useRef(0);\n  const preloadedIndexes = useRef<Set<number>>(new Set());\n  const performanceMetrics = useRef({\n    renderCount: 0,\n    scrollEvents: 0,\n    avgVelocity: 0,\n  });\n\n  // Track if this tab is currently focused\n  const isFocused = useIsFocused();\n\n  // Debug focus changes and handle global video pause\n  useEffect(() => {\n    if (__DEV__) console.log(`🎥 OptimizedVideoList: isFocused changed to ${isFocused}`);\n\n    if (!isFocused) {\n      // When tab loses focus, force all video items to pause\n      if (__DEV__) console.log(`🎥 Tab lost focus - forcing all videos to pause`);\n      // Note: FlashList will re-render items based on extraData including isFocused\n    }\n  }, [isFocused]);\n\n  // Bottom sheet refs\n  const commentSheetRef = useRef<BottomSheetModal>(null);\n  const shareSheetRef = useRef<BottomSheetModal>(null);\n\n  // State for current video being interacted with\n  const [currentVideoId, setCurrentVideoId] = useState<string | null>(null);\n  const [currentVideoText, setCurrentVideoText] = useState<string>(\"\");\n  const [reportModalVisible, setReportModalVisible] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [userFriendlyError, setUserFriendlyError] = useState<UserFriendlyError | null>(null);\n  const [retryAttempts, setRetryAttempts] = useState(0);\n\n  // Animated values for loading transitions\n  const scrollOffset = useSharedValue(0);\n  const loadingOpacity = useSharedValue(1);\n  const errorOpacity = useSharedValue(0);\n\n  // Load confessions with enhanced error handling\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        if (__DEV__) {\n          console.log(\"OptimizedVideoList: Loading confessions...\");\n        }\n        // Trigger loading animation\n        LoadingTransitions.fadeIn(loadingOpacity);\n\n        // Always try to load fresh data when the video tab is accessed\n        await loadConfessions();\n\n        // Success animation\n        LoadingTransitions.fadeOut(loadingOpacity, {}, () => {\n          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n        });\n\n        if (__DEV__) {\n          console.log(\n            `OptimizedVideoList: Loaded ${confessions.length} total confessions, ${videoConfessions.length} video confessions`,\n          );\n        }\n      } catch (error: any) {\n        if (__DEV__) {\n          console.error(\"OptimizedVideoList: Failed to load confessions:\", error);\n        }\n\n        // Create user-friendly error\n        const videoError: VideoError = {\n          type: VideoErrorType.NETWORK,\n          code: error.code || \"LOAD_ERROR\",\n          message: error.message || \"Failed to load videos\",\n          timestamp: Date.now(),\n          debugInfo: error.stack,\n        };\n\n        const attemptNum = retryAttempts + 1;\n        setRetryAttempts(attemptNum);\n        const friendlyError = VideoErrorMessages.getUserFriendlyError(videoError, attemptNum);\n\n        setUserFriendlyError(friendlyError);\n        setError(friendlyError.message);\n        LoadingTransitions.createErrorShake(errorOpacity);\n\n        onError?.(error);\n      }\n    };\n\n    loadData();\n  }, []); // Run only on mount\n\n  // Handle screen focus for video playback control\n  useFocusEffect(\n    useCallback(() => {\n      // Screen gains focus - this handles navigation to/from this screen\n      return () => {\n        // Screen loses focus - this handles navigation away from this screen\n      };\n    }, []),\n  );\n\n  // FlashList doesn't need getItemLayout as it handles layout automatically\n\n  // Enhanced viewability changes with intelligent preloading\n  const onViewableItemsChanged = useCallback(\n    ({ viewableItems }: { viewableItems: { item: Confession; isViewable: boolean; index: number | null }[] }) => {\n      const first = viewableItems.find((v) => v.isViewable && v.index !== null) || viewableItems[0];\n      if (first && first.index !== null) {\n        const newIndex = first.index;\n        currentIndexRef.current = newIndex;\n        setCurrentIndex(newIndex);\n\n        // Intelligent preloading based on scroll direction\n        if (Math.abs(scrollVelocity) > VELOCITY_THRESHOLD) {\n          const direction = scrollVelocity > 0 ? 1 : -1;\n          for (let i = 1; i <= PRELOAD_BUFFER; i++) {\n            const preloadIndex = newIndex + i * direction;\n            if (preloadIndex >= 0 && preloadIndex < videoConfessions.length) {\n              preloadedIndexes.current.add(preloadIndex);\n            }\n          }\n        }\n\n        // Cleanup old preloaded indexes\n        if (preloadedIndexes.current.size > PRELOAD_BUFFER * 2) {\n          const toKeep = new Set<number>();\n          for (let i = -PRELOAD_BUFFER; i <= PRELOAD_BUFFER; i++) {\n            const keepIndex = newIndex + i;\n            if (preloadedIndexes.current.has(keepIndex)) {\n              toKeep.add(keepIndex);\n            }\n          }\n          preloadedIndexes.current = toKeep;\n        }\n      }\n    },\n    [scrollVelocity, videoConfessions.length],\n  );\n\n  const viewabilityConfig = useMemo(\n    () => ({\n      itemVisiblePercentThreshold: 60,\n      minimumViewTime: 100,\n      waitForInteraction: false,\n    }),\n    [],\n  );\n\n  // Optimized scroll handler with velocity tracking\n  const handleScroll = useCallback((event: NativeSyntheticEvent<NativeScrollEvent>) => {\n    const currentTime = Date.now();\n    const currentY = event.nativeEvent.contentOffset.y;\n    const timeDelta = currentTime - lastScrollTime.current;\n    const scrollDelta = currentY - lastScrollY.current;\n\n    if (timeDelta > 0) {\n      const velocity = scrollDelta / timeDelta;\n      setScrollVelocity(velocity);\n\n      // Update performance metrics\n      performanceMetrics.current.scrollEvents++;\n      performanceMetrics.current.avgVelocity =\n        (performanceMetrics.current.avgVelocity * (performanceMetrics.current.scrollEvents - 1) + Math.abs(velocity)) /\n        performanceMetrics.current.scrollEvents;\n    }\n\n    lastScrollTime.current = currentTime;\n    lastScrollY.current = currentY;\n  }, []);\n\n  const handleScrollBeginDrag = useCallback(() => {\n    setIsScrolling(true);\n  }, []);\n\n  const handleScrollEndDrag = useCallback(() => {\n    setIsScrolling(false);\n    setScrollVelocity(0);\n  }, []);\n\n  // Handle comment press\n  const handleCommentPress = useCallback(\n    (confessionId: string) => {\n      try {\n        // Pause all videos when opening comments\n        const currentPlayer = videoConfessions.findIndex((v) => v.id === confessionId);\n        if (currentPlayer >= 0) {\n          // Explicitly pause all videos to prevent background playback\n          pauseAllVideos();\n        }\n\n        setCurrentVideoId(confessionId);\n        setModalOpen(true);\n        const video = videoConfessions.find((v) => v.id === confessionId);\n        setCurrentVideoText(video?.transcription || video?.content || \"\");\n        commentSheetRef.current?.present();\n      } catch (error) {\n        onError?.(error);\n        console.error(\"Failed to open comments:\", error);\n      }\n    },\n    [videoConfessions, onError, pauseAllVideos],\n  );\n\n  // Handle share press\n  const handleSharePress = useCallback(\n    (confessionId: string, confessionText: string) => {\n      try {\n        setCurrentVideoId(confessionId);\n        setCurrentVideoText(confessionText);\n        shareSheetRef.current?.present();\n      } catch (error) {\n        onError?.(error);\n        console.error(\"Failed to open share:\", error);\n      }\n    },\n    [onError],\n  );\n\n  // Handle save press\n  const handleSavePress = useCallback(\n    async (confessionId: string) => {\n      try {\n        if (isSaved(confessionId)) {\n          await unsaveConfession(confessionId);\n        } else {\n          await saveConfession(confessionId);\n        }\n      } catch (error) {\n        onError?.(error);\n        console.error(\"Failed to toggle save:\", error);\n      }\n    },\n    [saveConfession, unsaveConfession, isSaved, onError],\n  );\n\n  // Handle report press\n  const handleReportPress = useCallback((confessionId: string, confessionText: string) => {\n    setCurrentVideoId(confessionId);\n    setCurrentVideoText(confessionText);\n    setReportModalVisible(true);\n  }, []);\n\n  const renderItem = useCallback(\n    ({ item, index }: { item: Confession; index: number }) => {\n      // Add null check for item to prevent crashes\n      if (!item || !item.id) {\n        if (__DEV__) {\n          console.warn(`OptimizedVideoList: Invalid item at index ${index}:`, item);\n        }\n        return (\n          <View\n            style={{\n              height: screenHeight,\n              width: screenWidth,\n              backgroundColor: \"black\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Text style={{ color: \"#999\", fontSize: 16 }}>Invalid video data</Text>\n          </View>\n        );\n      }\n\n      const isPreloading = preloadedIndexes.current.has(index);\n      const isNearActive = Math.abs(index - currentIndex) <= 1;\n      const shouldOptimizeRender = isScrolling && !isNearActive;\n\n      // Track render performance\n      if (__DEV__) {\n        performanceMetrics.current.renderCount++;\n      }\n\n      return (\n        <View style={{ height: screenHeight, width: screenWidth }}>\n          <EnhancedVideoItem\n            confession={item}\n            isActive={index === currentIndex && isFocused && !isScrolling}\n            onClose={onClose}\n            onCommentPress={handleCommentPress}\n            onSharePress={handleSharePress}\n            onSavePress={handleSavePress}\n            onReportPress={handleReportPress}\n            forceUnmuted={true}\n            screenFocused={isFocused && index === currentIndex}\n          />\n        </View>\n      );\n    },\n    [\n      onClose,\n      currentIndex,\n      isFocused,\n      isScrolling,\n      handleCommentPress,\n      handleSharePress,\n      handleSavePress,\n      handleReportPress,\n    ],\n  );\n\n  const keyExtractor = useCallback((item: Confession, index: number) => {\n    // Ensure unique key: prefer id, fallback to index (but warn if no id)\n    if (!item?.id) {\n      if (__DEV__) {\n        console.warn(\"OptimizedVideoList: Confession missing ID at index\", index, item);\n      }\n      return `fallback-${index}-${Date.now()}`;\n    }\n    return item.id; // Unique UUID\n  }, []);\n\n  // Performance tracking and cleanup\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (__DEV__) {\n        const metrics = performanceMetrics.current;\n        if (metrics.scrollEvents > 0) {\n          console.log(\"[OptimizedVideoList] Performance:\", {\n            renders: metrics.renderCount,\n            scrolls: metrics.scrollEvents,\n            avgVelocity: metrics.avgVelocity.toFixed(2),\n            preloaded: preloadedIndexes.current.size,\n          });\n        }\n      }\n      // Clear old preloaded indexes\n      if (preloadedIndexes.current.size > PRELOAD_BUFFER * 3) {\n        const currentIdx = currentIndexRef.current;\n        const newSet = new Set<number>();\n        preloadedIndexes.current.forEach((idx) => {\n          if (Math.abs(idx - currentIdx) <= PRELOAD_BUFFER * 2) {\n            newSet.add(idx);\n          }\n        });\n        preloadedIndexes.current = newSet;\n      }\n    }, CLEANUP_INTERVAL);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Show enhanced loading state\n  if (isLoading && videoConfessions.length === 0) {\n    return (\n      <>\n        <VideoFeedSkeleton\n          isVisible={true}\n          state=\"initial\"\n          itemCount={3}\n          animationTiming={{ fade: 400, stagger: 120 }}\n        />\n        <NetworkStatusIndicator position=\"top\" minimalMode={false} autoHideDelay={5000} />\n      </>\n    );\n  }\n\n  // Show enhanced empty/error state\n  if (!isLoading && videoConfessions.length === 0) {\n    if (error && userFriendlyError) {\n      return (\n        <>\n          <VideoFeedSkeleton isVisible={true} state=\"initial\" showErrorIndicator={true} />\n          <ErrorState\n            type=\"video\"\n            title={userFriendlyError.title}\n            message={userFriendlyError.message}\n            actionLabel={userFriendlyError.actionText}\n            onRetry={async () => {\n              setError(null);\n              setUserFriendlyError(null);\n              setRetryAttempts(0);\n              await loadConfessions();\n            }}\n          />\n          <NetworkStatusIndicator\n            position=\"top\"\n            persistentMode={true}\n            onRetry={async () => {\n              await loadConfessions();\n            }}\n          />\n        </>\n      );\n    }\n\n    return (\n      <View style={{ flex: 1, backgroundColor: \"black\", justifyContent: \"center\", alignItems: \"center\" }}>\n        <StatusBar hidden />\n        <View style={{ alignItems: \"center\" }}>\n          <View style={{ marginBottom: 16 }}>\n            <Ionicons name=\"videocam-off-outline\" size={48} color=\"#666\" />\n          </View>\n          <Text style={{ color: \"#999\", fontSize: 16, marginBottom: 8 }}>No videos available</Text>\n          <Text style={{ color: \"#666\", fontSize: 14 }}>Check back later for new content</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <>\n      <StatusBar hidden />\n      <View style={{ flex: 1, backgroundColor: \"black\" }}>\n        <FlashList\n          data={videoConfessions}\n          renderItem={renderItem}\n          keyExtractor={keyExtractor}\n          onViewableItemsChanged={onViewableItemsChanged}\n          viewabilityConfig={viewabilityConfig}\n          pagingEnabled={true}\n          snapToInterval={screenHeight}\n          snapToAlignment=\"start\"\n          decelerationRate=\"fast\"\n          extraData={{ currentIndex, isFocused, isScrolling }}\n          onScroll={(e) => {\n            handleScroll(e);\n            scrollOffset.value = e.nativeEvent.contentOffset.y;\n          }}\n          onScrollBeginDrag={handleScrollBeginDrag}\n          onScrollEndDrag={handleScrollEndDrag}\n          showsVerticalScrollIndicator={false}\n          initialScrollIndex={initialIndex}\n          getItemType={() => \"video\"}\n          overrideItemLayout={(layout) => {\n            layout.span = 1;\n          }}\n          contentContainerStyle={{ backgroundColor: \"black\" }}\n          bounces={true}\n          scrollEventThrottle={16}\n          disableIntervalMomentum={true}\n          snapToEnd={false}\n          refreshControl={\n            <RefreshControl\n              refreshing={isRefreshing}\n              onRefresh={async () => {\n                setIsRefreshing(true);\n                setError(null);\n                setUserFriendlyError(null);\n                setRetryAttempts(0);\n                await loadConfessions();\n                setIsRefreshing(false);\n              }}\n              tintColor=\"#fff\"\n              colors={[\"#fff\"]}\n            />\n          }\n        />\n\n        {/* Loading overlay for refresh */}\n        {isRefreshing && <VideoFeedSkeleton isVisible={true} state=\"pullToRefresh\" itemCount={1} />}\n\n        {/* Loading overlay for load more */}\n        {isLoadingMore && <VideoFeedSkeleton isVisible={true} state=\"loadMore\" itemCount={1} />}\n\n        {/* Network status indicator */}\n        <NetworkStatusIndicator position=\"top\" minimalMode={true} autoHideDelay={3000} scrollOffset={scrollOffset} />\n      </View>\n\n      {/* Comment Bottom Sheet */}\n      <EnhancedCommentBottomSheet bottomSheetModalRef={commentSheetRef} confessionId={currentVideoId || \"\"} />\n\n      {/* Share Bottom Sheet */}\n      <EnhancedShareBottomSheet\n        bottomSheetModalRef={shareSheetRef}\n        confessionId={currentVideoId || \"\"}\n        confessionText={currentVideoText}\n      />\n\n      {/* Report Modal */}\n      <ReportModal\n        isVisible={reportModalVisible}\n        onClose={() => {\n          setReportModalVisible(false);\n          setModalOpen(false);\n        }}\n        confessionId={currentVideoId || undefined}\n        contentType=\"confession\"\n      />\n    </>\n  );\n}\n\n// Memoized export with optimized comparison\nexport default memo(OptimizedVideoList, (prevProps, nextProps) => {\n  return prevProps.onClose === nextProps.onClose && prevProps.initialIndex === nextProps.initialIndex;\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/PaywallModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/PermissionGate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Platform' is defined but never used.","line":2,"column":80,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":88},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkInitialPermissions'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkInitialPermissions]","fix":{"range":[2040,2042],"text":"[checkInitialPermissions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { View, Text, TouchableOpacity, StyleSheet, ActivityIndicator, Linking, Platform } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useMediaPermissions } from \"../hooks/useMediaPermissions\";\nimport { getUserFriendlyMessage, StandardError } from \"../utils/errorHandling\";\nimport { ErrorState } from \"./ErrorState\";\n\ninterface PermissionGateProps {\n  children: React.ReactNode;\n  permissions?: (\"camera\" | \"microphone\" | \"mediaLibrary\")[];\n  onPermissionDenied?: () => void;\n  onPermissionGranted?: () => void;\n  customMessages?: {\n    camera?: string;\n    microphone?: string;\n    mediaLibrary?: string;\n    permanentlyDenied?: string;\n  };\n  showSettingsButton?: boolean;\n}\n\nconst defaultMessages = {\n  camera:\n    \"Camera access is required to record videos. Your privacy is important to us - we only access the camera when you're actively recording.\",\n  microphone: \"Microphone access is needed to capture audio with your videos. Audio is processed locally for privacy.\",\n  mediaLibrary:\n    \"Media library access allows you to save and share your videos. We only access files you explicitly choose.\",\n  permanentlyDenied: \"Permissions have been denied. Please enable them in your device settings to continue.\",\n};\n\nexport const PermissionGate: React.FC<PermissionGateProps> = ({\n  children,\n  permissions = [\"camera\", \"microphone\"],\n  onPermissionDenied,\n  onPermissionGranted,\n  customMessages = {},\n  showSettingsButton = true,\n}) => {\n  const {\n    permissionState,\n    rawPermissions,\n    requestCameraPermission,\n    requestMicrophonePermission,\n    requestMediaLibraryPermission,\n    checkAllPermissions,\n  } = useMediaPermissions();\n\n  const [isChecking, setIsChecking] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [deniedPermissions, setDeniedPermissions] = useState<string[]>([]);\n\n  const messages = { ...defaultMessages, ...customMessages };\n\n  useEffect(() => {\n    checkInitialPermissions();\n  }, []);\n\n  const checkInitialPermissions = async () => {\n    setIsChecking(true);\n    setError(null);\n\n    try {\n      await checkAllPermissions();\n\n      const denied: string[] = [];\n\n      if (permissions.includes(\"camera\") && !permissionState.camera) {\n        denied.push(\"camera\");\n      }\n      if (permissions.includes(\"microphone\") && !permissionState.microphone) {\n        denied.push(\"microphone\");\n      }\n      if (permissions.includes(\"mediaLibrary\") && !permissionState.mediaLibrary) {\n        denied.push(\"mediaLibrary\");\n      }\n\n      setDeniedPermissions(denied);\n\n      if (denied.length === 0) {\n        onPermissionGranted?.();\n      } else {\n        onPermissionDenied?.();\n      }\n    } catch (err) {\n      const standardError: StandardError = {\n        code: \"PERMISSION_CHECK_FAILED\",\n        message: (err as Error)?.message || \"Failed to check permissions\",\n      };\n      setError(getUserFriendlyMessage(standardError));\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const requestPermission = async (type: \"camera\" | \"microphone\" | \"mediaLibrary\") => {\n    setError(null);\n\n    try {\n      let result: boolean = false;\n\n      switch (type) {\n        case \"camera\":\n          result = await requestCameraPermission();\n          break;\n        case \"microphone\":\n          result = await requestMicrophonePermission();\n          break;\n        case \"mediaLibrary\":\n          result = await requestMediaLibraryPermission();\n          break;\n      }\n\n      if (result) {\n        // Remove from denied list\n        setDeniedPermissions((prev) => prev.filter((p) => p !== type));\n\n        // Check if all permissions are now granted\n        await checkInitialPermissions();\n      } else {\n        setError(\n          `${type.charAt(0).toUpperCase() + type.slice(1)} permission was denied. You can enable it in settings.`,\n        );\n      }\n    } catch (err) {\n      const standardError: StandardError = {\n        code: \"PERMISSION_REQUEST_FAILED\",\n        message: (err as Error)?.message || `Failed to request ${type} permission`,\n      };\n      setError(getUserFriendlyMessage(standardError));\n    }\n  };\n\n  const openSettings = () => {\n    Linking.openSettings();\n  };\n\n  const isPermanentlyDenied = () => {\n    // Compute which permissions are needed based on the permissions prop\n    const needsCamera = permissions.includes(\"camera\");\n    const needsMic = permissions.includes(\"microphone\");\n    const needsLib = permissions.includes(\"mediaLibrary\");\n\n    // Helper function to check if a permission is permanently denied\n    const isPermanent = (p: any) => p?.status === \"denied\" && p?.canAskAgain === false;\n\n    // Check if any required permission is permanently denied\n    if (needsCamera && isPermanent(rawPermissions.camera)) return true;\n    if (needsMic && isPermanent(rawPermissions.microphone)) return true;\n    if (needsLib && isPermanent(rawPermissions.mediaLibrary)) return true;\n    return false;\n  };\n\n  // Show loading state while checking permissions\n  if (isChecking) {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n        <Text style={styles.loadingText}>Checking permissions...</Text>\n      </View>\n    );\n  }\n\n  // Show error state if there's an error\n  if (error) {\n    return <ErrorState message={error} onRetry={checkInitialPermissions} type=\"permission\" />;\n  }\n\n  // All permissions granted - render children\n  if (deniedPermissions.length === 0) {\n    return <>{children}</>;\n  }\n\n  // Show permission request UI\n  const permanentlyDenied = isPermanentlyDenied();\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.content}>\n        <Ionicons\n          name={permanentlyDenied ? \"lock-closed\" : \"shield-checkmark\"}\n          size={64}\n          color={permanentlyDenied ? \"#FF3B30\" : \"#007AFF\"}\n          style={styles.icon}\n        />\n\n        <Text style={styles.title}>{permanentlyDenied ? \"Permissions Required\" : \"Grant Permissions\"}</Text>\n\n        {permanentlyDenied ? (\n          <>\n            <Text style={styles.description}>{messages.permanentlyDenied}</Text>\n            {showSettingsButton && (\n              <TouchableOpacity style={styles.settingsButton} onPress={openSettings}>\n                <Ionicons name=\"settings-outline\" size={20} color=\"white\" />\n                <Text style={styles.settingsButtonText}>Open Settings</Text>\n              </TouchableOpacity>\n            )}\n          </>\n        ) : (\n          <>\n            <Text style={styles.description}>This app needs the following permissions to work properly:</Text>\n\n            <View style={styles.permissionList}>\n              {deniedPermissions.map((permission) => (\n                <View key={permission} style={styles.permissionItem}>\n                  <View style={styles.permissionInfo}>\n                    <Ionicons\n                      name={permission === \"camera\" ? \"camera\" : permission === \"microphone\" ? \"mic\" : \"images\"}\n                      size={24}\n                      color=\"#007AFF\"\n                      style={styles.permissionIcon}\n                    />\n                    <View style={styles.permissionTextContainer}>\n                      <Text style={styles.permissionName}>\n                        {permission.charAt(0).toUpperCase() + permission.slice(1)}\n                      </Text>\n                      <Text style={styles.permissionDescription}>{messages[permission as keyof typeof messages]}</Text>\n                    </View>\n                  </View>\n                  <TouchableOpacity style={styles.grantButton} onPress={() => requestPermission(permission as any)}>\n                    <Text style={styles.grantButtonText}>Grant</Text>\n                  </TouchableOpacity>\n                </View>\n              ))}\n            </View>\n\n            <TouchableOpacity style={styles.retryButton} onPress={checkInitialPermissions}>\n              <Text style={styles.retryButtonText}>I've granted permissions</Text>\n            </TouchableOpacity>\n          </>\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#000\",\n    padding: 20,\n  },\n  content: {\n    width: \"100%\",\n    maxWidth: 400,\n    alignItems: \"center\",\n  },\n  icon: {\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 16,\n    textAlign: \"center\",\n  },\n  description: {\n    fontSize: 16,\n    color: \"#999\",\n    textAlign: \"center\",\n    marginBottom: 32,\n    lineHeight: 22,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: \"#999\",\n    marginTop: 16,\n  },\n  permissionList: {\n    width: \"100%\",\n    marginBottom: 24,\n  },\n  permissionItem: {\n    backgroundColor: \"#1a1a1a\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n  },\n  permissionInfo: {\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n    marginBottom: 12,\n  },\n  permissionIcon: {\n    marginRight: 12,\n    marginTop: 2,\n  },\n  permissionTextContainer: {\n    flex: 1,\n  },\n  permissionName: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    color: \"#fff\",\n    marginBottom: 4,\n  },\n  permissionDescription: {\n    fontSize: 14,\n    color: \"#999\",\n    lineHeight: 20,\n  },\n  grantButton: {\n    backgroundColor: \"#007AFF\",\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 8,\n    alignSelf: \"flex-end\",\n  },\n  grantButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  retryButton: {\n    backgroundColor: \"#333\",\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n    marginTop: 16,\n  },\n  retryButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  settingsButton: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"#007AFF\",\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n    marginTop: 16,\n  },\n  settingsButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n    marginLeft: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ProgressIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/PullToRefresh.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/PullToRefreshOverlay.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'progressArc'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [progressArc, pullDistance, threshold]","fix":{"range":[1471,1496],"text":"[progressArc, pullDistance, threshold]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'rotation', 'scale', and 'trendingHintOpacity'. Either include them or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":90,"suggestions":[{"desc":"Update the dependencies array to be: [isRefreshing, userPreferences?.reduced_motion, trendingHashtags, onRefreshComplete, rotation, scale, trendingHintOpacity]","fix":{"range":[2640,2724],"text":"[isRefreshing, userPreferences?.reduced_motion, trendingHashtags, onRefreshComplete, rotation, scale, trendingHintOpacity]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withSpring,\n  withRepeat,\n  withTiming,\n  interpolate,\n  Extrapolation,\n  Easing,\n  withDelay,\n  withSequence,\n} from \"react-native-reanimated\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { useTrendingStore } from \"../state/trendingStore\";\n\ninterface PullToRefreshOverlayProps {\n  pullDistance: number;\n  isRefreshing: boolean;\n  threshold?: number;\n  context?: \"secrets\" | \"videos\";\n  onRefreshComplete?: () => void;\n}\n\nexport default function PullToRefreshOverlay({\n  pullDistance,\n  isRefreshing,\n  threshold = 80,\n  context = \"secrets\",\n  onRefreshComplete,\n}: PullToRefreshOverlayProps) {\n  const { userPreferences } = useConfessionStore();\n  const { trendingHashtags } = useTrendingStore();\n  const [showTrendingHint, setShowTrendingHint] = useState(false);\n  const [trendingHintText, setTrendingHintText] = useState(\"\");\n\n  const rotation = useSharedValue(0);\n  const scale = useSharedValue(1);\n  const progressArc = useSharedValue(0);\n  const trendingHintOpacity = useSharedValue(0);\n\n  const shouldTrigger = pullDistance >= threshold;\n\n  // Update progress arc based on pull distance\n  useEffect(() => {\n    const progress = Math.min(pullDistance / threshold, 1);\n    progressArc.value = withTiming(progress, { duration: 100 });\n  }, [pullDistance, threshold]);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | null = null;\n\n    if (isRefreshing) {\n      if (!userPreferences?.reduced_motion) {\n        rotation.value = withRepeat(\n          withTiming(360, {\n            duration: 1000,\n            easing: Easing.linear,\n          }),\n          -1,\n        );\n        scale.value = withSpring(1.1);\n      }\n    } else {\n      rotation.value = withTiming(0, { duration: 300 });\n      scale.value = withSpring(1);\n\n      // Show trending hint after refresh completes\n      if (onRefreshComplete && trendingHashtags.length > 0) {\n        const topHashtag = trendingHashtags[0];\n        setTrendingHintText(`Top tag: ${topHashtag.hashtag}`);\n        setShowTrendingHint(true);\n\n        trendingHintOpacity.value = withSequence(\n          withDelay(500, withTiming(1, { duration: 300 })),\n          withDelay(2000, withTiming(0, { duration: 300 })),\n        );\n\n        timeoutId = setTimeout(() => {\n          setShowTrendingHint(false);\n          onRefreshComplete();\n        }, 3000);\n      }\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [isRefreshing, userPreferences?.reduced_motion, trendingHashtags, onRefreshComplete]);\n\n  // Dynamic messaging based on context and pull state\n  const getContextualMessage = () => {\n    const contextMessages = {\n      secrets: {\n        pull: \"Pull to refresh secrets\",\n        near: \"Release to refresh — fetching freshest confessions\",\n        refreshing: \"Refreshing… new secrets secure and anonymous\",\n      },\n      videos: {\n        pull: \"Pull to refresh videos\",\n        near: \"Release to refresh — loading fresh video confessions\",\n        refreshing: \"Refreshing… discovering new stories\",\n      },\n    };\n\n    const messages = contextMessages[context];\n\n    if (isRefreshing) return messages.refreshing;\n    if (shouldTrigger) return messages.near;\n    return messages.pull;\n  };\n\n  const containerStyle = useAnimatedStyle(() => {\n    const opacity = interpolate(pullDistance, [0, threshold], [0, 1], {\n      extrapolateLeft: Extrapolation.CLAMP,\n      extrapolateRight: Extrapolation.CLAMP,\n    });\n    const translateY = interpolate(pullDistance, [0, threshold], [-20, 0], {\n      extrapolateLeft: Extrapolation.CLAMP,\n      extrapolateRight: Extrapolation.CLAMP,\n    });\n\n    return {\n      opacity,\n      transform: [{ translateY }],\n    };\n  });\n\n  const iconStyle = useAnimatedStyle(() => ({\n    transform: [{ rotate: `${rotation.value}deg` }, { scale: scale.value }],\n  }));\n\n  const progressStyle = useAnimatedStyle(() => ({\n    transform: [{ rotate: `${progressArc.value * 360}deg` }],\n  }));\n\n  const trendingHintStyle = useAnimatedStyle(() => ({\n    opacity: trendingHintOpacity.value,\n  }));\n\n  return (\n    <>\n      <Animated.View\n        style={[\n          {\n            position: \"absolute\",\n            top: 60,\n            left: 0,\n            right: 0,\n            alignItems: \"center\",\n            zIndex: 20,\n          },\n          containerStyle,\n        ]}\n      >\n        {/* Main refresh indicator */}\n        <View style={{ position: \"relative\", marginBottom: 8 }}>\n          {/* Progress arc background */}\n          {!isRefreshing && (\n            <View\n              style={{\n                position: \"absolute\",\n                width: 44,\n                height: 44,\n                borderRadius: 22,\n                borderWidth: 2,\n                borderColor: \"rgba(255, 255, 255, 0.2)\",\n                top: -2,\n                left: -2,\n              }}\n            />\n          )}\n\n          {/* Progress arc */}\n          {!isRefreshing && (\n            <Animated.View\n              style={[\n                {\n                  position: \"absolute\",\n                  width: 44,\n                  height: 44,\n                  borderRadius: 22,\n                  borderWidth: 2,\n                  borderColor: \"#FFFFFF\",\n                  borderRightColor: \"transparent\",\n                  borderBottomColor: \"transparent\",\n                  top: -2,\n                  left: -2,\n                },\n                progressStyle,\n              ]}\n            />\n          )}\n\n          {/* Icon container */}\n          <Animated.View\n            style={[\n              {\n                width: 40,\n                height: 40,\n                borderRadius: 20,\n                backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              },\n              iconStyle,\n            ]}\n          >\n            {isRefreshing && !userPreferences?.reduced_motion ? (\n              <Ionicons name=\"refresh\" size={20} color=\"#FFFFFF\" />\n            ) : (\n              <Ionicons\n                name={isRefreshing ? \"refresh\" : shouldTrigger ? \"checkmark\" : \"arrow-down\"}\n                size={20}\n                color=\"#FFFFFF\"\n              />\n            )}\n          </Animated.View>\n        </View>\n\n        {/* Contextual message */}\n        <Text style={{ color: \"white\", fontSize: 12, fontWeight: \"500\", textAlign: \"center\", maxWidth: 256 }}>\n          {getContextualMessage()}\n        </Text>\n      </Animated.View>\n\n      {/* Trending hint */}\n      {showTrendingHint && (\n        <Animated.View\n          style={[\n            {\n              position: \"absolute\",\n              top: 140,\n              left: 0,\n              right: 0,\n              alignItems: \"center\",\n              zIndex: 19,\n            },\n            trendingHintStyle,\n          ]}\n        >\n          <View\n            style={{\n              backgroundColor: \"rgba(59, 130, 246, 0.9)\",\n              paddingHorizontal: 12,\n              paddingVertical: 6,\n              borderRadius: 16,\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Ionicons name=\"trending-up\" size={14} color=\"#FFFFFF\" />\n            <Text style={{ color: \"white\", fontSize: 11, fontWeight: \"500\", marginLeft: 4 }}>{trendingHintText}</Text>\n          </View>\n        </Animated.View>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ReportModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'backdropOpacity', 'clearError', and 'translateY'. Either include them or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [backdropOpacity, clearError, isVisible, translateY]","fix":{"range":[1985,1996],"text":"[backdropOpacity, clearError, isVisible, translateY]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { View, Text, Pressable, TextInput, Alert, ScrollView } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as Haptics from \"expo-haptics\";\nimport Animated, { useSharedValue, useAnimatedStyle, withSpring, withTiming, runOnJS } from \"react-native-reanimated\";\nimport { Gesture, GestureDetector } from \"react-native-gesture-handler\";\nimport { useReportStore } from \"../state/reportStore\";\nimport { ReportReason, REPORT_REASON_LABELS, REPORT_REASON_DESCRIPTIONS } from \"../types/report\";\nimport { t } from \"../utils/i18n\";\nimport { trackInteraction } from \"../utils/reviewPrompt\";\n\ninterface ReportModalProps {\n  isVisible: boolean;\n  onClose: () => void;\n  confessionId?: string;\n  replyId?: string;\n  contentType: \"confession\" | \"reply\";\n}\n\nconst MODAL_HEIGHT = 500;\n\nconst REPORT_REASONS: ReportReason[] = [\n  \"inappropriate_content\",\n  \"spam\",\n  \"harassment\",\n  \"false_information\",\n  \"violence\",\n  \"hate_speech\",\n  \"other\",\n];\n\nexport default function ReportModal({ isVisible, onClose, confessionId, replyId, contentType }: ReportModalProps) {\n  const [selectedReason, setSelectedReason] = useState<ReportReason | null>(null);\n  const [additionalDetails, setAdditionalDetails] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { createReport, isLoading, error, clearError } = useReportStore();\n\n  const translateY = useSharedValue(MODAL_HEIGHT);\n  const backdropOpacity = useSharedValue(0);\n\n  useEffect(() => {\n    if (isVisible) {\n      translateY.value = withSpring(0, { damping: 15, stiffness: 150 });\n      backdropOpacity.value = withTiming(0.5, { duration: 300 });\n    } else {\n      translateY.value = withSpring(MODAL_HEIGHT, { damping: 15, stiffness: 150 });\n      backdropOpacity.value = withTiming(0, { duration: 300 });\n      // Reset form when modal closes\n      setSelectedReason(null);\n      setAdditionalDetails(\"\");\n      clearError();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert(\"Error\", error);\n      clearError();\n    }\n  }, [error, clearError]);\n\n  const panGesture = Gesture.Pan()\n    .onUpdate((event) => {\n      if (event.translationY > 0) {\n        translateY.value = event.translationY;\n      }\n    })\n    .onEnd((event) => {\n      \"worklet\";\n      if (event.translationY > MODAL_HEIGHT * 0.3) {\n        translateY.value = withSpring(MODAL_HEIGHT);\n        runOnJS(onClose)();\n      } else {\n        translateY.value = withSpring(0);\n      }\n    });\n\n  const modalStyle = useAnimatedStyle(() => ({\n    transform: [{ translateY: translateY.value }],\n  }));\n\n  const backdropStyle = useAnimatedStyle(() => ({\n    opacity: backdropOpacity.value,\n  }));\n\n  const handleSubmit = async () => {\n    if (!selectedReason) {\n      Alert.alert(t(\"common.error\"), \"Please select a reason for reporting\");\n      return;\n    }\n\n    if (selectedReason === \"other\" && !additionalDetails.trim()) {\n      Alert.alert(t(\"common.error\"), \"Please provide additional details for 'Other' reason\");\n      return;\n    }\n\n    setIsSubmitting(true);\n    trackInteraction(); // Track user interaction for review prompting\n\n    try {\n      await createReport({\n        confessionId,\n        replyId,\n        reason: selectedReason,\n        additionalDetails: additionalDetails.trim() || undefined,\n      });\n\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      Alert.alert(t(\"reports.submitted\"), t(\"reports.submittedMessage\"), [{ text: t(\"common.ok\"), onPress: onClose }]);\n    } catch {\n      // Error is handled by the store and useEffect above\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleReasonSelect = (reason: ReportReason) => {\n    setSelectedReason(reason);\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <View style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n      {/* Backdrop */}\n      <Animated.View\n        style={[\n          {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: \"black\",\n          },\n          backdropStyle,\n        ]}\n      >\n        <Pressable style={{ flex: 1 }} onPress={onClose} />\n      </Animated.View>\n\n      {/* Modal */}\n      <GestureDetector gesture={panGesture}>\n        <Animated.View\n          style={[\n            {\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              height: MODAL_HEIGHT,\n              backgroundColor: \"#1A1A1A\",\n              borderTopLeftRadius: 20,\n              borderTopRightRadius: 20,\n              paddingHorizontal: 20,\n              paddingTop: 12,\n            },\n            modalStyle,\n          ]}\n        >\n          {/* Handle */}\n          <View className=\"items-center mb-4\">\n            <View className=\"w-10 h-1 bg-gray-600 rounded-full\" />\n          </View>\n\n          {/* Header */}\n          <View className=\"flex-row items-center justify-between mb-6\">\n            <Text className=\"text-white text-18 font-semibold\">{t(\"reports.title\")}</Text>\n            <Pressable onPress={onClose}>\n              <Ionicons name=\"close\" size={24} color=\"#8B98A5\" />\n            </Pressable>\n          </View>\n\n          <ScrollView showsVerticalScrollIndicator={false} className=\"flex-1\">\n            {/* Reason Selection */}\n            <Text className=\"text-white text-16 font-medium mb-4\">Why are you reporting this {contentType}?</Text>\n\n            <View className=\"space-y-2 mb-6\">\n              {REPORT_REASONS.map((reason) => (\n                <Pressable\n                  key={reason}\n                  className={`flex-row items-center p-3 rounded-lg border ${\n                    selectedReason === reason ? \"border-red-500 bg-red-500/10\" : \"border-gray-700 bg-gray-800/50\"\n                  }`}\n                  onPress={() => handleReasonSelect(reason)}\n                >\n                  <View className=\"mr-3\">\n                    <Ionicons\n                      name={selectedReason === reason ? \"radio-button-on\" : \"radio-button-off\"}\n                      size={20}\n                      color={selectedReason === reason ? \"#EF4444\" : \"#8B98A5\"}\n                    />\n                  </View>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white text-15 font-medium\">{REPORT_REASON_LABELS[reason]}</Text>\n                    <Text className=\"text-gray-400 text-13 mt-1\">{REPORT_REASON_DESCRIPTIONS[reason]}</Text>\n                  </View>\n                </Pressable>\n              ))}\n            </View>\n\n            {/* Additional Details */}\n            {(selectedReason === \"other\" || selectedReason) && (\n              <View className=\"mb-6\">\n                <Text className=\"text-white text-16 font-medium mb-3\">\n                  Additional Details {selectedReason === \"other\" ? \"(Required)\" : \"(Optional)\"}\n                </Text>\n                <TextInput\n                  className=\"bg-gray-800 border border-gray-700 rounded-lg p-3 text-white text-15\"\n                  placeholder={`Provide more details about this ${contentType}...`}\n                  placeholderTextColor=\"#8B98A5\"\n                  value={additionalDetails}\n                  onChangeText={setAdditionalDetails}\n                  multiline\n                  numberOfLines={3}\n                  textAlignVertical=\"top\"\n                />\n              </View>\n            )}\n          </ScrollView>\n\n          {/* Submit Button */}\n          <View className=\"pt-4 pb-6\">\n            <Pressable\n              className={`rounded-lg py-4 ${\n                selectedReason && !isSubmitting && !isLoading ? \"bg-red-500\" : \"bg-gray-700\"\n              }`}\n              onPress={handleSubmit}\n              disabled={!selectedReason || isSubmitting || isLoading}\n            >\n              <Text className=\"text-white text-16 font-semibold text-center\">\n                {isSubmitting || isLoading ? \"Submitting...\" : \"Submit Report\"}\n              </Text>\n            </Pressable>\n          </View>\n        </Animated.View>\n      </GestureDetector>\n    </View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ReportSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/RetryBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/SecretItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/SegmentedTabs.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'indicatorPosition'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [activeIndex, indicatorPosition]","fix":{"range":[1039,1052],"text":"[activeIndex, indicatorPosition]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { View, Text, Pressable, ViewStyle } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, { useSharedValue, useAnimatedStyle, withSpring } from \"react-native-reanimated\";\nimport { usePreferenceAwareHaptics } from \"../utils/haptics\";\n\nexport interface TabItem {\n  id: string;\n  label: string;\n  icon?: keyof typeof Ionicons.glyphMap;\n  badge?: number;\n}\n\ninterface SegmentedTabsProps {\n  tabs: TabItem[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n  style?: ViewStyle;\n}\n\nexport default function SegmentedTabs({ tabs, activeTab, onTabChange, style }: SegmentedTabsProps) {\n  const { impactAsync } = usePreferenceAwareHaptics();\n  const activeIndex = tabs.findIndex((tab) => tab.id === activeTab);\n  const indicatorPosition = useSharedValue(activeIndex);\n  const [containerWidth, setContainerWidth] = React.useState(0);\n\n  React.useEffect(() => {\n    indicatorPosition.value = withSpring(activeIndex, {\n      damping: 15,\n      stiffness: 150,\n    });\n  }, [activeIndex]);\n\n  const tabWidth = containerWidth > 0 ? containerWidth / Math.max(1, tabs.length) : 0;\n\n  const indicatorStyle = useAnimatedStyle(() => ({\n    left: indicatorPosition.value * tabWidth,\n    width: tabWidth,\n  }));\n\n  const handleTabPress = (tabId: string) => {\n    // Only trigger haptic if it's a different tab to avoid excessive feedback\n    if (tabId !== activeTab) {\n      impactAsync();\n    }\n    onTabChange(tabId);\n  };\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: \"transparent\",\n          borderRadius: 16,\n          padding: 2,\n          flexDirection: \"row\",\n          position: \"relative\",\n        },\n        style,\n      ]}\n      onLayout={(e) => setContainerWidth(e.nativeEvent.layout.width)}\n    >\n      {/* Active indicator with enhanced styling */}\n      <Animated.View\n        style={[\n          {\n            position: \"absolute\",\n            top: 1,\n            bottom: 1,\n            backgroundColor: \"#3B82F6\",\n            borderRadius: 10,\n            zIndex: 1,\n            shadowColor: \"#3B82F6\",\n            shadowOffset: { width: 0, height: 1 },\n            shadowOpacity: 0.25,\n            shadowRadius: 6,\n            elevation: 4,\n          },\n          indicatorStyle,\n        ]}\n      />\n\n      {/* Tab buttons */}\n      {tabs.map((tab, index) => {\n        const isActive = tab.id === activeTab;\n\n        return (\n          <Pressable\n            key={tab.id}\n            onPress={() => handleTabPress(tab.id)}\n            style={{\n              flex: 1,\n              paddingVertical: 10,\n              paddingHorizontal: 8,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              flexDirection: \"row\",\n              zIndex: 2,\n              borderRadius: 10,\n            }}\n          >\n            {/* Icon */}\n            {Boolean(tab.icon) && (\n              <Ionicons\n                name={tab.icon}\n                size={12}\n                color={isActive ? \"#FFFFFF\" : \"#9CA3AF\"}\n                style={{ marginRight: tab.label ? 4 : 0 }}\n              />\n            )}\n\n            {/* Label */}\n            {Boolean(tab.label) && (\n              <Text\n                style={{\n                  fontSize: 11,\n                  fontWeight: \"600\",\n                  color: isActive ? \"#FFFFFF\" : \"#9CA3AF\",\n                }}\n              >\n                {tab.label}\n              </Text>\n            )}\n\n            {/* Badge */}\n            {(tab.badge ?? 0) > 0 && (\n              <View\n                style={{\n                  backgroundColor: \"#EF4444\",\n                  borderRadius: 10,\n                  minWidth: 18,\n                  height: 18,\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  marginLeft: 4,\n                  shadowColor: \"#EF4444\",\n                  shadowOffset: { width: 0, height: 1 },\n                  shadowOpacity: 0.5,\n                  shadowRadius: 3,\n                  elevation: 3,\n                }}\n              >\n                <Text\n                  style={{\n                    color: \"#FFFFFF\",\n                    fontSize: 10,\n                    fontWeight: \"700\",\n                  }}\n                >\n                  {(tab.badge ?? 0) > 99 ? \"99+\" : String(tab.badge ?? 0)}\n                </Text>\n              </View>\n            )}\n          </Pressable>\n        );\n      })}\n    </View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/SettingsPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/SettingsToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ShareModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'backdropOpacity' and 'translateY'. Either include them or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [backdropOpacity, isVisible, translateY]","fix":{"range":[1424,1435],"text":"[backdropOpacity, isVisible, translateY]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { View, Text, Pressable, Share, Alert } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as Clipboard from \"expo-clipboard\";\nimport { usePreferenceAwareHaptics } from \"../utils/haptics\";\nimport { generateConfessionLink, generateShareMessage } from \"../utils/links\";\nimport Animated, { useSharedValue, useAnimatedStyle, withSpring, withTiming, runOnJS } from \"react-native-reanimated\";\nimport { Gesture, GestureDetector } from \"react-native-gesture-handler\";\n\nimport ReportModal from \"./ReportModal\";\n\ninterface ShareModalProps {\n  isVisible: boolean;\n  onClose: () => void;\n  confessionId: string;\n  confessionText: string;\n}\n\nconst MODAL_HEIGHT = 300;\n\nexport default function ShareModal({ isVisible, onClose, confessionId, confessionText }: ShareModalProps) {\n  const { impactAsync } = usePreferenceAwareHaptics();\n  const [reportModalVisible, setReportModalVisible] = useState(false);\n  const translateY = useSharedValue(MODAL_HEIGHT);\n  const backdropOpacity = useSharedValue(0);\n\n  useEffect(() => {\n    if (isVisible) {\n      translateY.value = withSpring(0, { damping: 15, stiffness: 150 });\n      backdropOpacity.value = withTiming(0.5, { duration: 300 });\n    } else {\n      translateY.value = withSpring(MODAL_HEIGHT, { damping: 15, stiffness: 150 });\n      backdropOpacity.value = withTiming(0, { duration: 300 });\n    }\n  }, [isVisible]);\n\n  const panGesture = Gesture.Pan()\n    .onUpdate((event) => {\n      if (event.translationY > 0) {\n        translateY.value = event.translationY;\n      }\n    })\n    .onEnd((event) => {\n      \"worklet\";\n      if (event.translationY > MODAL_HEIGHT * 0.3) {\n        translateY.value = withSpring(MODAL_HEIGHT);\n        runOnJS(onClose)();\n      } else {\n        translateY.value = withSpring(0);\n      }\n    });\n\n  const modalStyle = useAnimatedStyle(() => ({\n    transform: [{ translateY: translateY.value }],\n  }));\n\n  const backdropStyle = useAnimatedStyle(() => ({\n    opacity: backdropOpacity.value,\n  }));\n\n  const handleNativeShare = async () => {\n    try {\n      const shareUrl = generateConfessionLink(confessionId);\n      const shareMessage = generateShareMessage(confessionText, confessionId);\n\n      await Share.share({\n        message: shareMessage,\n        url: shareUrl,\n      });\n      impactAsync();\n      onClose();\n    } catch (error) {\n      console.error(\"Share failed:\", error);\n    }\n  };\n\n  const handleCopyLink = async () => {\n    try {\n      const shareUrl = generateConfessionLink(confessionId);\n      await Clipboard.setStringAsync(shareUrl);\n      Alert.alert(\"Copied!\", \"Link copied to clipboard\");\n      impactAsync();\n      onClose();\n    } catch (error) {\n      console.error(\"Copy failed:\", error);\n    }\n  };\n\n  const handleCopyText = async () => {\n    try {\n      await Clipboard.setStringAsync(confessionText);\n      Alert.alert(\"Copied!\", \"Confession text copied to clipboard\");\n      impactAsync();\n      onClose();\n    } catch (error) {\n      console.error(\"Copy failed:\", error);\n    }\n  };\n\n  const handleReport = () => {\n    setReportModalVisible(true);\n    impactAsync();\n  };\n\n  const handleReportModalClose = () => {\n    setReportModalVisible(false);\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <View style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n      {/* Backdrop */}\n      <Animated.View\n        style={[\n          {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: \"black\",\n          },\n          backdropStyle,\n        ]}\n      >\n        <Pressable style={{ flex: 1 }} onPress={onClose} />\n      </Animated.View>\n\n      {/* Modal */}\n      <GestureDetector gesture={panGesture}>\n        <Animated.View\n          style={[\n            {\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              height: MODAL_HEIGHT,\n              backgroundColor: \"#1A1A1A\",\n              borderTopLeftRadius: 20,\n              borderTopRightRadius: 20,\n              paddingHorizontal: 20,\n              paddingTop: 12,\n            },\n            modalStyle,\n          ]}\n        >\n          {/* Handle */}\n          <View className=\"items-center mb-6\">\n            <View className=\"w-10 h-1 bg-gray-600 rounded-full\" />\n          </View>\n\n          {/* Share Options */}\n          <View className=\"space-y-4\">\n            <Pressable className=\"flex-row items-center py-4 px-2\" onPress={handleNativeShare}>\n              <View className=\"w-10 h-10 bg-blue-500 rounded-full items-center justify-center mr-4\">\n                <Ionicons name=\"share-outline\" size={20} color=\"#FFFFFF\" />\n              </View>\n              <View className=\"flex-1\">\n                <Text className=\"text-white text-16 font-medium\">Share</Text>\n                <Text className=\"text-gray-400 text-13\">Share this confession</Text>\n              </View>\n            </Pressable>\n\n            <Pressable className=\"flex-row items-center py-4 px-2\" onPress={handleCopyLink}>\n              <View className=\"w-10 h-10 bg-green-500 rounded-full items-center justify-center mr-4\">\n                <Ionicons name=\"link-outline\" size={20} color=\"#FFFFFF\" />\n              </View>\n              <View className=\"flex-1\">\n                <Text className=\"text-white text-16 font-medium\">Copy Link</Text>\n                <Text className=\"text-gray-400 text-13\">Copy link to clipboard</Text>\n              </View>\n            </Pressable>\n\n            <Pressable className=\"flex-row items-center py-4 px-2\" onPress={handleCopyText}>\n              <View className=\"w-10 h-10 bg-purple-500 rounded-full items-center justify-center mr-4\">\n                <Ionicons name=\"copy-outline\" size={20} color=\"#FFFFFF\" />\n              </View>\n              <View className=\"flex-1\">\n                <Text className=\"text-white text-16 font-medium\">Copy Text</Text>\n                <Text className=\"text-gray-400 text-13\">Copy confession text</Text>\n              </View>\n            </Pressable>\n\n            <Pressable className=\"flex-row items-center py-4 px-2\" onPress={handleReport}>\n              <View className=\"w-10 h-10 bg-red-500 rounded-full items-center justify-center mr-4\">\n                <Ionicons name=\"flag-outline\" size={20} color=\"#FFFFFF\" />\n              </View>\n              <View className=\"flex-1\">\n                <Text className=\"text-white text-16 font-medium\">Report</Text>\n                <Text className=\"text-gray-400 text-13\">Report inappropriate content</Text>\n              </View>\n            </Pressable>\n          </View>\n        </Animated.View>\n      </GestureDetector>\n\n      {/* Report Modal */}\n      <ReportModal\n        isVisible={reportModalVisible}\n        onClose={handleReportModalClose}\n        confessionId={confessionId}\n        contentType=\"confession\"\n      />\n    </View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/SimpleCommentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/SimpleVideoTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TikTokCaptionsOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TikTokVideoFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'withSpring' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'interpolate' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RetryResult' is defined but never used.","line":47,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showShareMenu' is assigned a value but never used.","line":169,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showCreatorProfile' is assigned a value but never used.","line":170,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'videoZoom' is assigned a value but never used.","line":171,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'playbackSpeeds' is assigned a value but never used.","line":172,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":172,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'networkQualityTier' is assigned a value but never used.","line":184,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentVideoQuality' is assigned a value but never used.","line":185,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recoverVideoPlayback' is assigned a value but never used.","line":348,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":348,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentId' is assigned a value but never used.","line":384,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":384,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":442,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":442,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'retryVideoOperation'. Either include it or remove the dependency array.","line":451,"column":6,"nodeType":"ArrayExpression","endLine":451,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [isFocused, retryVideoOperation]","fix":{"range":[15382,15393],"text":"[isFocused, retryVideoOperation]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'hydrateVideosWithRetry'. Either include it or remove the dependency array.","line":469,"column":6,"nodeType":"ArrayExpression","endLine":469,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [hydrateVideosWithRetry, videos.length]","fix":{"range":[15920,15935],"text":"[hydrateVideosWithRetry, videos.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deviceInfo' is assigned a value but never used.","line":576,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":576,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleNetworkQualityChange'. Either include it or remove the dependency array.","line":608,"column":6,"nodeType":"ArrayExpression","endLine":608,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleNetworkQualityChange]","fix":{"range":[20515,20517],"text":"[handleNetworkQualityChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'updateVideoQuality'. Either include it or remove the dependency array.","line":644,"column":5,"nodeType":"ArrayExpression","endLine":644,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [activeIndex, updateVideoQuality, videos]","fix":{"range":[21767,21788],"text":"[activeIndex, updateVideoQuality, videos]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'preloadUpcomingVideos' is assigned a value but never used.","line":668,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":668,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'deviceTier'. Either exclude it or remove the dependency array.","line":696,"column":6,"nodeType":"ArrayExpression","endLine":696,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [videos, activeIndex, preloadOffset, updateVideoQuality]","fix":{"range":[23653,23721],"text":"[videos, activeIndex, preloadOffset, updateVideoQuality]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":792,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":792,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'maxMemoryVideos' and 'retryAttempts'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVideos' needs the current value of 'maxMemoryVideos'.","line":807,"column":5,"nodeType":"ArrayExpression","endLine":807,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [hydrateVideosWithRetry, maxMemoryVideos, retryAttempts]","fix":{"range":[27235,27259],"text":"[hydrateVideosWithRetry, maxMemoryVideos, retryAttempts]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'hydrateVideos' and 'initializeDeviceAndNetwork'. Either include them or remove the dependency array.","line":813,"column":6,"nodeType":"ArrayExpression","endLine":813,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [hydrateVideos, initializeDeviceAndNetwork]","fix":{"range":[27352,27354],"text":"[hydrateVideos, initializeDeviceAndNetwork]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'videos'. Either include it or remove the dependency array.","line":898,"column":6,"nodeType":"ArrayExpression","endLine":898,"endColumn":88,"suggestions":[{"desc":"Update the dependencies array to be: [activeIndex, videoPlayer, isFocused, videos.length, playPlayer, globalVideoStore, videos]","fix":{"range":[29655,29737],"text":"[activeIndex, videoPlayer, isFocused, videos.length, playPlayer, globalVideoStore, videos]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'scrollToIndex'. Either include it or remove the dependency array.","line":945,"column":6,"nodeType":"ArrayExpression","endLine":945,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [activeIndex, scrollToIndex, videos.length]","fix":{"range":[31088,31116],"text":"[activeIndex, scrollToIndex, videos.length]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'scrollToIndex'. Either include it or remove the dependency array.","line":957,"column":6,"nodeType":"ArrayExpression","endLine":957,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [activeIndex, handleRefresh, scrollToIndex]","fix":{"range":[31385,31413],"text":"[activeIndex, handleRefresh, scrollToIndex]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleLike' is assigned a value but never used.","line":991,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":991,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gestureOverlayStyle' is assigned a value but never used.","line":1000,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":1000,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isScrolling' is assigned a value but never used.","line":1002,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1002,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progressX' is assigned a value but never used.","line":1004,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1004,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pinchScale' is assigned a value but never used.","line":1005,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1005,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'gestureState' is assigned a value but never used.","line":1006,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1006,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'videoPlayersRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoPlayersRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":1030,"column":23,"nodeType":"Identifier","endLine":1030,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  ActivityIndicator,\n  Dimensions,\n  RefreshControl,\n  StatusBar,\n  Text,\n  View,\n  Pressable,\n  AppState,\n} from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\nimport type { FlashListRef } from \"@shopify/flash-list\";\nimport type { ViewToken } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { GestureDetector } from \"react-native-gesture-handler\";\nimport Animated, {\n  useAnimatedStyle,\n  withTiming,\n  withSpring,\n  interpolate,\n  useSharedValue,\n} from \"react-native-reanimated\";\nimport { useVideoPlayer, VideoPlayer } from \"expo-video\";\nimport * as Haptics from \"expo-haptics\";\nimport NetInfo from \"@react-native-community/netinfo\";\n\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport TikTokVideoItem from \"./TikTokVideoItem\";\nimport VideoFeedSkeleton from \"./VideoFeedSkeleton\";\nimport NetworkStatusIndicator from \"./NetworkStatusIndicator\";\nimport { VideoDataService } from \"../services/VideoDataService\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport type { Confession } from \"../types/confession\";\nimport { useVideoFeedGestures } from \"../hooks/useVideoFeedGestures\";\nimport { isOnline, setOnline } from \"../lib/offlineQueue\";\nimport {\n  VideoLoadError,\n  VideoPlaybackError,\n  VideoNetworkError,\n  VideoErrorCode,\n  VideoErrorSeverity,\n  VideoErrorType,\n  VideoError,\n} from \"../types/videoErrors\";\nimport { createRetryableOperation, RetryConfig, RetryResult } from \"../utils/retryLogic\";\nimport { useGlobalVideoStore } from \"../state/globalVideoStore\";\nimport { videoErrorRecoveryService } from \"../services/VideoErrorRecoveryService\";\nimport { VideoErrorMessages, UserFriendlyError } from \"../utils/videoErrorMessages\";\nimport { videoQualitySelector } from \"../services/VideoQualitySelector\";\nimport { videoPerformanceConfig, DevicePerformanceTier, NetworkQualityTier } from \"../config/videoPerformance\";\nimport { videoCacheManager } from \"../utils/videoCacheManager\";\nimport { environmentDetector } from \"../utils/environmentDetector\";\n\ninterface TikTokVideoFeedProps {\n  onClose?: () => void;\n  initialIndex?: number;\n}\n\ninterface VideoLoadResult {\n  success: boolean;\n  videos: Confession[];\n  error?: VideoLoadError | VideoNetworkError;\n  shouldRetry: boolean;\n}\n\ninterface VideoPlayerState {\n  player: VideoPlayer | null;\n  error?: VideoPlaybackError;\n  retryCount: number;\n  lastRetryTime?: number;\n}\n\n// Enhanced fallback video sources with quality degradation\nconst FALLBACK_VIDEOS = [\n  \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n  \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4\",\n  \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4\",\n];\n\nconst { height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\nconst DEFAULT_PRELOAD_OFFSET = 2;\nconst DEFAULT_MAX_MEMORY_VIDEOS = 10;\nconst MAX_RETRY_ATTEMPTS = 3;\nconst RETRY_DELAY_BASE = 1000;\nconst CIRCUIT_BREAKER_THRESHOLD = 5;\nconst CIRCUIT_BREAKER_TIMEOUT = 30000;\n\nconst viewabilityConfig = {\n  itemVisiblePercentThreshold: 80,\n  minimumViewTime: 120,\n  waitForInteraction: false,\n};\n\n// Circuit breaker for repeated failures\nclass CircuitBreaker {\n  private failureCount = 0;\n  private lastFailureTime = 0;\n  private isOpen = false;\n  private resetTimer?: NodeJS.Timeout;\n\n  constructor(\n    private threshold: number,\n    private timeout: number,\n  ) {}\n\n  recordFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.failureCount >= this.threshold) {\n      this.open();\n    }\n  }\n\n  recordSuccess(): void {\n    this.failureCount = 0;\n    this.close();\n  }\n\n  private open(): void {\n    this.isOpen = true;\n    if (this.resetTimer) {\n      clearTimeout(this.resetTimer);\n    }\n    this.resetTimer = setTimeout(() => {\n      this.halfOpen();\n    }, this.timeout);\n  }\n\n  private halfOpen(): void {\n    this.isOpen = false;\n    this.failureCount = Math.floor(this.failureCount / 2);\n  }\n\n  private close(): void {\n    this.isOpen = false;\n    this.failureCount = 0;\n    if (this.resetTimer) {\n      clearTimeout(this.resetTimer);\n      this.resetTimer = undefined;\n    }\n  }\n\n  canAttempt(): boolean {\n    return !this.isOpen;\n  }\n\n  getState(): \"open\" | \"closed\" | \"half-open\" {\n    if (this.isOpen) return \"open\";\n    if (this.failureCount > 0) return \"half-open\";\n    return \"closed\";\n  }\n}\n\nexport default function TikTokVideoFeed({ onClose, initialIndex = 0 }: TikTokVideoFeedProps) {\n  const isFocused = useIsFocused();\n  const flashListRef = useRef<FlashListRef<Confession>>(null);\n  const [videos, setVideos] = useState<Confession[]>([]);\n  const [activeIndex, setActiveIndex] = useState(initialIndex);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [userFriendlyError, setUserFriendlyError] = useState<UserFriendlyError | null>(null);\n  const [networkStatus, setNetworkStatus] = useState(isOnline());\n  const [retryAttempts, setRetryAttempts] = useState(0);\n  const [showShareMenu, setShowShareMenu] = useState(false);\n  const [showCreatorProfile, setShowCreatorProfile] = useState(false);\n  const [videoZoom, setVideoZoom] = useState(1);\n  const [playbackSpeeds, setPlaybackSpeeds] = useState<Record<number, number>>({});\n  const scrollOffset = useSharedValue(0);\n  const hasInitializedScroll = useRef(false);\n  const loadingRef = useRef(false);\n  const appStateRef = useRef(AppState.currentState);\n  const videoPlayersRef = useRef<Map<string, VideoPlayerState>>(new Map());\n  const cleanupTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const circuitBreaker = useRef(new CircuitBreaker(CIRCUIT_BREAKER_THRESHOLD, CIRCUIT_BREAKER_TIMEOUT));\n  const fallbackVideoIndex = useRef(0);\n\n  // Device-aware configuration\n  const [deviceTier, setDeviceTier] = useState<DevicePerformanceTier>(DevicePerformanceTier.MID);\n  const [networkQualityTier, setNetworkQualityTier] = useState<NetworkQualityTier>(NetworkQualityTier.FAIR);\n  const [currentVideoQuality, setCurrentVideoQuality] = useState<\"360p\" | \"720p\" | \"1080p\">(\"720p\");\n  const [preloadOffset, setPreloadOffset] = useState(DEFAULT_PRELOAD_OFFSET);\n  const [maxMemoryVideos, setMaxMemoryVideos] = useState(DEFAULT_MAX_MEMORY_VIDEOS);\n  const qualitySelectionCache = useRef<Map<string, any>>(new Map());\n  const networkQualityMonitor = useRef<any>(null);\n\n  const globalVideoStore = useGlobalVideoStore();\n  const userPreferences = useConfessionStore((state) => state.userPreferences);\n  const [muted, setMuted] = useState(!userPreferences.sound_enabled);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const activeIndexRef = useRef(activeIndex);\n  const likeHandlerRef = useRef<(() => Promise<void>) | null>(null);\n  const loadMoreThreshold = useRef(3);\n\n  // Enhanced video source with quality selection and fallback logic\n  const activeSource = useMemo(() => {\n    if (!videos.length || activeIndex < 0 || activeIndex >= videos.length) {\n      return FALLBACK_VIDEOS[fallbackVideoIndex.current % FALLBACK_VIDEOS.length];\n    }\n\n    const video = videos[activeIndex];\n    if (!video || typeof video !== \"object\") {\n      return FALLBACK_VIDEOS[fallbackVideoIndex.current % FALLBACK_VIDEOS.length];\n    }\n\n    if (!video.videoUri || typeof video.videoUri !== \"string\") {\n      return FALLBACK_VIDEOS[fallbackVideoIndex.current % FALLBACK_VIDEOS.length];\n    }\n\n    // Check if we've had errors with this video before\n    const playerState = videoPlayersRef.current.get(video.id);\n    if (playerState?.error && (playerState.retryCount || 0) >= MAX_RETRY_ATTEMPTS) {\n      fallbackVideoIndex.current++;\n      return FALLBACK_VIDEOS[fallbackVideoIndex.current % FALLBACK_VIDEOS.length];\n    }\n\n    // Use selectedVideoUri if available (from quality selection)\n    if (video.selectedVideoUri && typeof video.selectedVideoUri === \"string\") {\n      return video.selectedVideoUri;\n    }\n\n    // Use quality-optimized URI if available\n    const selectedQuality = video.qualityMetadata?.selectedQuality;\n    if (selectedQuality && Array.isArray(video.videoVariants)) {\n      const selectedVariant = video.videoVariants.find(\n        (v: any) => v && typeof v === \"object\" && v.quality === selectedQuality,\n      );\n      if (selectedVariant?.uri && typeof selectedVariant.uri === \"string\") {\n        return selectedVariant.uri;\n      }\n    }\n\n    // Check for cached quality selection\n    const cachedQuality = qualitySelectionCache.current.get(video.videoUri);\n    if (cachedQuality?.selectedUri && typeof cachedQuality.selectedUri === \"string\") {\n      return cachedQuality.selectedUri;\n    }\n\n    return video.videoUri;\n  }, [activeIndex, videos]);\n\n  // Enhanced video player with error recovery\n  const videoPlayer: VideoPlayer | null = useVideoPlayer(activeSource, (player) => {\n    if (!player) return;\n\n    try {\n      player.loop = true;\n      player.volume = muted ? 0 : 1;\n\n      // Register player with global store\n      if (videos[activeIndex]) {\n        globalVideoStore.registerVideoPlayer(videos[activeIndex].id, player, {\n          canPlay: true,\n          canPause: true,\n          canSeek: true,\n          canSetVolume: true,\n          canSetPlaybackRate: false,\n          supportsFullscreen: false,\n          supportsPiP: false,\n        });\n      }\n    } catch (error) {\n      handlePlayerError(error as Error, videos[activeIndex]?.id);\n    }\n  });\n\n  const videoPlayerRef = useRef<VideoPlayer | null>(null);\n\n  useEffect(() => {\n    videoPlayerRef.current = videoPlayer;\n    if (videoPlayer && videos[activeIndex]) {\n      const videoId = videos[activeIndex].id;\n      const currentState = videoPlayersRef.current.get(videoId) || {\n        player: null,\n        retryCount: 0,\n      };\n\n      videoPlayersRef.current.set(videoId, {\n        ...currentState,\n        player: videoPlayer,\n      });\n    }\n  }, [videoPlayer, activeIndex, videos]);\n\n  // Enhanced error handling for player errors\n  const handlePlayerError = useCallback(\n    async (error: Error, videoId?: string) => {\n      const errorCode = error.message?.includes(\"network\")\n        ? VideoErrorCode.NETWORK_ERROR\n        : error.message?.includes(\"decode\")\n          ? VideoErrorCode.DECODE_ERROR\n          : VideoErrorCode.PLAYBACK_STALLED;\n\n      const videoError = new VideoPlaybackError(\n        errorCode,\n        `Video playback failed: ${error.message}`,\n        undefined,\n        VideoErrorSeverity.ERROR,\n      );\n\n      if (videoId) {\n        const playerState = videoPlayersRef.current.get(videoId) || {\n          player: null,\n          retryCount: 0,\n        };\n\n        // Comment 6: Use VideoErrorRecoveryService instead of local retry logic\n        const video = videos.find((v) => v.id === videoId);\n        const recoveryResult = await videoErrorRecoveryService.handleError(videoError, {\n          videoId,\n          source: video?.videoUri ?? undefined,\n          networkStatus,\n        });\n\n        if (recoveryResult.success) {\n          // Comment 9: Reset retry counter on success\n          videoPlayersRef.current.set(videoId, {\n            ...playerState,\n            retryCount: 0,\n            error: undefined,\n          });\n        } else {\n          const nextRetryCount = (playerState.retryCount ?? 0) + 1;\n          videoPlayersRef.current.set(videoId, {\n            ...playerState,\n            player: playerState.player ?? null,\n            error: videoError,\n            retryCount: nextRetryCount,\n            lastRetryTime: Date.now(),\n          });\n\n          if (recoveryResult.fallbackUsed) {\n            fallbackVideoIndex.current++;\n          }\n        }\n      }\n\n      console.warn(\"Video player error:\", videoError);\n    },\n    [videos, networkStatus],\n  );\n\n  // Recovery mechanism for video playback\n  const recoverVideoPlayback = useCallback(\n    async (videoId: string) => {\n      const playerState = videoPlayersRef.current.get(videoId);\n      if (!playerState) return;\n\n      const currentRetryCount = playerState.retryCount ?? 0;\n      const retryDelay = RETRY_DELAY_BASE * Math.pow(2, currentRetryCount);\n\n      setTimeout(async () => {\n        try {\n          if (playerState.player) {\n            const success = await globalVideoStore.recoverPlayer(videoId);\n            if (success) {\n              // Comment 9: Reset retry count on successful recovery\n              const updatedState = videoPlayersRef.current.get(videoId);\n              if (updatedState) {\n                videoPlayersRef.current.set(videoId, {\n                  ...updatedState,\n                  player: updatedState.player ?? null,\n                  retryCount: 0,\n                  error: undefined,\n                });\n              }\n              circuitBreaker.current.recordSuccess();\n            }\n          }\n        } catch (error) {\n          console.warn(`Failed to recover video ${videoId}:`, error);\n        }\n      }, retryDelay);\n    },\n    [globalVideoStore],\n  );\n\n  // Enhanced memory cleanup with progressive strategies\n  const cleanupUnusedPlayers = useCallback(() => {\n    const currentId = videos[activeIndex]?.id;\n    const keepIds = new Set<string>();\n\n    // Keep current and nearby videos\n    for (\n      let i = Math.max(0, activeIndex - preloadOffset);\n      i <= Math.min(videos.length - 1, activeIndex + preloadOffset);\n      i++\n    ) {\n      if (videos[i]) {\n        keepIds.add(videos[i].id);\n      }\n    }\n\n    // Clean up distant players with progressive disposal\n    for (const [id, playerState] of videoPlayersRef.current.entries()) {\n      if (!keepIds.has(id) && playerState.player) {\n        void globalVideoStore.unregisterVideoPlayer(id);\n        videoPlayersRef.current.delete(id);\n      }\n    }\n  }, [activeIndex, videos, globalVideoStore, preloadOffset]);\n\n  // Schedule cleanup when index changes\n  useEffect(() => {\n    if (cleanupTimeoutRef.current) {\n      clearTimeout(cleanupTimeoutRef.current);\n    }\n\n    cleanupTimeoutRef.current = setTimeout(() => {\n      cleanupUnusedPlayers();\n    }, 2000);\n\n    return () => {\n      if (cleanupTimeoutRef.current) {\n        clearTimeout(cleanupTimeoutRef.current);\n      }\n    };\n  }, [activeIndex, cleanupUnusedPlayers]);\n\n  // Handle app state changes with enhanced recovery\n  useEffect(() => {\n    const subscription = AppState.addEventListener(\"change\", (nextAppState) => {\n      if (appStateRef.current.match(/inactive|background/) && nextAppState === \"active\") {\n        // App has come to foreground\n        setNetworkStatus(isOnline());\n        if (videoPlayerRef.current && isFocused) {\n          retryVideoOperation(() => {\n            videoPlayerRef.current?.play();\n            setIsPlaying(true);\n          });\n        }\n      } else if (appStateRef.current === \"active\" && nextAppState.match(/inactive|background/)) {\n        // App going to background\n        if (videoPlayerRef.current) {\n          try {\n            videoPlayerRef.current.pause();\n            setIsPlaying(false);\n          } catch (error) {\n            // Ignore errors\n          }\n        }\n      }\n      appStateRef.current = nextAppState;\n    });\n\n    return () => subscription.remove();\n  }, [isFocused]);\n\n  // Network monitoring with auto-recovery\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const online = isOnline();\n      setNetworkStatus((prev) => {\n        if (online !== prev && online) {\n          // Network recovered - attempt to reload failed videos\n          if (videos.length === 0 || circuitBreaker.current.getState() === \"half-open\") {\n            hydrateVideosWithRetry();\n          }\n        }\n        return online;\n      });\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [videos.length]);\n\n  // Simple retry wrapper for video operations\n  const retryVideoOperation = useCallback(\n    async (operation: () => void | Promise<void>, maxRetries = 3): Promise<void> => {\n      let attempt = 0;\n      while (attempt < maxRetries) {\n        try {\n          await operation();\n          return;\n        } catch (error) {\n          attempt++;\n          if (attempt >= maxRetries) {\n            console.warn(\"Video operation failed after retries:\", error);\n            return;\n          }\n          await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));\n        }\n      }\n    },\n    [],\n  );\n\n  // Enhanced video loading with retry logic\n  const hydrateVideosWithRetry = useCallback(async (isRefresh = false, append = false): Promise<VideoLoadResult> => {\n    if (!circuitBreaker.current.canAttempt()) {\n      return {\n        success: false,\n        videos: [],\n        error: new VideoPlaybackError(\n          VideoErrorCode.RateLimitExceeded,\n          \"Too many failed attempts. Please wait before trying again.\",\n          undefined,\n          VideoErrorSeverity.WARNING,\n        ),\n        shouldRetry: false,\n      };\n    }\n\n    const retryConfig: RetryConfig = {\n      maxRetries: 3,\n      initialDelay: 1000,\n      maxDelay: 10000,\n      backoffFactor: 2,\n      shouldRetry: (error) => {\n        const online = isOnline();\n        const message = error instanceof Error ? error.message : typeof error === \"string\" ? error : undefined;\n        return online && !(message?.toLowerCase().includes(\"rate limit\") ?? false);\n      },\n    };\n\n    const loadVideos = async (): Promise<VideoLoadResult> => {\n      const [confessions, trending] = await Promise.all([\n        VideoDataService.fetchVideoConfessions(append ? 10 : 20),\n        append ? Promise.resolve([]) : VideoDataService.fetchTrendingVideos(24, 10),\n      ]);\n\n      // Ensure both arrays are valid before spreading\n      const safeConfessions = Array.isArray(confessions) ? confessions : [];\n      const safeTrending = Array.isArray(trending) ? trending : [];\n\n      const combined = [...safeTrending, ...safeConfessions].filter(\n        (item) => item && typeof item === \"object\" && item.id && item.videoUri,\n      );\n\n      if (combined.length > 0) {\n        circuitBreaker.current.recordSuccess();\n      }\n\n      return {\n        success: true,\n        videos: combined,\n        shouldRetry: false,\n      };\n    };\n\n    try {\n      const result = await createRetryableOperation(loadVideos, retryConfig);\n      return result;\n    } catch (error) {\n      const videoError = new VideoLoadError(`Failed to load videos: ${error}`, {\n        code: VideoErrorCode.LOAD_FAILED,\n        severity: VideoErrorSeverity.ERROR,\n      });\n\n      // Comment 6: Use VideoErrorRecoveryService for load errors\n      const recoveryResult = await videoErrorRecoveryService.handleError(videoError, {\n        networkStatus: isOnline(),\n      });\n\n      if (!recoveryResult.success) {\n        circuitBreaker.current.recordFailure();\n      }\n\n      return {\n        success: false,\n        videos: [],\n        error: videoError,\n        shouldRetry: recoveryResult.recoveryStrategy.canAutoRecover ?? circuitBreaker.current.canAttempt(),\n      };\n    }\n  }, []);\n\n  // Initialize device and network detection\n  const initializeDeviceAndNetwork = useCallback(async () => {\n    try {\n      // Detect device tier\n      const deviceInfo = await environmentDetector.getDeviceInfo();\n      const memoryInfo = await environmentDetector.getMemoryInfo();\n      const totalMemoryGB = memoryInfo.totalMemory / (1024 * 1024 * 1024);\n\n      let tier: DevicePerformanceTier;\n      if (totalMemoryGB >= 6) {\n        tier = DevicePerformanceTier.HIGH;\n      } else if (totalMemoryGB >= 4) {\n        tier = DevicePerformanceTier.MID;\n      } else {\n        tier = DevicePerformanceTier.LOW;\n      }\n\n      setDeviceTier(tier);\n      videoPerformanceConfig.setDeviceTier(tier);\n\n      // Update configuration based on device tier\n      const perfProfile = videoPerformanceConfig.getPreloadProfile();\n      setPreloadOffset(perfProfile.preloadWindowSize);\n      setMaxMemoryVideos(Math.min(perfProfile.preloadWindowSize * 2, 20));\n\n      // Start network quality monitoring\n      networkQualityMonitor.current = NetInfo.addEventListener((state) => {\n        handleNetworkQualityChange(state);\n      });\n\n      // Initial network quality check\n      const netInfo = await NetInfo.fetch();\n      handleNetworkQualityChange(netInfo);\n    } catch (error) {\n      console.error(\"Failed to initialize device and network:\", error);\n    }\n  }, []);\n\n  // Handle network quality changes\n  const handleNetworkQualityChange = useCallback(\n    async (state: any) => {\n      if (!state.isConnected) {\n        setNetworkQualityTier(NetworkQualityTier.POOR);\n        return;\n      }\n\n      const type = state.type?.toLowerCase();\n      const effectiveType = state.details?.cellularGeneration?.toLowerCase() || type;\n\n      let quality: NetworkQualityTier;\n      if (effectiveType === \"wifi\" || effectiveType === \"5g\") {\n        quality = NetworkQualityTier.EXCELLENT;\n      } else if (effectiveType === \"4g\") {\n        quality = NetworkQualityTier.GOOD;\n      } else if (effectiveType === \"3g\") {\n        quality = NetworkQualityTier.FAIR;\n      } else {\n        quality = NetworkQualityTier.POOR;\n      }\n\n      setNetworkQualityTier(quality);\n      videoPerformanceConfig.setNetworkQuality(quality);\n\n      // Update quality selection for current video if network improved\n      if (quality === NetworkQualityTier.EXCELLENT && videos[activeIndex]) {\n        const video = videos[activeIndex] as any;\n        const canUpgrade = await videoQualitySelector.canUpgradeQuality(video.videoUri);\n        if (canUpgrade) {\n          await updateVideoQuality(videos[activeIndex]);\n        }\n      }\n    },\n    [activeIndex, videos],\n  );\n\n  // Update video quality based on current conditions\n  const updateVideoQuality = useCallback(async (video: Confession) => {\n    try {\n      const qualityResult = await videoQualitySelector.selectVideoQuality((video as any).videoUri);\n      setCurrentVideoQuality(qualityResult.selectedQuality);\n\n      // Cache the quality selection\n      qualitySelectionCache.current.set((video as any).videoUri, {\n        selectedUri: qualityResult.variants.find((v) => v.quality === qualityResult.selectedQuality)?.uri,\n        quality: qualityResult.selectedQuality,\n        timestamp: Date.now(),\n      });\n\n      // Trigger re-render to use new quality\n      setVideos((prev) => [...prev]);\n    } catch (error) {\n      console.error(\"Failed to update video quality:\", error);\n    }\n  }, []);\n\n  // Preload upcoming videos based on device capabilities\n  const preloadUpcomingVideos = useCallback(async () => {\n    if (videos.length === 0) return;\n\n    const startIdx = Math.max(0, activeIndex - 1);\n    const endIdx = Math.min(videos.length, activeIndex + preloadOffset);\n    const videosToPreload = videos.slice(startIdx, endIdx);\n\n    const videoUris = videosToPreload.map((v) => (v as any).videoUri).filter(Boolean);\n\n    if (videoUris.length > 0) {\n      try {\n        // Use device-aware preloading\n        await videoCacheManager.preloadVideos(videoUris, \"normal\");\n\n        // Optimize quality for preloaded videos in background\n        if (videoPerformanceConfig.shouldEnableFeature(\"autoQualityUpgrade\")) {\n          setTimeout(async () => {\n            for (const video of videosToPreload) {\n              if (!(video as any).qualityMetadata) {\n                await updateVideoQuality(video);\n              }\n            }\n          }, 2000);\n        }\n      } catch (error) {\n        console.error(\"Failed to preload videos:\", error);\n      }\n    }\n  }, [videos, activeIndex, preloadOffset, deviceTier, updateVideoQuality]);\n\n  const hydrateVideos = useCallback(\n    async (isRefresh = false, append = false) => {\n      if (loadingRef.current && !append) {\n        return;\n      }\n\n      loadingRef.current = true;\n      setError(null);\n      if (!isRefresh && !append) {\n        setIsLoading(true);\n      }\n      if (isRefresh) {\n        setIsRefreshing(true);\n      }\n      if (append) {\n        setIsLoadingMore(true);\n      }\n\n      try {\n        const result = await hydrateVideosWithRetry(isRefresh, append);\n\n        if (result.success && result.videos) {\n          setVideos((prevVideos) => {\n            const dedupedMap = new Map<string, Confession>();\n\n            // Add existing videos first if appending\n            if (append) {\n              for (const item of prevVideos) {\n                if (item?.id) {\n                  dedupedMap.set(item.id, item);\n                }\n              }\n            }\n\n            // Ensure result.videos is always an array of valid objects\n            const videosToProcess = Array.isArray(result.videos)\n              ? result.videos.filter((item) => item && typeof item === \"object\" && item.id)\n              : [];\n\n            for (const item of videosToProcess) {\n              dedupedMap.set(item.id, item);\n            }\n\n            const combined = Array.from(dedupedMap.values());\n            // Limit total videos for memory management\n            const limited = combined.slice(0, maxMemoryVideos);\n\n            if (!limited.length && !append) {\n              setActiveIndex(0);\n              return [];\n            } else {\n              if (!append) {\n                setActiveIndex((prev) => {\n                  if (isRefresh) return 0;\n                  return Math.min(prev, limited.length - 1);\n                });\n                setIsPlaying(false);\n              }\n              return limited;\n            }\n          });\n\n          // Track successful load\n          VideoDataService.flushAllEvents();\n        } else if (result.error) {\n          const online = isOnline();\n          const attemptNum = retryAttempts + 1;\n          setRetryAttempts(attemptNum);\n\n          // Create VideoError from result.error\n          const videoError: VideoError = {\n            type:\n              result.error.code === VideoErrorCode.NETWORK_ERROR\n                ? VideoErrorType.NETWORK\n                : result.error.code === VideoErrorCode.RATE_LIMITED\n                  ? VideoErrorType.SERVER\n                  : VideoErrorType.UNKNOWN,\n            code: result.error.code,\n            message: result.error.message,\n            timestamp: Date.now(),\n          };\n\n          const friendlyError = VideoErrorMessages.getUserFriendlyError(videoError, attemptNum, { isOffline: !online });\n\n          setUserFriendlyError(friendlyError);\n          setError(friendlyError.message);\n\n          // Log error for analytics\n          VideoErrorMessages.logErrorForAnalytics(videoError, attemptNum);\n\n          // Pause player on error\n          if (videoPlayerRef.current) {\n            try {\n              videoPlayerRef.current.pause();\n            } catch (error) {\n              // Ignore disposal errors\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"TikTokVideoFeed: failed to load videos\", err);\n        setError(\"An unexpected error occurred. Please try again.\");\n      } finally {\n        loadingRef.current = false;\n        setIsLoading(false);\n        setIsRefreshing(false);\n        setIsLoadingMore(false);\n      }\n    },\n    [hydrateVideosWithRetry],\n  );\n\n  useEffect(() => {\n    initializeDeviceAndNetwork();\n    hydrateVideos(false);\n  }, []);\n\n  useEffect(() => {\n    activeIndexRef.current = activeIndex;\n\n    // Load more videos when approaching end\n    if (activeIndex >= videos.length - loadMoreThreshold.current && !loadingRef.current) {\n      hydrateVideos(false, true);\n    }\n  }, [activeIndex, videos.length, hydrateVideos]);\n\n  useEffect(() => {\n    setMuted(!userPreferences.sound_enabled);\n  }, [userPreferences.sound_enabled]);\n\n  useEffect(() => {\n    if (!videoPlayer) return;\n\n    retryVideoOperation(() => {\n      videoPlayer.muted = muted;\n      videoPlayer.volume = muted ? 0 : 1;\n    });\n  }, [videoPlayer, muted, retryVideoOperation]);\n\n  const pausePlayer = useCallback(() => {\n    if (!videoPlayer) return;\n\n    retryVideoOperation(() => {\n      videoPlayer.pause?.();\n      setIsPlaying(false);\n    });\n  }, [videoPlayer, retryVideoOperation]);\n\n  const playPlayer = useCallback(() => {\n    if (!videoPlayer) return;\n\n    retryVideoOperation(async () => {\n      await videoPlayer.play?.();\n      setIsPlaying(true);\n    });\n  }, [videoPlayer, retryVideoOperation]);\n\n  useEffect(() => {\n    if (!videoPlayer) return;\n\n    if (!isFocused || !videos.length || appStateRef.current !== \"active\") {\n      pausePlayer();\n      return;\n    }\n\n    playPlayer();\n  }, [videoPlayer, isFocused, videos.length, pausePlayer, playPlayer]);\n\n  useEffect(() => {\n    if (!videoPlayer || !isFocused || !videos.length || appStateRef.current !== \"active\") {\n      return;\n    }\n\n    setIsPlaying(false);\n    playPlayer();\n\n    // Comment 9: Reset retry counter when playback starts successfully\n    const currentVideo = videos[activeIndex];\n    if (currentVideo) {\n      const playerState = videoPlayersRef.current.get(currentVideo.id);\n      const retryCount = playerState?.retryCount ?? 0;\n      if (playerState && retryCount > 0) {\n        videoPlayersRef.current.set(currentVideo.id, {\n          ...playerState,\n          player: playerState.player ?? null,\n          retryCount: 0,\n          error: undefined,\n        });\n      }\n    }\n\n    // Track video view\n    if (currentVideo) {\n      VideoDataService.updateVideoViews(currentVideo.id);\n\n      // Comment 7: Only set isPlaying without contradictory currentTime/duration\n      globalVideoStore.updatePlayerState(currentVideo.id, {\n        isPlaying: true,\n      });\n    }\n  }, [activeIndex, videoPlayer, isFocused, videos.length, playPlayer, globalVideoStore]);\n\n  useEffect(() => {\n    if (!videos.length || hasInitializedScroll.current) {\n      return;\n    }\n\n    hasInitializedScroll.current = true;\n    if (initialIndex > 0) {\n      requestAnimationFrame(() => {\n        flashListRef.current?.scrollToIndex({ index: initialIndex, animated: false });\n      });\n    }\n  }, [initialIndex, videos.length]);\n\n  const handleRefresh = useCallback(() => {\n    setOnline(true); // Check connectivity on refresh\n    circuitBreaker.current.recordSuccess(); // Reset circuit breaker on manual refresh\n    hydrateVideos(true);\n  }, [hydrateVideos]);\n\n  const handleSingleTap = useCallback(() => {\n    if (isPlaying) {\n      pausePlayer();\n    } else {\n      playPlayer();\n    }\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n  }, [isPlaying, pausePlayer, playPlayer]);\n\n  const handleDoubleTap = useCallback(() => {\n    const handler = likeHandlerRef.current;\n    if (handler) {\n      handler().catch(() => undefined);\n    }\n  }, []);\n\n  const registerLikeHandler = useCallback((handler: (() => Promise<void>) | null) => {\n    likeHandlerRef.current = handler;\n  }, []);\n\n  // Gesture handlers for advanced interactions\n  const handleSwipeUp = useCallback(() => {\n    const nextIndex = activeIndex + 1;\n    if (nextIndex < videos.length) {\n      scrollToIndex(nextIndex);\n    }\n  }, [activeIndex, videos.length]);\n\n  const handleSwipeDown = useCallback(() => {\n    if (activeIndex === 0) {\n      // Pull to refresh at top\n      handleRefresh();\n    } else {\n      const prevIndex = activeIndex - 1;\n      if (prevIndex >= 0) {\n        scrollToIndex(prevIndex);\n      }\n    }\n  }, [activeIndex, handleRefresh]);\n\n  const handleSwipeLeft = useCallback(() => {\n    setShowShareMenu(true);\n  }, []);\n\n  const handleSwipeRight = useCallback(() => {\n    setShowCreatorProfile(true);\n  }, []);\n\n  const handleLongPress = useCallback(() => {\n    // Cycle playback speed\n    setPlaybackSpeeds((prev) => ({\n      ...prev,\n      [activeIndex]: (((prev[activeIndex] || 1) * 2) % 3) + 0.5, // Cycles: 0.5, 1, 1.5, 2\n    }));\n  }, [activeIndex]);\n\n  const handlePinch = useCallback((scale: number) => {\n    setVideoZoom(scale);\n  }, []);\n\n  // Scroll to specific index\n  const scrollToIndex = useCallback((index: number) => {\n    if (flashListRef.current) {\n      flashListRef.current.scrollToIndex({\n        index,\n        animated: true,\n        viewPosition: 0,\n      });\n    }\n  }, []);\n\n  // Handle liking a video\n  const handleLike = useCallback(async (video: Confession) => {\n    // Use the existing like functionality from the store\n    // This would need to be implemented based on the existing like system\n    console.log(\"Like video:\", video.id);\n  }, []);\n\n  const {\n    gestures: composedGestures,\n    containerStyle: gestureContainerStyle,\n    overlayStyle: gestureOverlayStyle,\n    resetAnimations,\n    isScrolling,\n    progressY,\n    progressX,\n    pinchScale,\n    gestureState,\n  } = useVideoFeedGestures({\n    currentIndex: activeIndex,\n    totalVideos: videos.length,\n    onLongPress: handleLongPress,\n    onRefresh: handleRefresh,\n    onSwipeUp: handleSwipeUp,\n    onSwipeDown: handleSwipeDown,\n    onSwipeLeft: handleSwipeLeft,\n    onSwipeRight: handleSwipeRight,\n    onDoubleTap: handleDoubleTap,\n    onPinch: handlePinch,\n    onPlaybackSpeedChange: handleLongPress,\n    isLoading,\n  });\n\n  useEffect(() => {\n    return () => {\n      resetAnimations();\n      // Cleanup all players on unmount\n      const cleanupPromises = Array.from(videoPlayersRef.current.keys()).map((id) =>\n        globalVideoStore.unregisterVideoPlayer(id),\n      );\n      Promise.allSettled(cleanupPromises);\n      videoPlayersRef.current.clear();\n    };\n  }, [resetAnimations, globalVideoStore]);\n\n  const handleViewableItemsChangedRef = useRef(({ viewableItems }: { viewableItems: ViewToken[] }) => {\n    if (!viewableItems?.length) return;\n\n    const visibleItem = viewableItems.find((item) => item.isViewable && typeof item.index === \"number\");\n    if (visibleItem && typeof visibleItem.index === \"number\" && visibleItem.index !== activeIndexRef.current) {\n      setActiveIndex(visibleItem.index);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n    }\n  });\n\n  const renderItem = useCallback(\n    ({ item, index }: { item: Confession; index: number }) => {\n      const isItemActive = index === activeIndex && isFocused;\n      const shouldPreload = Math.abs(index - activeIndex) <= preloadOffset;\n\n      // Note: Fallback logic handled internally by video components\n\n      return (\n        <TikTokVideoItem\n          confession={item}\n          isActive={isItemActive}\n          shouldPreload={shouldPreload}\n          videoPlayer={isItemActive ? videoPlayer : null}\n          onClose={onClose}\n          muted={muted}\n          onToggleMute={() => setMuted((prev) => !prev)}\n          isPlaying={isItemActive ? isPlaying : false}\n          onRegisterLikeHandler={registerLikeHandler}\n          progressY={progressY}\n          onSingleTap={handleSingleTap}\n          onDoubleTap={handleDoubleTap}\n          networkStatus={networkStatus}\n        />\n      );\n    },\n    [\n      activeIndex,\n      isFocused,\n      isPlaying,\n      muted,\n      onClose,\n      registerLikeHandler,\n      videoPlayer,\n      progressY,\n      handleSingleTap,\n      handleDoubleTap,\n      networkStatus,\n      preloadOffset,\n    ],\n  );\n\n  const errorOpacity = useAnimatedStyle(() => ({\n    opacity: withTiming(error && !videos.length ? 1 : 0, { duration: 300 }),\n  }));\n\n  if (isLoading && !videos.length) {\n    return (\n      <>\n        <VideoFeedSkeleton\n          isVisible={true}\n          state=\"initial\"\n          showNetworkStatus={!networkStatus}\n          animationTiming={{ fade: 400, stagger: 100 }}\n        />\n        <NetworkStatusIndicator\n          position=\"top\"\n          minimalMode={false}\n          persistentMode={!networkStatus}\n          scrollOffset={scrollOffset}\n          onRetry={handleRefresh}\n        />\n      </>\n    );\n  }\n\n  if (error && !videos.length) {\n    return (\n      <>\n        <VideoFeedSkeleton\n          isVisible={true}\n          state=\"initial\"\n          showErrorIndicator={true}\n          showNetworkStatus={!networkStatus}\n        />\n        <View style={styles.centeredContainer}>\n          <Animated.View style={errorOpacity}>\n            <StatusBar hidden />\n            <Ionicons\n              name={userFriendlyError?.context === \"network\" ? \"cloud-offline-outline\" : \"alert-circle-outline\"}\n              size={48}\n              color={userFriendlyError?.severity === \"critical\" ? \"#ff3333\" : \"#ff6666\"}\n            />\n            <Text style={styles.errorTitle}>{userFriendlyError?.title || \"Oops!\"}</Text>\n            <Text style={styles.centeredText}>{userFriendlyError?.message || error}</Text>\n\n            {userFriendlyError?.retryStrategy.shouldRetry && (\n              <Pressable\n                style={[styles.primaryButton]}\n                onPress={handleRefresh}\n                accessibilityRole=\"button\"\n                accessibilityLabel={userFriendlyError.actionText}\n              >\n                <Text style={styles.primaryButtonText}>{userFriendlyError.actionText || \"Retry\"}</Text>\n              </Pressable>\n            )}\n\n            {userFriendlyError?.secondaryActionText && (\n              <Pressable style={styles.secondaryButton} onPress={() => {}} accessibilityRole=\"button\">\n                <Text style={styles.secondaryButtonText}>{userFriendlyError.secondaryActionText}</Text>\n              </Pressable>\n            )}\n\n            {userFriendlyError?.retryStrategy.explanation && (\n              <Text style={styles.retryExplanation}>{userFriendlyError.retryStrategy.explanation}</Text>\n            )}\n          </Animated.View>\n        </View>\n        <NetworkStatusIndicator position=\"top\" persistentMode={true} onRetry={handleRefresh} />\n      </>\n    );\n  }\n\n  if (!videos.length) {\n    return (\n      <View style={styles.centeredContainer}>\n        <StatusBar hidden />\n        <Ionicons name=\"videocam-off-outline\" size={48} color=\"#555555\" />\n        <Text style={styles.centeredText}>No videos available right now</Text>\n        <Text style={styles.centeredMeta}>Pull down to refresh</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ErrorBoundary resetKeys={[videos.length, activeIndex]}>\n      <View style={styles.feedContainer}>\n        <StatusBar hidden />\n        <GestureDetector gesture={composedGestures}>\n          <Animated.View style={[styles.gestureContainer, gestureContainerStyle]}>\n            <FlashList\n              ref={flashListRef}\n              data={videos}\n              renderItem={renderItem}\n              keyExtractor={(item) => item.id}\n              onViewableItemsChanged={handleViewableItemsChangedRef.current}\n              viewabilityConfig={viewabilityConfig}\n              pagingEnabled\n              snapToInterval={SCREEN_HEIGHT}\n              snapToAlignment=\"start\"\n              decelerationRate=\"fast\"\n              showsVerticalScrollIndicator={false}\n              removeClippedSubviews\n              refreshControl={\n                <RefreshControl\n                  tintColor=\"#ffffff\"\n                  colors={[\"#ffffff\"]}\n                  refreshing={isRefreshing}\n                  onRefresh={handleRefresh}\n                  progressViewOffset={20}\n                />\n              }\n              ListFooterComponent={\n                isRefreshing && videos.length > 0 ? (\n                  <ActivityIndicator color=\"#ffffff\" style={styles.footerSpinner} />\n                ) : null\n              }\n              getItemType={() => \"video\"}\n              drawDistance={SCREEN_HEIGHT * 2}\n            />\n\n            {isRefreshing && <VideoFeedSkeleton isVisible={true} state=\"pullToRefresh\" itemCount={1} />}\n\n            {isLoadingMore && <VideoFeedSkeleton isVisible={true} state=\"loadMore\" itemCount={1} />}\n\n            <NetworkStatusIndicator\n              position=\"top\"\n              minimalMode={true}\n              autoHideDelay={3000}\n              scrollOffset={scrollOffset}\n            />\n          </Animated.View>\n        </GestureDetector>\n      </View>\n    </ErrorBoundary>\n  );\n}\n\nconst styles = {\n  gestureContainer: {\n    flex: 1,\n  },\n  feedContainer: {\n    flex: 1,\n    backgroundColor: \"#000000\",\n  },\n  centeredContainer: {\n    flex: 1,\n    backgroundColor: \"#000000\",\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n    paddingHorizontal: 24,\n  },\n  centeredText: {\n    color: \"#ffffff\",\n    marginTop: 16,\n    textAlign: \"center\" as const,\n    fontSize: 16,\n    fontWeight: \"500\" as const,\n  },\n  centeredMeta: {\n    color: \"#aaaaaa\",\n    marginTop: 8,\n    textAlign: \"center\" as const,\n    fontSize: 14,\n  },\n  offlineText: {\n    color: \"#ff6666\",\n    marginTop: 8,\n    fontSize: 12,\n  },\n  retryButton: {\n    marginTop: 24,\n    paddingHorizontal: 32,\n    paddingVertical: 12,\n    borderRadius: 24,\n    backgroundColor: \"#1f1f1f\",\n    borderWidth: 1,\n    borderColor: \"#333333\",\n  },\n  retryButtonDisabled: {\n    opacity: 0.5,\n  },\n  retryText: {\n    color: \"#ffffff\",\n    fontWeight: \"600\" as const,\n    fontSize: 15,\n  },\n  circuitBreakerText: {\n    color: \"#ffaa00\",\n    marginTop: 8,\n    fontSize: 12,\n    textAlign: \"center\" as const,\n  },\n  footerSpinner: {\n    paddingVertical: 24,\n  },\n  offlineIndicator: {\n    position: \"absolute\" as const,\n    top: 60,\n    alignSelf: \"center\" as const,\n    backgroundColor: \"rgba(0,0,0,0.8)\",\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    flexDirection: \"row\" as const,\n    alignItems: \"center\" as const,\n    gap: 8,\n  },\n  offlineIndicatorText: {\n    color: \"#ff6666\",\n    fontSize: 12,\n    fontWeight: \"600\" as const,\n  },\n  recoveryIndicator: {\n    position: \"absolute\" as const,\n    top: 100,\n    alignSelf: \"center\" as const,\n    backgroundColor: \"rgba(0,0,0,0.8)\",\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    flexDirection: \"row\" as const,\n    alignItems: \"center\" as const,\n    gap: 8,\n  },\n  recoveryIndicatorText: {\n    color: \"#ffaa00\",\n    fontSize: 12,\n    fontWeight: \"600\" as const,\n  },\n  errorTitle: {\n    color: \"#ffffff\",\n    fontSize: 20,\n    fontWeight: \"700\" as const,\n    marginTop: 12,\n    marginBottom: 8,\n  },\n  primaryButton: {\n    marginTop: 24,\n    paddingHorizontal: 36,\n    paddingVertical: 14,\n    borderRadius: 24,\n    backgroundColor: \"#3B82F6\",\n  },\n  primaryButtonText: {\n    color: \"#ffffff\",\n    fontWeight: \"600\" as const,\n    fontSize: 16,\n  },\n  secondaryButton: {\n    marginTop: 12,\n    paddingHorizontal: 24,\n    paddingVertical: 10,\n  },\n  secondaryButtonText: {\n    color: \"#60A5FA\",\n    fontSize: 14,\n  },\n  retryExplanation: {\n    color: \"#888888\",\n    fontSize: 12,\n    marginTop: 16,\n    textAlign: \"center\" as const,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TikTokVideoItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TimePeriodButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TranscriptionOverlay.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fadeAnim' and 'startListening'. Either include them or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fadeAnim, isRecording, startListening]","fix":{"range":[1941,1954],"text":"[fadeAnim, isRecording, startListening]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\nimport { View, Text, Animated } from \"react-native\";\n// Demo mode - no native voice imports for Expo Go\n// import Voice from '@react-native-voice/voice';\n\ninterface TranscriptionOverlayProps {\n  isRecording: boolean;\n  onTranscriptionUpdate?: (text: string) => void;\n  transcriptionText?: string;\n}\n\nexport const TranscriptionOverlay: React.FC<TranscriptionOverlayProps> = ({\n  isRecording,\n  onTranscriptionUpdate,\n  transcriptionText,\n}) => {\n  const [transcription, setTranscription] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n  const transcriptionIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null);\n\n  useEffect(() => {\n    if (transcriptionText !== undefined) {\n      setTranscription(transcriptionText);\n      if (transcriptionText) {\n        onTranscriptionUpdate?.(transcriptionText);\n      }\n    }\n  }, [transcriptionText, onTranscriptionUpdate]);\n\n  useEffect(() => {\n    let fadeAnimation: Animated.CompositeAnimation | null = null;\n\n    if (isRecording) {\n      startListening();\n      fadeAnimation = Animated.timing(fadeAnim, {\n        toValue: 1,\n        duration: 300,\n        useNativeDriver: true,\n      });\n      fadeAnimation.start();\n    } else {\n      stopListening();\n      fadeAnimation = Animated.timing(fadeAnim, {\n        toValue: 0,\n        duration: 300,\n        useNativeDriver: true,\n      });\n      fadeAnimation.start();\n    }\n\n    // Cleanup function for component unmount\n    return () => {\n      // Stop listening\n      stopListening();\n\n      // Stop any running animations\n      if (fadeAnimation) {\n        fadeAnimation.stop();\n      }\n\n      // Clear any intervals\n      if (transcriptionIntervalRef.current) {\n        clearInterval(transcriptionIntervalRef.current);\n        transcriptionIntervalRef.current = null;\n      }\n    };\n  }, [isRecording]);\n\n  const startListening = async () => {\n    setIsListening(true);\n\n    // When explicit transcription text is provided, simply display it and skip simulation\n    if (transcriptionText !== undefined) {\n      setTranscription(transcriptionText);\n      if (transcriptionText) {\n        onTranscriptionUpdate?.(transcriptionText);\n      }\n      return;\n    }\n\n    if (__DEV__) {\n      console.log(\"🎯 Demo: Starting speech recognition simulation\");\n    }\n\n    // Simulate transcription updates for Expo Go/demo environments\n    const demoTexts = [\n      \"This is my anonymous confession...\",\n      \"I have something to share...\",\n      \"Here is what I want to say...\",\n      \"My secret story is...\",\n    ];\n\n    let textIndex = 0;\n    const interval = setInterval(() => {\n      if (textIndex < demoTexts.length) {\n        const currentText = demoTexts[textIndex];\n        setTranscription(currentText);\n        onTranscriptionUpdate?.(currentText);\n        textIndex++;\n      } else {\n        if (transcriptionIntervalRef.current) {\n          clearInterval(transcriptionIntervalRef.current);\n          transcriptionIntervalRef.current = null;\n        }\n      }\n    }, 2000);\n\n    transcriptionIntervalRef.current = interval;\n  };\n\n  const stopListening = async () => {\n    if (__DEV__) {\n      console.log(\"🎯 Demo: Stopping speech recognition simulation\");\n    }\n    setIsListening(false);\n\n    // Clear simulation interval\n    if (transcriptionIntervalRef.current) {\n      clearInterval(transcriptionIntervalRef.current);\n      transcriptionIntervalRef.current = null;\n    }\n  };\n\n  if (!isRecording && !transcription) return null;\n\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        bottom: 120,\n        left: 20,\n        right: 20,\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        borderRadius: 12,\n        padding: 16,\n        opacity: fadeAnim,\n      }}\n    >\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", marginBottom: 8 }}>\n        <View\n          style={{\n            width: 8,\n            height: 8,\n            borderRadius: 4,\n            backgroundColor: isListening ? \"#10B981\" : \"#6B7280\",\n            marginRight: 8,\n          }}\n        />\n        <Text style={{ color: \"#FFFFFF\", fontSize: 12, fontWeight: \"600\" }}>Live Transcription</Text>\n      </View>\n      <Text\n        style={{\n          color: \"#FFFFFF\",\n          fontSize: 14,\n          lineHeight: 20,\n          minHeight: 20,\n        }}\n      >\n        {transcription || (isListening ? \"Listening...\" : \"Start speaking...\")}\n      </Text>\n    </Animated.View>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TrendingAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TrendingBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_isRefreshing' is assigned a value but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'opacity' and 'translateY'. Either include them or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [opacity, translateY, visible]","fix":{"range":[1590,1599],"text":"[opacity, translateY, visible]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { View, Text, ScrollView, Pressable } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { BottomTabNavigationProp } from \"@react-navigation/bottom-tabs\";\nimport { useTrendingStore } from \"../state/trendingStore\";\nimport { TabParamList } from \"../navigation/AppNavigator\";\nimport TrendingBarItem from \"./TrendingBarItem\";\nimport { usePreferenceAwareHaptics } from \"../utils/haptics\";\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming, withSpring } from \"react-native-reanimated\";\n\ntype NavigationProp = BottomTabNavigationProp<TabParamList>;\n\ninterface TrendingBarProps {\n  visible?: boolean;\n}\n\nexport default function TrendingBar({ visible = true }: TrendingBarProps) {\n  const navigation = useNavigation<NavigationProp>();\n  const [_isRefreshing, setIsRefreshing] = useState(false);\n  const { impactAsync } = usePreferenceAwareHaptics();\n\n  const { trendingHashtags, isLoading, error, loadTrendingHashtags, searchByHashtag } = useTrendingStore();\n\n  const opacity = useSharedValue(visible ? 1 : 0);\n  const translateY = useSharedValue(visible ? 0 : -50);\n\n  useEffect(() => {\n    // Load trending data on mount\n    if (visible) {\n      loadTrendingHashtags(24, 5); // Past 24 hours, top 5\n    }\n  }, [loadTrendingHashtags, visible]);\n\n  useEffect(() => {\n    opacity.value = withTiming(visible ? 1 : 0, { duration: 300 });\n    translateY.value = withSpring(visible ? 0 : -50, {\n      damping: 15,\n      stiffness: 100,\n    });\n  }, [visible]);\n\n  const handleHashtagPress = (hashtag: string) => {\n    // Navigate to trending screen with search\n    navigation.navigate(\"Trending\");\n    // Trigger search after navigation\n    setTimeout(() => {\n      searchByHashtag(hashtag);\n    }, 100);\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    impactAsync();\n    try {\n      await loadTrendingHashtags(24, 5);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleViewAll = () => {\n    impactAsync();\n    navigation.navigate(\"Trending\");\n  };\n\n  const animatedStyle = useAnimatedStyle(\n    () => ({\n      opacity: opacity.value,\n      transform: [{ translateY: translateY.value }],\n    }),\n    [],\n  );\n\n  if (!visible) return null;\n\n  return (\n    <Animated.View\n      style={[\n        {\n          backgroundColor: \"#000000\",\n          borderBottomWidth: 1,\n          borderBottomColor: \"#374151\",\n          shadowColor: \"#1D9BF0\",\n          shadowOffset: { width: 0, height: 1 },\n          shadowOpacity: 0.1,\n          shadowRadius: 2,\n          elevation: 2,\n        },\n        animatedStyle,\n      ]}\n    >\n      {/* Header */}\n      <View className=\"flex-row items-center justify-between px-4 py-2\">\n        <View className=\"flex-row items-center\">\n          <Ionicons name=\"trending-up\" size={16} color=\"#1D9BF0\" />\n          <Text className=\"text-white text-13 font-semibold ml-2\">Trending Now</Text>\n          {isLoading && (\n            <View className=\"ml-2\">\n              <Ionicons name=\"refresh\" size={12} color=\"#6B7280\" />\n            </View>\n          )}\n        </View>\n\n        <Pressable\n          onPress={handleViewAll}\n          className=\"flex-row items-center touch-target px-2 py-2 -mx-2 -my-2 rounded-lg\"\n          accessibilityRole=\"button\"\n          accessibilityLabel=\"View all trending topics\"\n        >\n          <Text className=\"text-blue-400 text-12 font-medium\">View All</Text>\n          <Ionicons name=\"chevron-forward\" size={12} color=\"#1D9BF0\" />\n        </Pressable>\n      </View>\n\n      {/* Trending Items */}\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} className=\"px-4 pb-3\">\n        {trendingHashtags.length > 0 ? (\n          trendingHashtags.map((hashtag, index) => (\n            <TrendingBarItem\n              key={`${hashtag.hashtag}-${index}`}\n              item={hashtag}\n              onPress={handleHashtagPress}\n              index={index}\n            />\n          ))\n        ) : (\n          <Pressable\n            onPress={error ? handleRefresh : undefined}\n            className=\"flex-row items-center justify-center py-2 px-4 bg-gray-900/50 rounded-lg min-w-[200px]\"\n          >\n            <Ionicons name={error ? \"alert-circle\" : isLoading ? \"refresh\" : \"time\"} size={14} color=\"#6B7280\" />\n            <Text className=\"text-gray-400 text-12 ml-2\">\n              {error ? \"Tap to retry\" : isLoading ? \"Loading...\" : \"No trending hashtags yet\"}\n            </Text>\n          </Pressable>\n        )}\n      </ScrollView>\n    </Animated.View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TrendingBarChart.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'progress'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [percentage, animated, progress]","fix":{"range":[814,836],"text":"[percentage, animated, progress]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TrendingBarItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/TrendingSkeleton.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'shimmer'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [shimmer]","fix":{"range":[608,610],"text":"[shimmer]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/UnifiedVideoItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VideoPlayer' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SharedValue' is defined but never used.","line":14,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Confession' is defined but never used.","line":25,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isOnline' is defined but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'likesCount' is assigned a value but never used.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Dimensions, Pressable, Text, View, ActivityIndicator } from \"react-native\";\nimport { VideoView, type VideoPlayer, type VideoPlayerStatus } from \"expo-video\";\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSequence,\n  withSpring,\n  withTiming,\n  runOnJS,\n  interpolate,\n  FadeIn,\n  FadeOut,\n  type SharedValue,\n} from \"react-native-reanimated\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as Haptics from \"expo-haptics\";\nimport { Gesture, GestureDetector } from \"react-native-gesture-handler\";\nimport { format, isValid } from \"date-fns\";\nimport { LinearGradient } from \"expo-linear-gradient\";\n\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { VideoDataService } from \"../services/VideoDataService\";\nimport VideoInteractionOverlay from \"./VideoInteractionOverlay\";\nimport type { Confession } from \"../types/confession\";\nimport { isOnline, enqueue } from \"../lib/offlineQueue\";\nimport { normalizeVideoError } from \"../types/videoErrors\";\nimport type { VideoItemProps } from \"../types/videoComponents\";\n\nconst { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get(\"window\");\n\nconst FALLBACK_USERNAME = \"@anonymous\";\nconst DOUBLE_TAP_MAX_DELAY = 280;\n\nconst formatTimestamp = (timestamp: number) => {\n  const date = new Date(timestamp);\n  if (!isValid(date)) {\n    return \"Just now\";\n  }\n  return format(date, \"MMM d, h:mm a\");\n};\n\nconst sanitizeUri = (uri?: string | null) => {\n  if (!uri) {\n    return \"\";\n  }\n  return uri.trim();\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nexport default function UnifiedVideoItem({\n  confession,\n  isActive,\n  shouldPreload = false,\n  onClose,\n  videoPlayer,\n  muted,\n  onToggleMute,\n  isPlaying,\n  onRegisterLikeHandler,\n  progressY,\n  onSingleTap,\n  onDoubleTap,\n  networkStatus = true,\n  variant = \"tiktok\",\n}: VideoItemProps) {\n  const toggleLike = useConfessionStore((state) => state.toggleLike);\n\n  const [isLiked, setIsLiked] = useState(Boolean(confession.isLiked));\n  const [likesCount, setLikesCount] = useState(confession.likes || 0);\n  const [viewsCount, setViewsCount] = useState(confession.views || 0);\n  const [videoError, setVideoError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const likeInFlightRef = useRef(false);\n  const viewTrackedRef = useRef(false);\n  const videoLoadedRef = useRef(false);\n\n  const heartScale = useSharedValue(0.5);\n  const heartOpacity = useSharedValue(0);\n  const lastTapTime = useSharedValue(0);\n  const tapTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const tapScale = useSharedValue(1);\n  const muteButtonScale = useSharedValue(1);\n  const closeButtonScale = useSharedValue(1);\n\n  useEffect(() => {\n    if (!videoPlayer) {\n      return undefined;\n    }\n\n    const applyStatus = (status: VideoPlayerStatus, error?: { message?: string }) => {\n      if (status === \"readyToPlay\") {\n        setIsLoading(false);\n        setVideoError(false);\n      } else if (status === \"loading\" || status === \"idle\") {\n        setIsLoading(true);\n      } else if (status === \"error\") {\n        setIsLoading(false);\n        setVideoError(true);\n        if (__DEV__ && error?.message) {\n          console.warn(\"UnifiedVideoItem: Video status error\", error.message);\n        }\n      }\n    };\n\n    applyStatus(videoPlayer.status as VideoPlayerStatus);\n\n    const statusSubscription = videoPlayer.addListener(\"statusChange\", ({ status, error }: any) => {\n      applyStatus(status as VideoPlayerStatus, error);\n    });\n\n    const sourceSubscription = videoPlayer.addListener(\"sourceChange\", () => {\n      setIsLoading(true);\n      setVideoError(false);\n    });\n\n    return () => {\n      statusSubscription.remove();\n      sourceSubscription.remove();\n    };\n  }, [videoPlayer]);\n\n  const description = useMemo(() => {\n    return (confession.transcription && confession.transcription.trim()) || confession.content;\n  }, [confession.content, confession.transcription]);\n\n  const videoUri = useMemo(() => sanitizeUri(confession.videoUri), [confession.videoUri]);\n  const timestampLabel = useMemo(() => formatTimestamp(confession.timestamp), [confession.timestamp]);\n\n  useEffect(() => {\n    setIsLiked(Boolean(confession.isLiked));\n    setLikesCount(confession.likes || 0);\n    setViewsCount(confession.views || 0);\n  }, [confession.id, confession.isLiked, confession.likes, confession.views]);\n\n  // Track view when video becomes active\n  useEffect(() => {\n    if (isActive && !viewTrackedRef.current && networkStatus) {\n      viewTrackedRef.current = true;\n      VideoDataService.updateVideoViews(confession.id).then((newViews) => {\n        if (newViews !== null) {\n          setViewsCount(newViews);\n        }\n      });\n    } else if (!isActive) {\n      viewTrackedRef.current = false;\n    }\n  }, [isActive, confession.id, networkStatus]);\n\n  // Handle video load completion\n  useEffect(() => {\n    if (isActive && videoPlayer) {\n      const timer = setTimeout(() => {\n        setIsLoading(false);\n        videoLoadedRef.current = true;\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n    return undefined;\n  }, [isActive, videoPlayer]);\n\n  // Cleanup tap timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (tapTimeoutRef.current) {\n        clearTimeout(tapTimeoutRef.current);\n        tapTimeoutRef.current = null;\n      }\n    };\n  }, []);\n\n  const triggerHeartAnimation = useCallback(() => {\n    heartOpacity.value = withSequence(withTiming(1, { duration: 100 }), withTiming(0, { duration: 500 }));\n    heartScale.value = withSequence(\n      withSpring(1.6, { damping: 10, stiffness: 200 }),\n      withTiming(0.8, { duration: 300 }),\n    );\n  }, [heartOpacity, heartScale]);\n\n  const handleLike = useCallback(async () => {\n    if (likeInFlightRef.current) {\n      return;\n    }\n    likeInFlightRef.current = true;\n\n    const wasLiked = isLiked;\n    const nextLiked = !wasLiked;\n\n    // Optimistic update\n    setIsLiked(nextLiked);\n    setLikesCount((prev) => prev + (nextLiked ? 1 : -1));\n\n    try {\n      triggerHeartAnimation();\n      Haptics.impactAsync(nextLiked ? Haptics.ImpactFeedbackStyle.Medium : Haptics.ImpactFeedbackStyle.Light).catch(\n        () => undefined,\n      );\n\n      if (networkStatus) {\n        await toggleLike(confession.id);\n        VideoDataService.updateVideoLikes(confession.id, nextLiked);\n      } else {\n        // Queue for offline processing\n        enqueue(\"video.like\", {\n          confessionId: confession.id,\n          isLiked: nextLiked,\n          timestamp: Date.now(),\n        });\n      }\n    } catch (error: unknown) {\n      // Revert on error\n      setIsLiked(wasLiked);\n      setLikesCount((prev) => prev + (wasLiked ? 1 : -1));\n      const err = normalizeVideoError(error);\n      console.error(\"UnifiedVideoItem: failed to toggle like\", err);\n    } finally {\n      likeInFlightRef.current = false;\n    }\n  }, [confession.id, isLiked, toggleLike, triggerHeartAnimation, networkStatus]);\n\n  const handleLikeFromOverlay = useCallback(\n    (liked: boolean) => {\n      setIsLiked(liked);\n      setLikesCount((prev) => prev + (liked ? 1 : -1));\n      if (liked) {\n        triggerHeartAnimation();\n      }\n    },\n    [triggerHeartAnimation],\n  );\n\n  const handleMuteToggle = useCallback(() => {\n    muteButtonScale.value = withSequence(\n      withSpring(0.8, { damping: 15, stiffness: 400 }),\n      withSpring(1, { damping: 15, stiffness: 400 }),\n    );\n    onToggleMute();\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n  }, [onToggleMute, muteButtonScale]);\n\n  const handleClose = useCallback(() => {\n    closeButtonScale.value = withSequence(\n      withSpring(0.8, { damping: 15, stiffness: 400 }),\n      withSpring(1, { damping: 15, stiffness: 400 }),\n    );\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => undefined);\n    onClose?.();\n  }, [onClose, closeButtonScale]);\n\n  const heartAnimatedStyle = useAnimatedStyle(() => ({\n    opacity: heartOpacity.value,\n    transform: [{ scale: heartScale.value }],\n  }));\n\n  const muteButtonAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: muteButtonScale.value }],\n  }));\n\n  const closeButtonAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: closeButtonScale.value }],\n  }));\n\n  useEffect(() => {\n    if (isActive) {\n      onRegisterLikeHandler(handleLike);\n      return () => onRegisterLikeHandler(null);\n    }\n    onRegisterLikeHandler(null);\n    return undefined;\n  }, [handleLike, isActive, onRegisterLikeHandler]);\n\n  const handleSingleTapJS = useCallback(() => {\n    onSingleTap?.();\n  }, [onSingleTap]);\n\n  const handleDoubleTapJS = useCallback(() => {\n    onDoubleTap?.();\n  }, [onDoubleTap]);\n\n  const handleTapEvaluation = useCallback(\n    (timestamp: number) => {\n      if (tapTimeoutRef.current) {\n        clearTimeout(tapTimeoutRef.current);\n        tapTimeoutRef.current = null;\n      }\n\n      const timeSinceLastTap = timestamp - lastTapTime.value;\n\n      if (timeSinceLastTap < DOUBLE_TAP_MAX_DELAY) {\n        handleDoubleTapJS();\n        lastTapTime.value = 0;\n      } else {\n        lastTapTime.value = timestamp;\n        tapTimeoutRef.current = setTimeout(() => {\n          handleSingleTapJS();\n          tapTimeoutRef.current = null;\n        }, DOUBLE_TAP_MAX_DELAY);\n      }\n    },\n    [handleDoubleTapJS, handleSingleTapJS, lastTapTime],\n  );\n\n  const tapGesture = Gesture.Tap()\n    .numberOfTaps(1)\n    .maxDuration(250)\n    .maxDistance(10)\n    .onStart(() => {\n      tapScale.value = withSequence(withTiming(0.98, { duration: 80 }), withTiming(1, { duration: 80 }));\n    })\n    .onEnd(() => {\n      runOnJS(handleTapEvaluation)(Date.now());\n    });\n\n  const videoWrapperAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: tapScale.value }],\n  }));\n\n  const infoOverlayStyle = useAnimatedStyle(() => {\n    if (!progressY) {\n      return { opacity: 1 };\n    }\n    const opacity = interpolate(Math.abs(progressY.value), [0, 0.1, 0.3], [1, 0.8, 0.4]);\n    return { opacity };\n  });\n\n  const playPauseOverlayStyle = useAnimatedStyle(() => ({\n    opacity: withTiming(isPlaying ? 0 : 1, { duration: 200 }),\n    transform: [{ scale: withSpring(isPlaying ? 0.8 : 1, { damping: 15, stiffness: 200 }) }],\n  }));\n\n  if (!videoUri) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.errorContainer}>\n          <Ionicons name=\"videocam-off-outline\" size={48} color=\"#666666\" />\n          <Text style={styles.errorText}>Video unavailable</Text>\n          <Text style={styles.errorSubtext}>This video cannot be played</Text>\n        </View>\n      </View>\n    );\n  }\n\n  if (videoError) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.errorContainer}>\n          <Ionicons name=\"alert-circle-outline\" size={48} color=\"#ff6666\" />\n          <Text style={styles.errorText}>Failed to load video</Text>\n          <Pressable style={styles.retryButton} onPress={() => setVideoError(false)} accessibilityRole=\"button\">\n            <Text style={styles.retryText}>Try Again</Text>\n          </Pressable>\n        </View>\n      </View>\n    );\n  }\n\n  // Variant-specific rendering can be added here\n  const renderVariantSpecificUI = () => {\n    if (variant === \"enhanced\") {\n      // Add enhanced-specific UI elements\n      return null;\n    }\n    return null;\n  };\n\n  return (\n    <View style={styles.container} accessibilityLabel=\"Video confession\">\n      <GestureDetector gesture={tapGesture}>\n        <Animated.View style={[styles.videoWrapper, videoWrapperAnimatedStyle]}>\n          {isActive && videoPlayer ? (\n            <>\n              <VideoView\n                player={videoPlayer}\n                style={styles.video}\n                contentFit=\"cover\"\n                fullscreenOptions={{ enable: false }}\n                allowsPictureInPicture={false}\n                nativeControls={false}\n              />\n\n              {isLoading && (\n                <Animated.View\n                  entering={FadeIn.duration(200)}\n                  exiting={FadeOut.duration(200)}\n                  style={styles.loadingOverlay}\n                >\n                  <ActivityIndicator size=\"large\" color=\"#ffffff\" />\n                </Animated.View>\n              )}\n            </>\n          ) : (\n            <View style={styles.inactivePlaceholder}>\n              <LinearGradient colors={[\"#1a1a1a\", \"#0a0a0a\"]} style={styles.gradientBackground} />\n              <Ionicons name=\"play-circle\" size={56} color=\"#4d4d4d\" />\n              <Text style={styles.placeholderText}>Swipe to play</Text>\n            </View>\n          )}\n\n          <Animated.View pointerEvents=\"none\" style={[styles.heartOverlay, heartAnimatedStyle]}>\n            <Ionicons name=\"heart\" size={100} color=\"#FF3040\" />\n          </Animated.View>\n\n          {!isPlaying && isActive && !isLoading && (\n            <Animated.View style={[styles.playOverlay, playPauseOverlayStyle]} pointerEvents=\"none\">\n              <View style={styles.playButton}>\n                <Ionicons name=\"play\" size={40} color=\"#ffffff\" />\n              </View>\n            </Animated.View>\n          )}\n        </Animated.View>\n      </GestureDetector>\n\n      <LinearGradient\n        colors={[\"transparent\", \"rgba(0,0,0,0.4)\", \"rgba(0,0,0,0.7)\"]}\n        style={styles.bottomGradient}\n        pointerEvents=\"none\"\n      />\n\n      <Animated.View style={[styles.infoOverlay, infoOverlayStyle]} pointerEvents=\"box-none\">\n        <View style={styles.textColumn}>\n          <View style={styles.userRow}>\n            <Text style={styles.usernameText}>{FALLBACK_USERNAME}</Text>\n            {!networkStatus && (\n              <View style={styles.offlineBadge}>\n                <Ionicons name=\"wifi-outline\" size={12} color=\"#ff6666\" />\n              </View>\n            )}\n          </View>\n          <Text style={styles.descriptionText} numberOfLines={3} accessibilityRole=\"text\">\n            {description}\n          </Text>\n          <View style={styles.metaRow}>\n            <Text style={styles.timestampText}>{timestampLabel}</Text>\n            <View style={styles.statsRow}>\n              <Ionicons name=\"eye-outline\" size={12} color=\"rgba(255,255,255,0.6)\" />\n              <Text style={styles.statText}>{viewsCount.toLocaleString()}</Text>\n            </View>\n          </View>\n        </View>\n      </Animated.View>\n\n      <VideoInteractionOverlay\n        confession={confession}\n        onLike={handleLikeFromOverlay}\n        isVisible={isActive}\n        onViewUpdate={() => {}}\n        style={styles.interactionOverlay}\n      />\n\n      <AnimatedPressable\n        style={[styles.muteButton, muteButtonAnimatedStyle]}\n        onPress={handleMuteToggle}\n        accessibilityRole=\"button\"\n        accessibilityLabel={muted ? \"Unmute video\" : \"Mute video\"}\n        hitSlop={12}\n      >\n        <View style={styles.controlButton}>\n          <Ionicons name={muted ? \"volume-mute\" : \"volume-high\"} size={20} color=\"#ffffff\" />\n        </View>\n      </AnimatedPressable>\n\n      {onClose && (\n        <AnimatedPressable\n          style={[styles.closeButton, closeButtonAnimatedStyle]}\n          onPress={handleClose}\n          accessibilityRole=\"button\"\n          accessibilityLabel=\"Close video feed\"\n          hitSlop={12}\n        >\n          <View style={styles.controlButton}>\n            <Ionicons name=\"close\" size={22} color=\"#ffffff\" />\n          </View>\n        </AnimatedPressable>\n      )}\n\n      {renderVariantSpecificUI()}\n    </View>\n  );\n}\n\nconst styles = {\n  container: {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    backgroundColor: \"#000000\",\n  },\n  videoWrapper: {\n    flex: 1,\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n  },\n  video: {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n  },\n  inactivePlaceholder: {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n  },\n  gradientBackground: {\n    position: \"absolute\" as const,\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n  },\n  placeholderText: {\n    color: \"#808080\",\n    marginTop: 16,\n    fontSize: 15,\n    fontWeight: \"500\" as const,\n  },\n  loadingOverlay: {\n    position: \"absolute\" as const,\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n    backgroundColor: \"rgba(0,0,0,0.3)\",\n  },\n  heartOverlay: {\n    position: \"absolute\" as const,\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n  },\n  playOverlay: {\n    position: \"absolute\" as const,\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n  },\n  playButton: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n    borderWidth: 2,\n    borderColor: \"rgba(255,255,255,0.2)\",\n  },\n  bottomGradient: {\n    position: \"absolute\" as const,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    height: 200,\n  },\n  infoOverlay: {\n    position: \"absolute\" as const,\n    bottom: 100,\n    left: 0,\n    right: 0,\n    flexDirection: \"row\" as const,\n    paddingHorizontal: 16,\n  },\n  textColumn: {\n    flex: 1,\n    paddingRight: 16,\n  },\n  userRow: {\n    flexDirection: \"row\" as const,\n    alignItems: \"center\" as const,\n    gap: 8,\n  },\n  usernameText: {\n    color: \"#ffffff\",\n    fontSize: 16,\n    fontWeight: \"700\" as const,\n    marginBottom: 8,\n    textShadowColor: \"rgba(0,0,0,0.5)\",\n    textShadowOffset: { width: 0, height: 1 },\n    textShadowRadius: 2,\n  },\n  offlineBadge: {\n    backgroundColor: \"rgba(255,102,102,0.2)\",\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 10,\n  },\n  descriptionText: {\n    color: \"#ffffff\",\n    fontSize: 14,\n    lineHeight: 20,\n    textShadowColor: \"rgba(0,0,0,0.5)\",\n    textShadowOffset: { width: 0, height: 1 },\n    textShadowRadius: 2,\n  },\n  metaRow: {\n    flexDirection: \"row\" as const,\n    justifyContent: \"space-between\" as const,\n    alignItems: \"center\" as const,\n    marginTop: 8,\n  },\n  timestampText: {\n    color: \"rgba(255,255,255,0.6)\",\n    fontSize: 12,\n    fontWeight: \"500\" as const,\n  },\n  statsRow: {\n    flexDirection: \"row\" as const,\n    alignItems: \"center\" as const,\n    gap: 4,\n  },\n  statText: {\n    color: \"rgba(255,255,255,0.6)\",\n    fontSize: 12,\n  },\n  interactionOverlay: {\n    position: \"absolute\" as const,\n    right: 0,\n    bottom: 100,\n    zIndex: 10,\n  },\n  controlButton: {\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    borderRadius: 22,\n    padding: 11,\n    borderWidth: 1,\n    borderColor: \"rgba(255,255,255,0.1)\",\n  },\n  muteButton: {\n    position: \"absolute\" as const,\n    top: 60,\n    right: 16,\n  },\n  closeButton: {\n    position: \"absolute\" as const,\n    top: 60,\n    left: 16,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: \"center\" as const,\n    alignItems: \"center\" as const,\n    padding: 24,\n  },\n  errorText: {\n    color: \"#ffffff\",\n    marginTop: 16,\n    fontSize: 16,\n    fontWeight: \"600\" as const,\n  },\n  errorSubtext: {\n    color: \"#999999\",\n    marginTop: 8,\n    fontSize: 14,\n  },\n  retryButton: {\n    marginTop: 20,\n    paddingHorizontal: 24,\n    paddingVertical: 10,\n    borderRadius: 20,\n    backgroundColor: \"#1f1f1f\",\n    borderWidth: 1,\n    borderColor: \"#333333\",\n  },\n  retryText: {\n    color: \"#ffffff\",\n    fontWeight: \"600\" as const,\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoControls.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'controlsOpacity'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [controlsOpacity, isVisible]","fix":{"range":[1258,1269],"text":"[controlsOpacity, isVisible]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'speedOptionsScale'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [showSpeedOptions, speedOptionsScale]","fix":{"range":[1422,1440],"text":"[showSpeedOptions, speedOptionsScale]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming, withSpring } from \"react-native-reanimated\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { usePreferenceAwareHaptics } from \"../utils/haptics\";\nimport { getButtonA11yProps, getSwitchA11yProps } from \"../utils/accessibility\";\n\ninterface VideoControlsProps {\n  isVisible: boolean;\n  onSpeedChange: (speed: number) => void;\n  onCaptionsToggle: (enabled: boolean) => void;\n  captionsEnabled: boolean;\n  hasTranscription: boolean;\n}\n\nconst SPEED_OPTIONS = [0.75, 1.0, 1.25];\n\nexport default function VideoControls({\n  isVisible,\n  onSpeedChange,\n  onCaptionsToggle,\n  captionsEnabled,\n  hasTranscription,\n}: VideoControlsProps) {\n  const { userPreferences, updateUserPreferences } = useConfessionStore();\n  const { impactAsync } = usePreferenceAwareHaptics();\n  const [showSpeedOptions, setShowSpeedOptions] = useState(false);\n\n  const controlsOpacity = useSharedValue(0);\n  const speedOptionsScale = useSharedValue(0);\n\n  React.useEffect(() => {\n    controlsOpacity.value = withTiming(isVisible ? 1 : 0, { duration: 200 });\n  }, [isVisible]);\n\n  React.useEffect(() => {\n    speedOptionsScale.value = withSpring(showSpeedOptions ? 1 : 0, {\n      damping: 15,\n      stiffness: 150,\n    });\n  }, [showSpeedOptions]);\n\n  const controlsStyle = useAnimatedStyle(\n    () => ({\n      opacity: controlsOpacity.value,\n    }),\n    [],\n  );\n\n  const speedOptionsStyle = useAnimatedStyle(\n    () => ({\n      transform: [{ scale: speedOptionsScale.value }],\n      opacity: speedOptionsScale.value,\n    }),\n    [],\n  );\n\n  const handleSpeedChange = async (speed: number) => {\n    try {\n      await updateUserPreferences({ playback_speed: speed });\n      onSpeedChange(speed);\n      setShowSpeedOptions(false);\n      impactAsync();\n    } catch (error) {\n      console.warn(\"Failed to update playback speed:\", error);\n    }\n  };\n\n  const handleCaptionsToggle = async () => {\n    const newValue = !captionsEnabled;\n    try {\n      await updateUserPreferences({ captions_default: newValue });\n      onCaptionsToggle(newValue);\n      impactAsync();\n    } catch (error) {\n      console.warn(\"Failed to update captions preference:\", error);\n    }\n  };\n\n  const formatSpeed = (speed: number) => {\n    return speed === 1.0 ? \"1×\" : `${speed}×`;\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <Animated.View\n      style={[\n        {\n          position: \"absolute\",\n          top: 60,\n          right: 20,\n          alignItems: \"flex-end\",\n          zIndex: 30,\n        },\n        controlsStyle,\n      ]}\n    >\n      {/* Speed Options Popup */}\n      {showSpeedOptions && (\n        <Animated.View\n          style={[\n            {\n              backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n              borderRadius: 12,\n              padding: 8,\n              marginBottom: 8,\n              minWidth: 80,\n            },\n            speedOptionsStyle,\n          ]}\n        >\n          {SPEED_OPTIONS.map((speed) => (\n            <Pressable\n              key={speed}\n              onPress={() => handleSpeedChange(speed)}\n              style={{\n                paddingVertical: 8,\n                paddingHorizontal: 12,\n                borderRadius: 8,\n                backgroundColor: userPreferences.playback_speed === speed ? \"rgba(59, 130, 246, 0.3)\" : \"transparent\",\n              }}\n            >\n              <Text\n                className={`text-center font-medium ${\n                  userPreferences.playback_speed === speed ? \"text-blue-400\" : \"text-white\"\n                }`}\n              >\n                {formatSpeed(speed)}\n              </Text>\n            </Pressable>\n          ))}\n        </Animated.View>\n      )}\n\n      {/* Control Buttons */}\n      <View className=\"space-y-3\">\n        {/* Speed Control */}\n        <Pressable\n          onPress={() => setShowSpeedOptions(!showSpeedOptions)}\n          className=\"w-12 h-12 bg-black/70 rounded-full items-center justify-center\"\n          {...getButtonA11yProps(\n            `Playback speed ${formatSpeed(userPreferences.playback_speed)}`,\n            \"Double tap to change playback speed\",\n          )}\n        >\n          <Text className=\"text-white text-12 font-bold\">{formatSpeed(userPreferences.playback_speed)}</Text>\n        </Pressable>\n\n        {/* Captions Control */}\n        {hasTranscription && (\n          <Pressable\n            onPress={handleCaptionsToggle}\n            className={`w-12 h-12 rounded-full items-center justify-center ${\n              captionsEnabled ? \"bg-blue-600\" : \"bg-black/70\"\n            }`}\n            {...getSwitchA11yProps(\"Captions\", captionsEnabled)}\n          >\n            <Ionicons name=\"text\" size={20} color={captionsEnabled ? \"#FFFFFF\" : \"#8B98A5\"} />\n          </Pressable>\n        )}\n      </View>\n    </Animated.View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoDebugInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoFeedSkeleton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'interpolate' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SlideInUp' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'opacity', 'scale', and 'translateY'. Either include them or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [delay, opacity, scale, translateY]","fix":{"range":[1591,1598],"text":"[delay, opacity, scale, translateY]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadMoreScale', 'onAnimationComplete', 'pulseOpacity', 'reduceMotion', 'refreshRotation', and 'shimmerTranslateX'. Either include them or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [isVisible, state, shimmer, fade, stagger, calculatedItemCount, reduceMotion, onAnimationComplete, shimmerTranslateX, pulseOpacity, refreshRotation, loadMoreScale]","fix":{"range":[6956,7019],"text":"[isVisible, state, shimmer, fade, stagger, calculatedItemCount, reduceMotion, onAnimationComplete, shimmerTranslateX, pulseOpacity, refreshRotation, loadMoreScale]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo } from \"react\";\nimport { View, Dimensions, StyleSheet, ScrollView, AccessibilityInfo, Platform } from \"react-native\";\nimport { BlurView } from \"expo-blur\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withRepeat,\n  withTiming,\n  withSequence,\n  withDelay,\n  cancelAnimation,\n  Easing,\n  interpolate,\n  FadeIn,\n  FadeOut,\n  SlideInUp,\n} from \"react-native-reanimated\";\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\n\ntype FeedLoadingState = \"initial\" | \"pullToRefresh\" | \"loadMore\";\ntype Orientation = \"portrait\" | \"landscape\";\n\ninterface VideoFeedSkeletonProps {\n  isVisible: boolean;\n  state?: FeedLoadingState;\n  itemCount?: number;\n  orientation?: Orientation;\n  showNetworkStatus?: boolean;\n  showErrorIndicator?: boolean;\n  animationTiming?: {\n    fade?: number;\n    stagger?: number;\n    shimmer?: number;\n  };\n  onAnimationComplete?: () => void;\n}\n\ninterface FeedItemSkeletonProps {\n  index: number;\n  delay: number;\n  orientation: Orientation;\n}\n\nconst FeedItemSkeleton: React.FC<FeedItemSkeletonProps> = ({ index, delay, orientation }) => {\n  const translateY = useSharedValue(20);\n  const opacity = useSharedValue(0);\n  const scale = useSharedValue(0.98);\n\n  useEffect(() => {\n    translateY.value = withDelay(delay, withTiming(0, { duration: 500, easing: Easing.out(Easing.cubic) }));\n    opacity.value = withDelay(delay, withTiming(1, { duration: 400, easing: Easing.out(Easing.quad) }));\n    scale.value = withDelay(delay, withTiming(1, { duration: 400, easing: Easing.out(Easing.quad) }));\n  }, [delay]);\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    transform: [{ translateY: translateY.value }, { scale: scale.value }],\n  }));\n\n  const isLandscape = orientation === \"landscape\";\n  const itemHeight = isLandscape ? screenHeight * 0.8 : screenHeight;\n  const itemWidth = isLandscape ? screenWidth * 0.6 : screenWidth;\n\n  return (\n    <Animated.View style={[styles.feedItem, { height: itemHeight, width: itemWidth }, animatedStyle]}>\n      <View style={styles.videoBackground} />\n\n      <View style={styles.videoThumbnailContainer}>\n        <Animated.View style={styles.videoThumbnailPlaceholder} />\n      </View>\n\n      <View style={styles.overlayContainer}>\n        <View style={styles.userInfo}>\n          <View style={styles.avatarContainer}>\n            <View style={styles.avatar} />\n            <View style={styles.followButton} />\n          </View>\n        </View>\n\n        <View style={styles.sideActions}>\n          <View style={styles.actionItem}>\n            <View style={styles.actionIcon} />\n            <View style={styles.actionCount} />\n          </View>\n          <View style={styles.actionItem}>\n            <View style={styles.actionIcon} />\n            <View style={styles.actionCount} />\n          </View>\n          <View style={styles.actionItem}>\n            <View style={styles.actionIcon} />\n            <View style={styles.actionCount} />\n          </View>\n          <View style={styles.actionItem}>\n            <View style={[styles.actionIcon, styles.shareIcon]} />\n          </View>\n          <View style={styles.actionItem}>\n            <View style={[styles.actionIcon, styles.musicIcon]} />\n          </View>\n        </View>\n\n        <View style={styles.bottomContent}>\n          <View style={styles.captionContainer}>\n            <View style={[styles.textPlaceholder, { width: \"85%\" }]} />\n            <View style={[styles.textPlaceholder, { width: \"70%\" }]} />\n            <View style={[styles.textPlaceholder, { width: \"50%\", opacity: 0.6 }]} />\n          </View>\n\n          <View style={styles.musicInfo}>\n            <View style={styles.musicIconSmall} />\n            <View style={[styles.textPlaceholder, { width: 150, height: 12 }]} />\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.videoControlsOverlay}>\n        <View style={styles.playPauseButton} />\n        <View style={styles.progressBar}>\n          <View style={styles.progressFill} />\n        </View>\n      </View>\n    </Animated.View>\n  );\n};\n\nexport default function VideoFeedSkeleton({\n  isVisible,\n  state = \"initial\",\n  itemCount,\n  orientation = \"portrait\",\n  showNetworkStatus = false,\n  showErrorIndicator = false,\n  animationTiming = {},\n  onAnimationComplete,\n}: VideoFeedSkeletonProps) {\n  const { fade = 300, stagger = 80, shimmer = 1800 } = animationTiming;\n\n  const shimmerTranslateX = useSharedValue(-screenWidth);\n  const pulseOpacity = useSharedValue(0.4);\n  const refreshRotation = useSharedValue(0);\n  const loadMoreScale = useSharedValue(1);\n\n  const calculatedItemCount = useMemo(() => {\n    if (itemCount) return itemCount;\n    if (state === \"loadMore\") return 1;\n    if (state === \"pullToRefresh\") return 2;\n    return orientation === \"landscape\" ? 2 : 1;\n  }, [itemCount, state, orientation]);\n\n  const [reduceMotion, setReduceMotion] = React.useState(false);\n\n  useEffect(() => {\n    AccessibilityInfo.isReduceMotionEnabled().then(setReduceMotion);\n    const subscription = AccessibilityInfo.addEventListener(\"reduceMotionChanged\", setReduceMotion);\n    return () => subscription?.remove();\n  }, []);\n\n  useEffect(() => {\n    if (isVisible) {\n      if (!reduceMotion) {\n        shimmerTranslateX.value = withRepeat(\n          withTiming(screenWidth * 2, { duration: shimmer, easing: Easing.linear }),\n          -1,\n          false,\n        );\n\n        pulseOpacity.value = withRepeat(\n          withSequence(withTiming(0.7, { duration: 1000 }), withTiming(0.4, { duration: 1000 })),\n          -1,\n          false,\n        );\n      } else {\n        // Simple fade for reduced motion\n        shimmerTranslateX.value = 0;\n        pulseOpacity.value = withTiming(0.6, { duration: 300 });\n      }\n\n      if (state === \"pullToRefresh\") {\n        refreshRotation.value = withRepeat(withTiming(360, { duration: 1000, easing: Easing.linear }), -1, false);\n      }\n\n      if (state === \"loadMore\") {\n        loadMoreScale.value = withRepeat(\n          withSequence(withTiming(1.2, { duration: 600 }), withTiming(1, { duration: 600 })),\n          -1,\n          false,\n        );\n      }\n\n      AccessibilityInfo.announceForAccessibility(`Loading ${state === \"pullToRefresh\" ? \"new\" : \"\"} video feed`);\n\n      if (onAnimationComplete) {\n        const timer = setTimeout(onAnimationComplete, calculatedItemCount * stagger + fade);\n        return () => clearTimeout(timer);\n      }\n    } else {\n      cancelAnimation(shimmerTranslateX);\n      cancelAnimation(pulseOpacity);\n      cancelAnimation(refreshRotation);\n      cancelAnimation(loadMoreScale);\n      shimmerTranslateX.value = -screenWidth;\n      pulseOpacity.value = 0.4;\n      refreshRotation.value = 0;\n      loadMoreScale.value = 1;\n    }\n\n    return () => {\n      cancelAnimation(shimmerTranslateX);\n      cancelAnimation(pulseOpacity);\n      cancelAnimation(refreshRotation);\n      cancelAnimation(loadMoreScale);\n    };\n  }, [isVisible, state, shimmer, fade, stagger, calculatedItemCount]);\n\n  const shimmerStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: shimmerTranslateX.value }],\n  }));\n\n  const containerStyle = useAnimatedStyle(() => ({\n    opacity: withTiming(isVisible ? 1 : 0, { duration: fade }),\n  }));\n\n  const refreshStyle = useAnimatedStyle(() => ({\n    transform: [{ rotate: `${refreshRotation.value}deg` }],\n  }));\n\n  const loadMoreStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: loadMoreScale.value }],\n  }));\n\n  const pulseStyle = useAnimatedStyle(() => ({\n    opacity: pulseOpacity.value,\n  }));\n\n  if (!isVisible) return null;\n\n  return (\n    <Animated.View\n      style={[styles.container, containerStyle]}\n      entering={FadeIn.duration(fade)}\n      exiting={FadeOut.duration(fade)}\n      accessibilityRole=\"progressbar\"\n      accessibilityLabel=\"Loading video feed\"\n    >\n      {Platform.OS === \"ios\" ? (\n        <BlurView intensity={15} tint=\"dark\" style={StyleSheet.absoluteFill} />\n      ) : (\n        <View style={[StyleSheet.absoluteFill, { backgroundColor: \"rgba(0, 0, 0, 0.85)\" }]} />\n      )}\n\n      <View style={styles.shimmerLayer}>\n        <Animated.View style={[styles.shimmer, shimmerStyle]} />\n      </View>\n\n      {state === \"pullToRefresh\" && (\n        <Animated.View style={[styles.pullToRefreshIndicator, refreshStyle]}>\n          <View style={styles.refreshIcon} />\n        </Animated.View>\n      )}\n\n      {showNetworkStatus && (\n        <Animated.View style={[styles.networkStatusBar, pulseStyle]}>\n          <View style={styles.networkStatusDot} />\n          <View style={[styles.textPlaceholder, { width: 120, height: 12 }]} />\n        </Animated.View>\n      )}\n\n      <ScrollView\n        style={styles.scrollContainer}\n        horizontal={orientation === \"landscape\"}\n        scrollEnabled={false}\n        showsVerticalScrollIndicator={false}\n        showsHorizontalScrollIndicator={false}\n      >\n        {Array.from({ length: calculatedItemCount }).map((_, index) => (\n          <FeedItemSkeleton\n            key={`feed-skeleton-${index}`}\n            index={index}\n            delay={index * stagger}\n            orientation={orientation}\n          />\n        ))}\n      </ScrollView>\n\n      {state === \"loadMore\" && (\n        <Animated.View style={[styles.loadMoreContainer, loadMoreStyle]}>\n          <View style={styles.loadMoreDots}>\n            <View style={styles.dot} />\n            <View style={styles.dot} />\n            <View style={styles.dot} />\n          </View>\n        </Animated.View>\n      )}\n\n      {showErrorIndicator && (\n        <Animated.View style={[styles.errorOverlay, pulseStyle]}>\n          <View style={styles.errorIconContainer}>\n            <View style={styles.errorIcon} />\n          </View>\n          <View style={[styles.textPlaceholder, { width: 250, marginVertical: 12 }]} />\n          <View style={styles.retryButton}>\n            <View style={[styles.textPlaceholder, { width: 60, height: 14 }]} />\n          </View>\n        </Animated.View>\n      )}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: \"rgba(0, 0, 0, 0.95)\",\n    zIndex: 100,\n  },\n  shimmerLayer: {\n    ...StyleSheet.absoluteFillObject,\n    overflow: \"hidden\",\n  },\n  shimmer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: screenWidth * 0.6,\n    height: screenHeight * 1.2,\n    backgroundColor: \"rgba(255, 255, 255, 0.06)\",\n    transform: [{ skewX: \"-25deg\" }],\n  },\n  pullToRefreshIndicator: {\n    position: \"absolute\",\n    top: 80,\n    alignSelf: \"center\",\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 101,\n  },\n  refreshIcon: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: \"rgba(255, 255, 255, 0.3)\",\n  },\n  networkStatusBar: {\n    position: \"absolute\",\n    top: 50,\n    right: 16,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    backgroundColor: \"rgba(0, 0, 0, 0.6)\",\n    borderRadius: 20,\n    zIndex: 102,\n  },\n  networkStatusDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: \"#FCD34D\",\n    marginRight: 8,\n  },\n  scrollContainer: {\n    flex: 1,\n  },\n  feedItem: {\n    position: \"relative\",\n    backgroundColor: \"rgba(255, 255, 255, 0.02)\",\n  },\n  videoBackground: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: \"rgba(0, 0, 0, 0.3)\",\n  },\n  videoThumbnailContainer: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  videoThumbnailPlaceholder: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"rgba(255, 255, 255, 0.05)\",\n  },\n  overlayContainer: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: \"space-between\",\n  },\n  userInfo: {\n    position: \"absolute\",\n    top: 60,\n    left: 16,\n    right: 80,\n  },\n  avatarContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n    borderWidth: 2,\n    borderColor: \"rgba(255, 255, 255, 0.1)\",\n  },\n  followButton: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: \"rgba(239, 68, 68, 0.3)\",\n    marginLeft: -12,\n    marginTop: 16,\n  },\n  sideActions: {\n    position: \"absolute\",\n    bottom: 100,\n    right: 16,\n    alignItems: \"center\",\n  },\n  actionItem: {\n    alignItems: \"center\",\n    marginBottom: 20,\n  },\n  actionIcon: {\n    width: 46,\n    height: 46,\n    borderRadius: 23,\n    backgroundColor: \"rgba(255, 255, 255, 0.15)\",\n    marginBottom: 4,\n  },\n  shareIcon: {\n    backgroundColor: \"rgba(59, 130, 246, 0.2)\",\n  },\n  musicIcon: {\n    backgroundColor: \"rgba(16, 185, 129, 0.2)\",\n    transform: [{ rotate: \"15deg\" }],\n  },\n  actionCount: {\n    width: 36,\n    height: 12,\n    borderRadius: 6,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n  },\n  bottomContent: {\n    position: \"absolute\",\n    bottom: 20,\n    left: 16,\n    right: 80,\n  },\n  captionContainer: {\n    marginBottom: 12,\n  },\n  textPlaceholder: {\n    height: 16,\n    backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n    borderRadius: 8,\n    marginBottom: 6,\n  },\n  musicInfo: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  musicIconSmall: {\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    backgroundColor: \"rgba(255, 255, 255, 0.15)\",\n    marginRight: 8,\n  },\n  videoControlsOverlay: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    height: 4,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  playPauseButton: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    marginLeft: -30,\n    marginTop: -30,\n    opacity: 0.5,\n  },\n  progressBar: {\n    flex: 1,\n    height: 2,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n  },\n  progressFill: {\n    width: \"30%\",\n    height: \"100%\",\n    backgroundColor: \"rgba(255, 255, 255, 0.3)\",\n  },\n  loadMoreContainer: {\n    position: \"absolute\",\n    bottom: 50,\n    alignSelf: \"center\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n    borderRadius: 20,\n  },\n  loadMoreDots: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  dot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: \"rgba(255, 255, 255, 0.4)\",\n    marginHorizontal: 4,\n  },\n  errorOverlay: {\n    position: \"absolute\",\n    top: \"35%\",\n    alignSelf: \"center\",\n    alignItems: \"center\",\n    padding: 20,\n    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n    borderRadius: 16,\n  },\n  errorIconContainer: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: \"rgba(239, 68, 68, 0.1)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 16,\n  },\n  errorIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: \"rgba(239, 68, 68, 0.3)\",\n  },\n  retryButton: {\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: \"rgba(255, 255, 255, 0.2)\",\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoGuidanceOverlay.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'heartScale', 'overlayOpacity', and 'swipeIndicatorY'. Either include them or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [heartScale, isVisible, overlayOpacity, showGuidance, swipeIndicatorY]","fix":{"range":[1925,1950],"text":"[heartScale, isVisible, overlayOpacity, showGuidance, swipeIndicatorY]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  withSequence,\n  withDelay,\n  withRepeat,\n  cancelAnimation,\n} from \"react-native-reanimated\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst GUIDANCE_SHOWN_KEY = \"video_guidance_shown\";\n\ninterface VideoGuidanceOverlayProps {\n  isVisible: boolean;\n  onDismiss: () => void;\n}\n\nexport default function VideoGuidanceOverlay({ isVisible, onDismiss }: VideoGuidanceOverlayProps) {\n  const [showGuidance, setShowGuidance] = useState(false);\n  const overlayOpacity = useSharedValue(0);\n  const swipeIndicatorY = useSharedValue(0);\n  const heartScale = useSharedValue(0);\n\n  useEffect(() => {\n    checkShouldShowGuidance();\n  }, []);\n\n  useEffect(() => {\n    if (isVisible && showGuidance) {\n      // Animate in\n      overlayOpacity.value = withTiming(1, { duration: 300 });\n\n      // Animate swipe indicator\n      swipeIndicatorY.value = withRepeat(\n        withSequence(withTiming(-20, { duration: 800 }), withTiming(0, { duration: 800 })),\n        -1,\n        true,\n      );\n\n      // Animate heart\n      heartScale.value = withDelay(\n        1000,\n        withRepeat(withSequence(withTiming(1.2, { duration: 300 }), withTiming(1, { duration: 300 })), -1, true),\n      );\n    } else {\n      // Cancel all animations when hiding\n      cancelAnimation(overlayOpacity);\n      cancelAnimation(swipeIndicatorY);\n      cancelAnimation(heartScale);\n\n      overlayOpacity.value = withTiming(0, { duration: 300 });\n      swipeIndicatorY.value = 0;\n      heartScale.value = 0;\n    }\n\n    // Cleanup function to cancel animations on unmount\n    return () => {\n      cancelAnimation(overlayOpacity);\n      cancelAnimation(swipeIndicatorY);\n      cancelAnimation(heartScale);\n    };\n  }, [isVisible, showGuidance]);\n\n  const checkShouldShowGuidance = async () => {\n    try {\n      const hasShown = await AsyncStorage.getItem(GUIDANCE_SHOWN_KEY);\n      if (!hasShown) {\n        setShowGuidance(true);\n      }\n    } catch (error) {\n      console.warn(\"Failed to check guidance status:\", error);\n    }\n  };\n\n  const handleDismiss = async () => {\n    try {\n      await AsyncStorage.setItem(GUIDANCE_SHOWN_KEY, \"true\");\n      setShowGuidance(false);\n      onDismiss();\n    } catch (error) {\n      console.warn(\"Failed to save guidance status:\", error);\n      setShowGuidance(false);\n      onDismiss();\n    }\n  };\n\n  const overlayStyle = useAnimatedStyle(() => ({\n    opacity: overlayOpacity.value,\n  }));\n\n  const swipeIndicatorStyle = useAnimatedStyle(() => ({\n    transform: [{ translateY: swipeIndicatorY.value }],\n  }));\n\n  const heartStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: heartScale.value }],\n  }));\n\n  if (!isVisible || !showGuidance) return null;\n\n  return (\n    <Animated.View\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n          zIndex: 100,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        },\n        overlayStyle,\n      ]}\n    >\n      {/* Swipe up gesture */}\n      <View style={{ position: \"absolute\", top: \"30%\", alignItems: \"center\" }}>\n        <Animated.View style={[swipeIndicatorStyle]}>\n          <Ionicons name=\"chevron-up\" size={40} color=\"#FFFFFF\" />\n        </Animated.View>\n        <Text className=\"text-white text-16 font-medium mt-2\">Swipe up for next video</Text>\n      </View>\n\n      {/* Double tap gesture */}\n      <View style={{ position: \"absolute\", alignItems: \"center\" }}>\n        <Animated.View style={[heartStyle]}>\n          <Ionicons name=\"heart\" size={60} color=\"#EF4444\" />\n        </Animated.View>\n        <Text className=\"text-white text-16 font-medium mt-4\">Double-tap to like</Text>\n      </View>\n\n      {/* Swipe down gesture */}\n      <View style={{ position: \"absolute\", bottom: \"30%\", alignItems: \"center\" }}>\n        <Text className=\"text-white text-16 font-medium mb-2\">Swipe down for previous</Text>\n        <Animated.View style={[{ transform: [{ rotate: \"180deg\" }] }, swipeIndicatorStyle]}>\n          <Ionicons name=\"chevron-up\" size={40} color=\"#FFFFFF\" />\n        </Animated.View>\n      </View>\n\n      {/* Dismiss button */}\n      <Pressable\n        onPress={handleDismiss}\n        style={{\n          position: \"absolute\",\n          bottom: 100,\n          backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n          paddingHorizontal: 24,\n          paddingVertical: 12,\n          borderRadius: 25,\n          borderWidth: 1,\n          borderColor: \"rgba(255, 255, 255, 0.3)\",\n        }}\n      >\n        <Text className=\"text-white text-14 font-medium\">Got it!</Text>\n      </Pressable>\n    </Animated.View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoInteractionOverlay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":1,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'runOnJS' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FadeIn' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FadeOut' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VideoInteractionError' is defined but never used.","line":38,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getReplies' is assigned a value but never used.","line":74,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'likeCount'. Either include it or remove the dependency array. You can also do a functional update 'setLikeCount(l => ...)' if you only need 'likeCount' in the 'setLikeCount' call.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, confession.id, confessions, checkIsSaved, likeCount]","fix":{"range":[4438,4490],"text":"[user?.id, confession.id, confessions, checkIsSaved, likeCount]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'commentBadgeScale' and 'commentPulse'. Either include them or remove the dependency array.","line":151,"column":6,"nodeType":"ArrayExpression","endLine":151,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [replies, pagination, commentCount, commentPulse, commentBadgeScale]","fix":{"range":[5434,5469],"text":"[replies, pagination, commentCount, commentPulse, commentBadgeScale]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'commentScale'. Either include it or remove the dependency array.","line":167,"column":6,"nodeType":"ArrayExpression","endLine":167,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [commentScale, typingUsers]","fix":{"range":[5950,5963],"text":"[commentScale, typingUsers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'overlayOpacity' and 'overlayTranslateX'. Either include them or remove the dependency array.","line":172,"column":6,"nodeType":"ArrayExpression","endLine":172,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [isVisible, overlayOpacity, overlayTranslateX]","fix":{"range":[6150,6161],"text":"[isVisible, overlayOpacity, overlayTranslateX]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'likeRotation' and 'likeScale'. Either include them or remove the dependency array.","line":260,"column":6,"nodeType":"ArrayExpression","endLine":260,"endColumn":112,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, likeState.isLoading, triggerHaptic, isLiked, likeScale, likeRotation, toggleLike, confession.id, onLike, announceAction]","fix":{"range":[8952,9058],"text":"[user?.id, likeState.isLoading, triggerHaptic, isLiked, likeScale, likeRotation, toggleLike, confession.id, onLike, announceAction]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'commentBadgeScale' and 'commentScale'. Either include them or remove the dependency array.","line":291,"column":6,"nodeType":"ArrayExpression","endLine":300,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, triggerHaptic, commentScale, hasNewComments, confession.id, commentCount, typingUsers.length, onComment, announceAction, commentBadgeScale]","fix":{"range":[9966,10120],"text":"[user?.id, triggerHaptic, commentScale, hasNewComments, confession.id, commentCount, typingUsers.length, onComment, announceAction, commentBadgeScale]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'shareScale'. Either include it or remove the dependency array.","line":319,"column":6,"nodeType":"ArrayExpression","endLine":319,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [triggerHaptic, shareScale, confession.id, onShare, announceAction]","fix":{"range":[10617,10672],"text":"[triggerHaptic, shareScale, confession.id, onShare, announceAction]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'saveRotation' and 'saveScale'. Either include them or remove the dependency array.","line":391,"column":6,"nodeType":"ArrayExpression","endLine":401,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, saveState.isLoading, triggerHaptic, isSaved, saveScale, saveRotation, confession.id, onSave, announceAction, saveConfession, unsaveConfession]","fix":{"range":[12908,13077],"text":"[user?.id, saveState.isLoading, triggerHaptic, isSaved, saveScale, saveRotation, confession.id, onSave, announceAction, saveConfession, unsaveConfession]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'reportScale'. Either include it or remove the dependency array.","line":423,"column":6,"nodeType":"ArrayExpression","endLine":423,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, triggerHaptic, reportScale, confession.id, onReport, announceAction]","fix":{"range":[13644,13710],"text":"[user?.id, triggerHaptic, reportScale, confession.id, onReport, announceAction]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport {\n  View,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  Platform,\n  ActivityIndicator,\n  AccessibilityInfo,\n  type StyleProp,\n  type ViewStyle,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withSpring,\n  withSequence,\n  withTiming,\n  interpolate,\n  runOnJS,\n  Easing,\n  FadeIn,\n  FadeOut,\n} from \"react-native-reanimated\";\nimport * as Haptics from \"expo-haptics\";\nimport { useConfessionStore } from \"../state/confessionStore\";\nimport { useSavedStore } from \"../state/savedStore\";\nimport { useReplyStore } from \"../state/replyStore\";\nimport { VideoDataService } from \"../services/VideoDataService\";\nimport { useAuthStore } from \"../state/authStore\";\nimport type { Confession } from \"../types/confession\";\nimport { BottomSheetModal } from \"@gorhom/bottom-sheet\";\nimport EnhancedCommentBottomSheet from \"./EnhancedCommentBottomSheet\";\nimport EnhancedShareBottomSheet from \"./EnhancedShareBottomSheet\";\nimport ReportModal from \"./ReportModal\";\nimport { VideoInteractionType } from \"../types/videoInteractions\";\nimport { normalizeVideoError, VideoErrorCode, VideoInteractionError } from \"../types/videoErrors\";\n\nconst AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\n\ninterface VideoInteractionOverlayProps {\n  confession: Confession;\n  onLike?: (isLiked: boolean) => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onSave?: (isSaved: boolean) => void;\n  onReport?: () => void;\n  style?: StyleProp<ViewStyle>;\n  isVisible?: boolean;\n  onViewUpdate?: () => void;\n}\n\ninterface InteractionState {\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport default function VideoInteractionOverlay({\n  confession,\n  onLike,\n  onComment,\n  onShare,\n  onSave,\n  onReport,\n  style,\n  isVisible = true,\n  onViewUpdate,\n}: VideoInteractionOverlayProps) {\n  const user = useAuthStore((state) => state.user);\n  const toggleLike = useConfessionStore((state) => state.toggleLike);\n  const confessions = useConfessionStore((state) => state.confessions);\n  const { isSaved: checkIsSaved, saveConfession, unsaveConfession } = useSavedStore();\n  const getReplies = useReplyStore((state) => state.getRepliesForConfession);\n  const subscribeToReplies = useReplyStore((state) => state.subscribeToReplies);\n  const unsubscribeFromReplies = useReplyStore((state) => state.unsubscribeFromReplies);\n  const replies = useReplyStore((state) => state.replies[confession.id] || []);\n  const typingUsers = useReplyStore((state) => state.typingUsers[confession.id] || []);\n  const pagination = useReplyStore((state) => state.pagination[confession.id]);\n\n  const [isLiked, setIsLiked] = useState(false);\n  const [isSaved, setIsSaved] = useState(false);\n  const [likeCount, setLikeCount] = useState(confession.likes || 0);\n  const [commentCount, setCommentCount] = useState(0);\n  const [hasNewComments, setHasNewComments] = useState(false);\n  const [showCommentIndicator, setShowCommentIndicator] = useState(false);\n  const commentPulse = useSharedValue(1);\n  const commentBadgeScale = useSharedValue(0);\n  const [viewCount, setViewCount] = useState(confession.views || 0);\n\n  const [showReportModal, setShowReportModal] = useState(false);\n\n  // Bottom sheet refs\n  const commentSheetRef = useRef<BottomSheetModal>(null);\n  const shareSheetRef = useRef<BottomSheetModal>(null);\n\n  const [likeState, setLikeState] = useState<InteractionState>({ isLoading: false, error: null });\n  const [saveState, setSaveState] = useState<InteractionState>({ isLoading: false, error: null });\n\n  const likeScale = useSharedValue(1);\n  const likeRotation = useSharedValue(0);\n  const saveScale = useSharedValue(1);\n  const saveRotation = useSharedValue(0);\n  const commentScale = useSharedValue(1);\n  const shareScale = useSharedValue(1);\n  const reportScale = useSharedValue(1);\n\n  const overlayOpacity = useSharedValue(isVisible ? 1 : 0);\n  const overlayTranslateX = useSharedValue(0);\n\n  const [viewTracked, setViewTracked] = useState(false);\n\n  useEffect(() => {\n    if (user?.id) {\n      const currentConfession = confessions.find((c) => c.id === confession.id);\n      setIsLiked(Boolean(currentConfession?.isLiked));\n      setLikeCount(typeof currentConfession?.likes === \"number\" ? currentConfession.likes : likeCount);\n      setIsSaved(checkIsSaved(confession.id));\n    }\n  }, [user?.id, confession.id, confessions, checkIsSaved]);\n\n  // Real-time comment count updates\n  useEffect(() => {\n    const totalCount = typeof pagination?.totalCount === \"number\" ? pagination.totalCount : replies.length;\n    setCommentCount(totalCount);\n\n    // Animate comment count changes\n    if (totalCount > commentCount) {\n      setHasNewComments(true);\n      setShowCommentIndicator(true);\n\n      // Pulse animation for new comments\n      commentPulse.value = withSequence(\n        withSpring(1.2, { damping: 4, stiffness: 200 }),\n        withSpring(1, { damping: 10, stiffness: 150 }),\n      );\n\n      // Show badge animation\n      commentBadgeScale.value = withSequence(\n        withSpring(1, { damping: 8, stiffness: 300 }),\n        withTiming(1, { duration: 3000 }),\n        withTiming(0, { duration: 300 }),\n      );\n\n      // Hide indicator after 3 seconds\n      setTimeout(() => {\n        setShowCommentIndicator(false);\n        setHasNewComments(false);\n      }, 3500);\n    }\n  }, [replies, pagination, commentCount]);\n\n  // Subscribe to real-time comment updates\n  useEffect(() => {\n    if (confession.id) {\n      subscribeToReplies(confession.id);\n      return () => unsubscribeFromReplies();\n    }\n    return undefined;\n  }, [confession.id, subscribeToReplies, unsubscribeFromReplies]);\n\n  // Typing indicator effect\n  useEffect(() => {\n    if (typingUsers.length > 0) {\n      commentScale.value = withSequence(withTiming(1.05, { duration: 400 }), withTiming(1, { duration: 400 }));\n    }\n  }, [typingUsers]);\n\n  useEffect(() => {\n    overlayOpacity.value = withTiming(isVisible ? 1 : 0, { duration: 300 });\n    overlayTranslateX.value = withTiming(isVisible ? 0 : 50, { duration: 300 });\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!viewTracked && isVisible && confession.id) {\n      setViewTracked(true);\n      VideoDataService.updateVideoViews(confession.id).then((newCount) => {\n        if (newCount !== null) {\n          setViewCount(newCount);\n        }\n      });\n      onViewUpdate?.();\n    }\n  }, [isVisible, confession.id, viewTracked, onViewUpdate]);\n\n  const triggerHaptic = useCallback((type: \"light\" | \"medium\" | \"heavy\" = \"light\") => {\n    if (Platform.OS === \"ios\") {\n      switch (type) {\n        case \"light\":\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n          break;\n        case \"medium\":\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n          break;\n        case \"heavy\":\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n          break;\n      }\n    }\n  }, []);\n\n  const announceAction = useCallback((action: string) => {\n    if (Platform.OS === \"ios\") {\n      AccessibilityInfo.announceForAccessibility(action);\n    }\n  }, []);\n\n  const handleLike = useCallback(async () => {\n    if (!user?.id || likeState.isLoading) return;\n\n    triggerHaptic(\"medium\");\n\n    setLikeState({ isLoading: true, error: null });\n\n    const newLikedState = !isLiked;\n    setIsLiked(newLikedState);\n    setLikeCount((prev: number) => (newLikedState ? prev + 1 : Math.max(0, prev - 1)));\n\n    likeScale.value = withSequence(\n      withSpring(1.4, { damping: 4, stiffness: 200 }),\n      withSpring(1, { damping: 10, stiffness: 150 }),\n    );\n\n    if (newLikedState) {\n      likeRotation.value = withSequence(\n        withTiming(-15, { duration: 100 }),\n        withSpring(0, { damping: 8, stiffness: 150 }),\n      );\n    }\n\n    try {\n      await toggleLike(confession.id);\n      const updateResult = await VideoDataService.updateVideoLikes(confession.id, newLikedState);\n\n      if (updateResult !== null) {\n        setLikeCount(updateResult);\n      }\n\n      onLike?.(newLikedState);\n      announceAction(newLikedState ? \"Liked\" : \"Unliked\");\n      setLikeState({ isLoading: false, error: null });\n    } catch (e: unknown) {\n      const err = normalizeVideoError(e);\n      console.error(\"Error toggling like:\", err);\n\n      // Revert optimistic update\n      setIsLiked(!newLikedState);\n      setLikeCount((prev: number) => (!newLikedState ? prev + 1 : Math.max(0, prev - 1)));\n\n      // Set error message based on error type\n      let errorMessage = err.message;\n      if (err.code === VideoErrorCode.NetworkError) {\n        errorMessage = \"Network error. Please check your connection and try again.\";\n      } else if (err.code === VideoErrorCode.RateLimitExceeded) {\n        errorMessage = \"Too many requests. Please wait a moment and try again.\";\n      }\n\n      setLikeState({ isLoading: false, error: errorMessage });\n    }\n  }, [user?.id, isLiked, confession.id, likeState.isLoading, toggleLike, onLike, triggerHaptic, announceAction]);\n\n  const handleComment = useCallback(() => {\n    if (!user?.id) return;\n\n    triggerHaptic(\"light\");\n\n    commentScale.value = withSequence(\n      withSpring(1.2, { damping: 5, stiffness: 200 }),\n      withSpring(1, { damping: 10, stiffness: 150 }),\n    );\n\n    // Clear new comment indicator\n    if (hasNewComments) {\n      setHasNewComments(false);\n      setShowCommentIndicator(false);\n      commentBadgeScale.value = withTiming(0, { duration: 200 });\n    }\n\n    // Track comment interaction with enhanced analytics\n    VideoDataService.trackVideoEvent(\"comment_sheet_open\", {\n      confession_id: confession.id,\n      comment_count: commentCount,\n      has_new_comments: hasNewComments,\n      typing_users_count: typingUsers.length,\n      timestamp: Date.now(),\n    });\n\n    commentSheetRef.current?.present();\n    onComment?.();\n    announceAction(`Opening comments, ${commentCount} comments`);\n  }, [\n    user?.id,\n    confession.id,\n    commentCount,\n    hasNewComments,\n    typingUsers.length,\n    onComment,\n    triggerHaptic,\n    announceAction,\n  ]);\n\n  const handleShare = useCallback(() => {\n    triggerHaptic(\"light\");\n\n    shareScale.value = withSequence(\n      withSpring(1.2, { damping: 5, stiffness: 200 }),\n      withSpring(1, { damping: 10, stiffness: 150 }),\n    );\n\n    // Track share interaction\n    VideoDataService.trackVideoEvent(confession.id, {\n      type: VideoInteractionType.Share,\n      timestamp: Date.now(),\n    });\n\n    shareSheetRef.current?.present();\n    onShare?.();\n    announceAction(\"Opening share options\");\n  }, [confession.id, onShare, triggerHaptic, announceAction]);\n\n  const handleSave = useCallback(async () => {\n    if (!user?.id || saveState.isLoading) return;\n\n    triggerHaptic(\"medium\");\n\n    setSaveState({ isLoading: true, error: null });\n\n    const newSavedState = !isSaved;\n    setIsSaved(newSavedState);\n\n    saveScale.value = withSequence(\n      withSpring(1.3, { damping: 4, stiffness: 200 }),\n      withSpring(1, { damping: 10, stiffness: 150 }),\n    );\n\n    if (newSavedState) {\n      saveRotation.value = withSequence(\n        withTiming(360, { duration: 400, easing: Easing.out(Easing.cubic) }),\n        withTiming(0, { duration: 0 }),\n      );\n    }\n\n    try {\n      if (newSavedState) {\n        await saveConfession(confession.id);\n      } else {\n        await unsaveConfession(confession.id);\n      }\n\n      // Track save interaction\n      VideoDataService.trackVideoEvent(confession.id, {\n        type: VideoInteractionType.Save,\n        timestamp: Date.now(),\n        metadata: { saved: newSavedState },\n      });\n\n      onSave?.(newSavedState);\n      announceAction(newSavedState ? \"Saved\" : \"Unsaved\");\n      setSaveState({ isLoading: false, error: null });\n    } catch (e: unknown) {\n      const err = normalizeVideoError(e);\n      console.error(\"Error toggling save:\", err);\n\n      // Revert optimistic update\n      setIsSaved(!newSavedState);\n\n      // Set error message based on error type\n      let errorMessage = err.message;\n      if (err.code === VideoErrorCode.NetworkError) {\n        errorMessage = \"Network error. Please check your connection and try again.\";\n      } else if (err.code === VideoErrorCode.PermissionDenied) {\n        errorMessage = \"Permission denied. Please check your account settings.\";\n      } else if (err.code === VideoErrorCode.RateLimitExceeded) {\n        errorMessage = \"Too many requests. Please wait a moment and try again.\";\n      }\n\n      setSaveState({ isLoading: false, error: errorMessage });\n\n      // Track error for analytics\n      VideoDataService.trackVideoEvent(confession.id, {\n        type: VideoInteractionType.Save,\n        timestamp: Date.now(),\n        metadata: {\n          saved: newSavedState,\n          error: true,\n          errorCode: err.code,\n          errorMessage: err.message,\n        },\n      });\n    }\n  }, [\n    user?.id,\n    isSaved,\n    confession.id,\n    saveState.isLoading,\n    saveConfession,\n    unsaveConfession,\n    onSave,\n    triggerHaptic,\n    announceAction,\n  ]);\n\n  const handleReport = useCallback(() => {\n    if (!user?.id) return;\n\n    triggerHaptic(\"heavy\");\n\n    reportScale.value = withSequence(\n      withSpring(0.9, { damping: 10, stiffness: 300 }),\n      withSpring(1, { damping: 10, stiffness: 150 }),\n    );\n\n    // Track report/pause interaction for analytics\n    VideoDataService.trackVideoEvent(confession.id, {\n      type: \"pause\",\n      timestamp: Date.now(),\n      metadata: { reason: \"report_open\" },\n    });\n\n    setShowReportModal(true);\n    onReport?.();\n    announceAction(\"Opening report options\");\n  }, [user?.id, confession.id, onReport, triggerHaptic, announceAction]);\n\n  const likeAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: likeScale.value }, { rotate: `${likeRotation.value}deg` }],\n  }));\n\n  const saveAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: saveScale.value }, { rotate: `${saveRotation.value}deg` }],\n  }));\n\n  const commentAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: interpolate(commentScale.value * commentPulse.value, [1, 1.4], [1, 1.2]) }],\n  }));\n\n  const commentBadgeAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: commentBadgeScale.value }],\n    opacity: commentBadgeScale.value,\n  }));\n\n  const shareAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: shareScale.value }],\n  }));\n\n  const reportAnimatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: reportScale.value }],\n  }));\n\n  const overlayAnimatedStyle = useAnimatedStyle(() => ({\n    opacity: overlayOpacity.value,\n    transform: [{ translateX: overlayTranslateX.value }],\n  }));\n\n  const formatCount = useCallback((count: number): string => {\n    if (count >= 1000000) {\n      return `${(count / 1000000).toFixed(1)}M`;\n    } else if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}K`;\n    }\n    return count.toString();\n  }, []);\n\n  const renderInteractionButton = useCallback(\n    (\n      icon: string,\n      count: number | null,\n      isActive: boolean,\n      onPress: () => void,\n      animatedStyle: any,\n      isLoading: boolean = false,\n      accessibilityLabel: string,\n    ) => (\n      <AnimatedTouchableOpacity\n        style={[styles.actionButton, animatedStyle]}\n        onPress={onPress}\n        disabled={isLoading}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: isActive }}\n      >\n        {isLoading ? (\n          <ActivityIndicator size=\"small\" color=\"#fff\" />\n        ) : (\n          <Ionicons name={icon as keyof typeof Ionicons.glyphMap} size={28} color={isActive ? \"#ff4458\" : \"#fff\"} />\n        )}\n        {count !== null && (\n          <Text style={[styles.actionCount, isActive && styles.activeText]}>{formatCount(count)}</Text>\n        )}\n      </AnimatedTouchableOpacity>\n    ),\n    [formatCount],\n  );\n\n  return (\n    <>\n      <Animated.View style={[styles.container, overlayAnimatedStyle, style]} pointerEvents=\"box-none\">\n        <View style={styles.actionsContainer}>\n          {renderInteractionButton(\n            isLiked ? \"heart\" : \"heart-outline\",\n            likeCount,\n            isLiked,\n            handleLike,\n            likeAnimatedStyle,\n            likeState.isLoading,\n            `Like button, ${likeCount} likes`,\n          )}\n\n          <View>\n            {renderInteractionButton(\n              typingUsers.length > 0 ? \"chatbubble-ellipses\" : \"chatbubble-outline\",\n              commentCount,\n              hasNewComments,\n              handleComment,\n              commentAnimatedStyle,\n              false,\n              `Comment button, ${commentCount} comments${typingUsers.length > 0 ? \", someone is typing\" : \"\"}`,\n            )}\n\n            {showCommentIndicator && (\n              <Animated.View style={[styles.newCommentBadge, commentBadgeAnimatedStyle]}>\n                <Text style={styles.newCommentText}>New</Text>\n              </Animated.View>\n            )}\n\n            {typingUsers.length > 0 && (\n              <View style={styles.typingIndicator}>\n                <ActivityIndicator size=\"small\" color=\"#fff\" />\n              </View>\n            )}\n          </View>\n\n          {renderInteractionButton(\n            \"share-outline\",\n            null,\n            false,\n            handleShare,\n            shareAnimatedStyle,\n            false,\n            \"Share button\",\n          )}\n\n          {renderInteractionButton(\n            isSaved ? \"bookmark\" : \"bookmark-outline\",\n            null,\n            isSaved,\n            handleSave,\n            saveAnimatedStyle,\n            saveState.isLoading,\n            `Save button, ${isSaved ? \"saved\" : \"not saved\"}`,\n          )}\n\n          {renderInteractionButton(\n            \"flag-outline\",\n            null,\n            false,\n            handleReport,\n            reportAnimatedStyle,\n            false,\n            \"Report button\",\n          )}\n        </View>\n\n        <View style={styles.viewsContainer}>\n          <Ionicons name=\"eye-outline\" size={16} color=\"#fff\" />\n          <Text style={styles.viewsText}>{formatCount(viewCount)} views</Text>\n        </View>\n      </Animated.View>\n\n      <EnhancedCommentBottomSheet bottomSheetModalRef={commentSheetRef} confessionId={confession.id} />\n\n      <EnhancedShareBottomSheet\n        bottomSheetModalRef={shareSheetRef}\n        confessionId={confession.id}\n        confessionText={confession.transcription || confession.content}\n      />\n\n      {showReportModal && (\n        <ReportModal\n          isVisible={showReportModal}\n          onClose={() => setShowReportModal(false)}\n          confessionId={confession.id}\n          contentType=\"confession\"\n        />\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: \"absolute\",\n    right: 0,\n    bottom: 80,\n    zIndex: 10,\n  },\n  actionsContainer: {\n    alignItems: \"center\",\n    paddingHorizontal: 8,\n  },\n  actionButton: {\n    width: 50,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: 20,\n  },\n  actionCount: {\n    color: \"#fff\",\n    fontSize: 12,\n    marginTop: 4,\n    fontWeight: \"600\",\n    textShadowColor: \"rgba(0, 0, 0, 0.3)\",\n    textShadowOffset: { width: 0, height: 1 },\n    textShadowRadius: 2,\n  },\n  activeText: {\n    color: \"#ff4458\",\n  },\n  viewsContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 10,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    backgroundColor: \"rgba(0, 0, 0, 0.3)\",\n    borderRadius: 16,\n    alignSelf: \"center\",\n  },\n  viewsText: {\n    color: \"#fff\",\n    fontSize: 12,\n    marginLeft: 4,\n    fontWeight: \"500\",\n  },\n  newCommentBadge: {\n    position: \"absolute\",\n    top: -8,\n    right: -8,\n    backgroundColor: \"#9333EA\",\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 10,\n    minWidth: 30,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  newCommentText: {\n    color: \"#fff\",\n    fontSize: 10,\n    fontWeight: \"bold\",\n  },\n  typingIndicator: {\n    position: \"absolute\",\n    bottom: -5,\n    right: -5,\n    backgroundColor: \"rgba(147, 51, 234, 0.8)\",\n    borderRadius: 10,\n    padding: 4,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoProgressIndicator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'progress'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [currentTime, duration, progress]","fix":{"range":[724,747],"text":"[currentTime, duration, progress]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'opacity'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [isVisible, opacity]","fix":{"range":[846,857],"text":"[isVisible, opacity]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming, interpolate } from \"react-native-reanimated\";\n\ninterface VideoProgressIndicatorProps {\n  currentTime: number;\n  duration: number;\n  isVisible?: boolean;\n}\n\nexport default function VideoProgressIndicator({\n  currentTime,\n  duration,\n  isVisible = true,\n}: VideoProgressIndicatorProps) {\n  const insets = useSafeAreaInsets();\n  const progress = useSharedValue(0);\n  const opacity = useSharedValue(isVisible ? 1 : 0);\n\n  useEffect(() => {\n    if (duration > 0) {\n      progress.value = withTiming(currentTime / duration, { duration: 100 });\n    }\n  }, [currentTime, duration]);\n\n  useEffect(() => {\n    opacity.value = withTiming(isVisible ? 1 : 0, { duration: 300 });\n  }, [isVisible]);\n\n  const progressStyle = useAnimatedStyle(\n    () => ({\n      width: `${interpolate(progress.value, [0, 1], [0, 100])}%`,\n    }),\n    [],\n  );\n\n  const containerStyle = useAnimatedStyle(\n    () => ({\n      opacity: opacity.value,\n    }),\n    [],\n  );\n\n  return (\n    <Animated.View\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 120 + insets.bottom,\n          left: 16,\n          right: 90,\n          height: 3,\n          backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n          borderRadius: 2,\n        },\n        containerStyle,\n      ]}\n    >\n      <Animated.View\n        style={[\n          {\n            height: \"100%\",\n            backgroundColor: \"#1D9BF0\",\n            borderRadius: 2,\n          },\n          progressStyle,\n        ]}\n      />\n    </Animated.View>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/VideoSkeleton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'interpolate' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'opacity' and 'scale'. Either include them or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [delay, opacity, scale]","fix":{"range":[1292,1299],"text":"[delay, opacity, scale]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'onAnimationComplete', 'progressWidth', 'pulseOpacity', 'reduceMotion', and 'shimmerTranslateX'. Either include them or remove the dependency array.","line":194,"column":6,"nodeType":"ArrayExpression","endLine":194,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [isVisible, onAnimationComplete, progressWidth, pulseOpacity, reduceMotion, shimmerTranslateX, state]","fix":{"range":[6042,6060],"text":"[isVisible, onAnimationComplete, progressWidth, pulseOpacity, reduceMotion, shimmerTranslateX, state]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo } from \"react\";\nimport { View, Dimensions, StyleSheet, AccessibilityInfo, Platform } from \"react-native\";\nimport { BlurView } from \"expo-blur\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withRepeat,\n  withTiming,\n  withSequence,\n  withDelay,\n  cancelAnimation,\n  Easing,\n  interpolate,\n  FadeIn,\n  FadeOut,\n} from \"react-native-reanimated\";\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\n\ntype LoadingState = \"initial\" | \"refresh\" | \"loadMore\";\ntype VideoLayout = \"tiktok\" | \"enhanced\" | \"list\";\n\ninterface VideoSkeletonProps {\n  isVisible: boolean;\n  state?: LoadingState;\n  layout?: VideoLayout;\n  itemCount?: number;\n  showNetworkIndicator?: boolean;\n  showErrorPlaceholder?: boolean;\n  onAnimationComplete?: () => void;\n}\n\ninterface SkeletonItemProps {\n  index: number;\n  layout: VideoLayout;\n  delay: number;\n}\n\nconst SkeletonItem: React.FC<SkeletonItemProps> = ({ index, layout, delay }) => {\n  const opacity = useSharedValue(0);\n  const scale = useSharedValue(0.95);\n\n  useEffect(() => {\n    opacity.value = withDelay(delay, withTiming(1, { duration: 400, easing: Easing.out(Easing.quad) }));\n    scale.value = withDelay(delay, withTiming(1, { duration: 400, easing: Easing.out(Easing.quad) }));\n  }, [delay]);\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    transform: [{ scale: scale.value }],\n  }));\n\n  if (layout === \"tiktok\") {\n    return (\n      <Animated.View style={[styles.tiktokItem, animatedStyle]}>\n        <View style={styles.tiktokVideoPlaceholder} />\n\n        <View style={styles.tiktokSidebar}>\n          <View style={styles.avatarPlaceholder} />\n          <View style={styles.actionButtonPlaceholder} />\n          <View style={styles.actionButtonPlaceholder} />\n          <View style={styles.actionButtonPlaceholder} />\n        </View>\n\n        <View style={styles.tiktokBottomContent}>\n          <View style={[styles.textLine, { width: \"80%\" }]} />\n          <View style={[styles.textLine, { width: \"60%\" }]} />\n          <View style={[styles.textLine, { width: \"40%\", opacity: 0.7 }]} />\n        </View>\n      </Animated.View>\n    );\n  }\n\n  if (layout === \"enhanced\") {\n    return (\n      <Animated.View style={[styles.enhancedItem, animatedStyle]}>\n        <View style={styles.enhancedVideoContainer}>\n          <View style={styles.thumbnailPlaceholder} />\n          <View style={styles.playButtonPlaceholder} />\n        </View>\n\n        <View style={styles.enhancedControls}>\n          <View style={styles.progressBarPlaceholder} />\n          <View style={styles.controlButtonsContainer}>\n            <View style={styles.smallButtonPlaceholder} />\n            <View style={styles.smallButtonPlaceholder} />\n            <View style={styles.smallButtonPlaceholder} />\n          </View>\n        </View>\n\n        <View style={styles.enhancedMetadata}>\n          <View style={[styles.textLine, { width: \"70%\" }]} />\n          <View style={[styles.textLine, { width: \"50%\", height: 12 }]} />\n        </View>\n      </Animated.View>\n    );\n  }\n\n  return (\n    <Animated.View style={[styles.listItem, animatedStyle]}>\n      <View style={styles.listThumbnail} />\n      <View style={styles.listContent}>\n        <View style={[styles.textLine, { width: \"90%\" }]} />\n        <View style={[styles.textLine, { width: \"60%\", height: 12 }]} />\n        <View style={styles.listMetadata}>\n          <View style={styles.metadataItem} />\n          <View style={styles.metadataItem} />\n          <View style={styles.metadataItem} />\n        </View>\n      </View>\n    </Animated.View>\n  );\n};\n\nexport default function VideoSkeleton({\n  isVisible,\n  state = \"initial\",\n  layout = \"tiktok\",\n  itemCount,\n  showNetworkIndicator = false,\n  showErrorPlaceholder = false,\n  onAnimationComplete,\n}: VideoSkeletonProps) {\n  const shimmerTranslateX = useSharedValue(-screenWidth);\n  const pulseOpacity = useSharedValue(0.3);\n  const progressWidth = useSharedValue(0);\n\n  const calculatedItemCount = useMemo(() => {\n    if (itemCount) return itemCount;\n    if (state === \"loadMore\") return 2;\n    if (state === \"refresh\") return 3;\n    if (layout === \"list\") return 5;\n    return layout === \"tiktok\" ? 1 : 3;\n  }, [itemCount, state, layout]);\n\n  const [reduceMotion, setReduceMotion] = React.useState(false);\n\n  useEffect(() => {\n    AccessibilityInfo.isReduceMotionEnabled().then(setReduceMotion);\n    const subscription = AccessibilityInfo.addEventListener(\"reduceMotionChanged\", setReduceMotion);\n    return () => subscription?.remove();\n  }, []);\n\n  useEffect(() => {\n    if (isVisible) {\n      if (!reduceMotion) {\n        shimmerTranslateX.value = withRepeat(\n          withTiming(screenWidth * 2, { duration: 1500, easing: Easing.linear }),\n          -1,\n          false,\n        );\n\n        pulseOpacity.value = withRepeat(\n          withSequence(withTiming(0.6, { duration: 1000 }), withTiming(0.3, { duration: 1000 })),\n          -1,\n          false,\n        );\n      } else {\n        // Simple fade for reduced motion\n        shimmerTranslateX.value = 0;\n        pulseOpacity.value = withTiming(0.5, { duration: 200 });\n      }\n\n      if (state === \"refresh\") {\n        progressWidth.value = withTiming(100, {\n          duration: 2000,\n          easing: Easing.out(Easing.quad),\n        });\n      }\n\n      const announceLoading = () => {\n        AccessibilityInfo.announceForAccessibility(`Loading ${state === \"refresh\" ? \"new\" : \"\"} videos`);\n      };\n      announceLoading();\n\n      if (onAnimationComplete) {\n        const timer = setTimeout(onAnimationComplete, 2000);\n        return () => clearTimeout(timer);\n      }\n    } else {\n      cancelAnimation(shimmerTranslateX);\n      cancelAnimation(pulseOpacity);\n      cancelAnimation(progressWidth);\n      shimmerTranslateX.value = -screenWidth;\n      pulseOpacity.value = 0.3;\n      progressWidth.value = 0;\n    }\n\n    return () => {\n      cancelAnimation(shimmerTranslateX);\n      cancelAnimation(pulseOpacity);\n      cancelAnimation(progressWidth);\n    };\n  }, [isVisible, state]);\n\n  const shimmerStyle = useAnimatedStyle(() => ({\n    transform: [{ translateX: shimmerTranslateX.value }],\n  }));\n\n  const containerStyle = useAnimatedStyle(() => ({\n    opacity: withTiming(isVisible ? 1 : 0, { duration: 300 }),\n  }));\n\n  const pulseStyle = useAnimatedStyle(() => ({\n    opacity: pulseOpacity.value,\n  }));\n\n  const progressStyle = useAnimatedStyle(() => ({\n    width: `${progressWidth.value}%`,\n  }));\n\n  if (!isVisible) return null;\n\n  return (\n    <Animated.View\n      style={[styles.container, containerStyle]}\n      entering={FadeIn.duration(300)}\n      exiting={FadeOut.duration(300)}\n      accessibilityRole=\"progressbar\"\n      accessibilityLabel=\"Loading videos\"\n    >\n      {Platform.OS === \"ios\" ? (\n        <BlurView intensity={layout === \"tiktok\" ? 20 : 10} tint=\"dark\" style={StyleSheet.absoluteFill} />\n      ) : (\n        <View style={[StyleSheet.absoluteFill, { backgroundColor: \"rgba(0, 0, 0, 0.9)\" }]} />\n      )}\n\n      <View style={styles.shimmerContainer}>\n        <Animated.View style={[styles.shimmer, shimmerStyle]} />\n      </View>\n\n      {state === \"refresh\" && (\n        <Animated.View style={styles.refreshIndicator}>\n          <Animated.View style={[styles.progressBar, progressStyle]} />\n        </Animated.View>\n      )}\n\n      {showNetworkIndicator && (\n        <Animated.View style={[styles.networkIndicator, pulseStyle]}>\n          <View style={styles.networkDot} />\n          <View style={[styles.textLine, { width: 100, height: 10 }]} />\n        </Animated.View>\n      )}\n\n      <View style={[styles.skeletonContent, layout === \"list\" && styles.listLayout]}>\n        {Array.from({ length: calculatedItemCount }).map((_, index) => (\n          <SkeletonItem key={`skeleton-${index}`} index={index} layout={layout} delay={index * 100} />\n        ))}\n      </View>\n\n      {state === \"loadMore\" && (\n        <View style={styles.loadMoreIndicator}>\n          <Animated.View style={pulseStyle}>\n            <View style={styles.loadMoreDot} />\n            <View style={styles.loadMoreDot} />\n            <View style={styles.loadMoreDot} />\n          </Animated.View>\n        </View>\n      )}\n\n      {showErrorPlaceholder && (\n        <Animated.View style={[styles.errorPlaceholder, pulseStyle]}>\n          <View style={styles.errorIcon} />\n          <View style={[styles.textLine, { width: 200 }]} />\n          <View style={styles.retryButtonPlaceholder} />\n        </Animated.View>\n      )}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"#1F2937\",\n    zIndex: 10,\n  },\n  shimmerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    overflow: \"hidden\",\n  },\n  shimmer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: screenWidth * 0.5,\n    height: screenHeight,\n    backgroundColor: \"rgba(255, 255, 255, 0.08)\",\n    transform: [{ skewX: \"-20deg\" }],\n  },\n  refreshIndicator: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 3,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    zIndex: 20,\n  },\n  progressBar: {\n    height: \"100%\",\n    backgroundColor: \"#60A5FA\",\n  },\n  networkIndicator: {\n    position: \"absolute\",\n    top: 50,\n    right: 20,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 8,\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n    borderRadius: 20,\n    zIndex: 15,\n  },\n  networkDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: \"#FCD34D\",\n    marginRight: 8,\n  },\n  skeletonContent: {\n    flex: 1,\n  },\n  listLayout: {\n    paddingTop: 60,\n  },\n  tiktokItem: {\n    width: screenWidth,\n    height: screenHeight,\n  },\n  tiktokVideoPlaceholder: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: \"rgba(255, 255, 255, 0.05)\",\n  },\n  tiktokSidebar: {\n    position: \"absolute\",\n    bottom: 100,\n    right: 20,\n    alignItems: \"center\",\n  },\n  avatarPlaceholder: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n    marginBottom: 20,\n    borderWidth: 2,\n    borderColor: \"rgba(255, 255, 255, 0.1)\",\n  },\n  actionButtonPlaceholder: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: \"rgba(255, 255, 255, 0.15)\",\n    marginBottom: 16,\n  },\n  tiktokBottomContent: {\n    position: \"absolute\",\n    bottom: 40,\n    left: 20,\n    right: 80,\n  },\n  enhancedItem: {\n    marginVertical: 10,\n    marginHorizontal: 20,\n    backgroundColor: \"rgba(255, 255, 255, 0.05)\",\n    borderRadius: 12,\n    overflow: \"hidden\",\n  },\n  enhancedVideoContainer: {\n    height: 200,\n    backgroundColor: \"rgba(255, 255, 255, 0.05)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  thumbnailPlaceholder: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: \"rgba(255, 255, 255, 0.05)\",\n  },\n  playButtonPlaceholder: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n  },\n  enhancedControls: {\n    padding: 12,\n  },\n  progressBarPlaceholder: {\n    height: 4,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    borderRadius: 2,\n    marginBottom: 12,\n  },\n  controlButtonsContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  smallButtonPlaceholder: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: \"rgba(255, 255, 255, 0.15)\",\n  },\n  enhancedMetadata: {\n    padding: 12,\n  },\n  listItem: {\n    flexDirection: \"row\",\n    padding: 12,\n    marginHorizontal: 16,\n    marginVertical: 8,\n    backgroundColor: \"rgba(255, 255, 255, 0.05)\",\n    borderRadius: 8,\n  },\n  listThumbnail: {\n    width: 120,\n    height: 80,\n    borderRadius: 6,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    marginRight: 12,\n  },\n  listContent: {\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  listMetadata: {\n    flexDirection: \"row\",\n    marginTop: 8,\n  },\n  metadataItem: {\n    width: 40,\n    height: 16,\n    borderRadius: 8,\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    marginRight: 12,\n  },\n  textLine: {\n    height: 16,\n    backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  loadMoreIndicator: {\n    position: \"absolute\",\n    bottom: 20,\n    alignSelf: \"center\",\n    flexDirection: \"row\",\n  },\n  loadMoreDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: \"rgba(255, 255, 255, 0.3)\",\n    marginHorizontal: 4,\n  },\n  errorPlaceholder: {\n    position: \"absolute\",\n    top: \"40%\",\n    alignSelf: \"center\",\n    alignItems: \"center\",\n  },\n  errorIcon: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: \"rgba(239, 68, 68, 0.2)\",\n    marginBottom: 16,\n  },\n  retryButtonPlaceholder: {\n    width: 120,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: \"rgba(255, 255, 255, 0.2)\",\n    marginTop: 16,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ViewModeButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ads/BannerAdComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ads/FeedAdComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/fallbacks/BasicAudioControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/fallbacks/BasicCameraControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/fallbacks/FeatureUnavailableNotice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/fallbacks/ServerProcessingNotice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/fallbacks/SimpleVideoEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/fallbacks/TextInputFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/trendingConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/iamabillionaire/Downloads/SupaSecret/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]